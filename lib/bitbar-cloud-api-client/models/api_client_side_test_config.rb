=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

require 'date'

module BitbarCloudApiClient
  class APIClientSideTestConfig
    attr_accessor :appium_version

    attr_accessor :browser_name

    attr_accessor :capabilities_schema

    attr_accessor :external_id

    attr_accessor :hook_url

    attr_accessor :location

    attr_accessor :os_version

    attr_accessor :platform

    attr_accessor :screen_resolution

    attr_accessor :selenium_version

    attr_accessor :target

    attr_accessor :test_name

    attr_accessor :time_zone

    attr_accessor :version

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'appium_version' => :'appiumVersion',
        :'browser_name' => :'browserName',
        :'capabilities_schema' => :'capabilitiesSchema',
        :'external_id' => :'externalId',
        :'hook_url' => :'hookURL',
        :'location' => :'location',
        :'os_version' => :'osVersion',
        :'platform' => :'platform',
        :'screen_resolution' => :'screenResolution',
        :'selenium_version' => :'seleniumVersion',
        :'target' => :'target',
        :'test_name' => :'testName',
        :'time_zone' => :'timeZone',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'appium_version' => :'Object',
        :'browser_name' => :'Object',
        :'capabilities_schema' => :'Object',
        :'external_id' => :'Object',
        :'hook_url' => :'Object',
        :'location' => :'Object',
        :'os_version' => :'Object',
        :'platform' => :'Object',
        :'screen_resolution' => :'Object',
        :'selenium_version' => :'Object',
        :'target' => :'Object',
        :'test_name' => :'Object',
        :'time_zone' => :'Object',
        :'version' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BitbarCloudApiClient::APIClientSideTestConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BitbarCloudApiClient::APIClientSideTestConfig`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'appium_version')
        self.appium_version = attributes[:'appium_version']
      end

      if attributes.key?(:'browser_name')
        self.browser_name = attributes[:'browser_name']
      end

      if attributes.key?(:'capabilities_schema')
        self.capabilities_schema = attributes[:'capabilities_schema']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'hook_url')
        self.hook_url = attributes[:'hook_url']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'os_version')
        self.os_version = attributes[:'os_version']
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'screen_resolution')
        self.screen_resolution = attributes[:'screen_resolution']
      end

      if attributes.key?(:'selenium_version')
        self.selenium_version = attributes[:'selenium_version']
      end

      if attributes.key?(:'target')
        self.target = attributes[:'target']
      end

      if attributes.key?(:'test_name')
        self.test_name = attributes[:'test_name']
      end

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      capabilities_schema_validator = EnumAttributeValidator.new('Object', ['JSONWP', 'MIXED', 'W3C'])
      return false unless capabilities_schema_validator.valid?(@capabilities_schema)
      target_validator = EnumAttributeValidator.new('Object', ['ANDROID', 'IOS', 'SELENDROID', 'SAFARI', 'CHROME', 'XCUITEST', 'DESKTOP'])
      return false unless target_validator.valid?(@target)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capabilities_schema Object to be assigned
    def capabilities_schema=(capabilities_schema)
      validator = EnumAttributeValidator.new('Object', ['JSONWP', 'MIXED', 'W3C'])
      unless validator.valid?(capabilities_schema)
        fail ArgumentError, "invalid value for \"capabilities_schema\", must be one of #{validator.allowable_values}."
      end
      @capabilities_schema = capabilities_schema
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target Object to be assigned
    def target=(target)
      validator = EnumAttributeValidator.new('Object', ['ANDROID', 'IOS', 'SELENDROID', 'SAFARI', 'CHROME', 'XCUITEST', 'DESKTOP'])
      unless validator.valid?(target)
        fail ArgumentError, "invalid value for \"target\", must be one of #{validator.allowable_values}."
      end
      @target = target
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          appium_version == o.appium_version &&
          browser_name == o.browser_name &&
          capabilities_schema == o.capabilities_schema &&
          external_id == o.external_id &&
          hook_url == o.hook_url &&
          location == o.location &&
          os_version == o.os_version &&
          platform == o.platform &&
          screen_resolution == o.screen_resolution &&
          selenium_version == o.selenium_version &&
          target == o.target &&
          test_name == o.test_name &&
          time_zone == o.time_zone &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [appium_version, browser_name, capabilities_schema, external_id, hook_url, location, os_version, platform, screen_resolution, selenium_version, target, test_name, time_zone, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BitbarCloudApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
