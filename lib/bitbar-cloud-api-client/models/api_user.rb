=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

require 'date'

module BitbarCloudApiClient
  class APIUser
    attr_accessor :id

    attr_accessor :self_uri

    attr_accessor :service_ids

    attr_accessor :account_id

    attr_accessor :account_service_ids

    attr_accessor :address

    attr_accessor :city

    attr_accessor :code

    attr_accessor :country

    attr_accessor :create_time

    attr_accessor :delete_time

    attr_accessor :email

    attr_accessor :enabled

    attr_accessor :is_main_user

    attr_accessor :last_login_time

    attr_accessor :last_launched_test_time

    attr_accessor :main_user_email

    attr_accessor :main_user_id

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :organization

    attr_accessor :phone

    attr_accessor :roles

    attr_accessor :state

    attr_accessor :status

    attr_accessor :time_zone

    attr_accessor :api_key

    attr_accessor :created_by_id

    attr_accessor :created_by_email

    attr_accessor :mfa_qr_code_url

    attr_accessor :mfa_status

    attr_accessor :registration_ip

    attr_accessor :account_owners

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'self_uri' => :'selfURI',
        :'service_ids' => :'serviceIds',
        :'account_id' => :'accountId',
        :'account_service_ids' => :'accountServiceIds',
        :'address' => :'address',
        :'city' => :'city',
        :'code' => :'code',
        :'country' => :'country',
        :'create_time' => :'createTime',
        :'delete_time' => :'deleteTime',
        :'email' => :'email',
        :'enabled' => :'enabled',
        :'is_main_user' => :'isMainUser',
        :'last_login_time' => :'lastLoginTime',
        :'last_launched_test_time' => :'lastLaunchedTestTime',
        :'main_user_email' => :'mainUserEmail',
        :'main_user_id' => :'mainUserId',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'organization' => :'organization',
        :'phone' => :'phone',
        :'roles' => :'roles',
        :'state' => :'state',
        :'status' => :'status',
        :'time_zone' => :'timeZone',
        :'api_key' => :'apiKey',
        :'created_by_id' => :'createdById',
        :'created_by_email' => :'createdByEmail',
        :'mfa_qr_code_url' => :'mfaQRCodeUrl',
        :'mfa_status' => :'mfaStatus',
        :'registration_ip' => :'registrationIP',
        :'account_owners' => :'accountOwners'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'self_uri' => :'Object',
        :'service_ids' => :'Object',
        :'account_id' => :'Object',
        :'account_service_ids' => :'Object',
        :'address' => :'Object',
        :'city' => :'Object',
        :'code' => :'Object',
        :'country' => :'Object',
        :'create_time' => :'Object',
        :'delete_time' => :'Object',
        :'email' => :'Object',
        :'enabled' => :'Object',
        :'is_main_user' => :'Object',
        :'last_login_time' => :'Object',
        :'last_launched_test_time' => :'Object',
        :'main_user_email' => :'Object',
        :'main_user_id' => :'Object',
        :'first_name' => :'Object',
        :'last_name' => :'Object',
        :'organization' => :'Object',
        :'phone' => :'Object',
        :'roles' => :'Object',
        :'state' => :'Object',
        :'status' => :'Object',
        :'time_zone' => :'Object',
        :'api_key' => :'Object',
        :'created_by_id' => :'Object',
        :'created_by_email' => :'Object',
        :'mfa_qr_code_url' => :'Object',
        :'mfa_status' => :'Object',
        :'registration_ip' => :'Object',
        :'account_owners' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BitbarCloudApiClient::APIUser` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BitbarCloudApiClient::APIUser`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'self_uri')
        self.self_uri = attributes[:'self_uri']
      end

      if attributes.key?(:'service_ids')
        if (value = attributes[:'service_ids']).is_a?(Array)
          self.service_ids = value
        end
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'account_service_ids')
        if (value = attributes[:'account_service_ids']).is_a?(Array)
          self.account_service_ids = value
        end
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.key?(:'delete_time')
        self.delete_time = attributes[:'delete_time']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'is_main_user')
        self.is_main_user = attributes[:'is_main_user']
      end

      if attributes.key?(:'last_login_time')
        self.last_login_time = attributes[:'last_login_time']
      end

      if attributes.key?(:'last_launched_test_time')
        self.last_launched_test_time = attributes[:'last_launched_test_time']
      end

      if attributes.key?(:'main_user_email')
        self.main_user_email = attributes[:'main_user_email']
      end

      if attributes.key?(:'main_user_id')
        self.main_user_id = attributes[:'main_user_id']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'roles')
        if (value = attributes[:'roles']).is_a?(Array)
          self.roles = value
        end
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      end

      if attributes.key?(:'api_key')
        self.api_key = attributes[:'api_key']
      end

      if attributes.key?(:'created_by_id')
        self.created_by_id = attributes[:'created_by_id']
      end

      if attributes.key?(:'created_by_email')
        self.created_by_email = attributes[:'created_by_email']
      end

      if attributes.key?(:'mfa_qr_code_url')
        self.mfa_qr_code_url = attributes[:'mfa_qr_code_url']
      end

      if attributes.key?(:'mfa_status')
        self.mfa_status = attributes[:'mfa_status']
      end

      if attributes.key?(:'registration_ip')
        self.registration_ip = attributes[:'registration_ip']
      end

      if attributes.key?(:'account_owners')
        if (value = attributes[:'account_owners']).is_a?(Array)
          self.account_owners = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('Object', ['INACTIVE', 'DISABLED', 'ENABLED'])
      return false unless status_validator.valid?(@status)
      mfa_status_validator = EnumAttributeValidator.new('Object', ['VERIFICATION_NEED', 'DISABLED', 'ENABLED'])
      return false unless mfa_status_validator.valid?(@mfa_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('Object', ['INACTIVE', 'DISABLED', 'ENABLED'])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mfa_status Object to be assigned
    def mfa_status=(mfa_status)
      validator = EnumAttributeValidator.new('Object', ['VERIFICATION_NEED', 'DISABLED', 'ENABLED'])
      unless validator.valid?(mfa_status)
        fail ArgumentError, "invalid value for \"mfa_status\", must be one of #{validator.allowable_values}."
      end
      @mfa_status = mfa_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          self_uri == o.self_uri &&
          service_ids == o.service_ids &&
          account_id == o.account_id &&
          account_service_ids == o.account_service_ids &&
          address == o.address &&
          city == o.city &&
          code == o.code &&
          country == o.country &&
          create_time == o.create_time &&
          delete_time == o.delete_time &&
          email == o.email &&
          enabled == o.enabled &&
          is_main_user == o.is_main_user &&
          last_login_time == o.last_login_time &&
          last_launched_test_time == o.last_launched_test_time &&
          main_user_email == o.main_user_email &&
          main_user_id == o.main_user_id &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          organization == o.organization &&
          phone == o.phone &&
          roles == o.roles &&
          state == o.state &&
          status == o.status &&
          time_zone == o.time_zone &&
          api_key == o.api_key &&
          created_by_id == o.created_by_id &&
          created_by_email == o.created_by_email &&
          mfa_qr_code_url == o.mfa_qr_code_url &&
          mfa_status == o.mfa_status &&
          registration_ip == o.registration_ip &&
          account_owners == o.account_owners
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, self_uri, service_ids, account_id, account_service_ids, address, city, code, country, create_time, delete_time, email, enabled, is_main_user, last_login_time, last_launched_test_time, main_user_email, main_user_id, first_name, last_name, organization, phone, roles, state, status, time_zone, api_key, created_by_id, created_by_email, mfa_qr_code_url, mfa_status, registration_ip, account_owners].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BitbarCloudApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
