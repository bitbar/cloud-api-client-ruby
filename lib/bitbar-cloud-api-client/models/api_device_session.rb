=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

require 'date'

module BitbarCloudApiClient
  class APIDeviceSession
    attr_accessor :id

    attr_accessor :self_uri

    attr_accessor :create_time

    attr_accessor :device

    attr_accessor :end_time

    attr_accessor :device_log_first_timestamp

    attr_accessor :start_time

    attr_accessor :install_time

    attr_accessor :time_limit

    attr_accessor :type

    attr_accessor :state

    attr_accessor :test_case_all_count

    attr_accessor :test_case_success_count

    attr_accessor :test_case_passed_count

    attr_accessor :test_case_failed_count

    attr_accessor :test_case_skipped_count

    attr_accessor :billable

    attr_accessor :exclude_reason

    attr_accessor :device_instance_id

    attr_accessor :retry_state

    attr_accessor :auto_retries_left_count

    attr_accessor :device_time

    attr_accessor :duration

    attr_accessor :test_run_id

    attr_accessor :project_id

    attr_accessor :success_ratio

    attr_accessor :project_name

    attr_accessor :test_run_name

    attr_accessor :name

    attr_accessor :external_id

    attr_accessor :client_side_id

    attr_accessor :user_id

    attr_accessor :user_email

    attr_accessor :row_index

    attr_accessor :account_id

    attr_accessor :config

    attr_accessor :ui_link

    attr_accessor :biometric_instrumentation

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'self_uri' => :'selfURI',
        :'create_time' => :'createTime',
        :'device' => :'device',
        :'end_time' => :'endTime',
        :'device_log_first_timestamp' => :'deviceLogFirstTimestamp',
        :'start_time' => :'startTime',
        :'install_time' => :'installTime',
        :'time_limit' => :'timeLimit',
        :'type' => :'type',
        :'state' => :'state',
        :'test_case_all_count' => :'testCaseAllCount',
        :'test_case_success_count' => :'testCaseSuccessCount',
        :'test_case_passed_count' => :'testCasePassedCount',
        :'test_case_failed_count' => :'testCaseFailedCount',
        :'test_case_skipped_count' => :'testCaseSkippedCount',
        :'billable' => :'billable',
        :'exclude_reason' => :'excludeReason',
        :'device_instance_id' => :'deviceInstanceId',
        :'retry_state' => :'retryState',
        :'auto_retries_left_count' => :'autoRetriesLeftCount',
        :'device_time' => :'deviceTime',
        :'duration' => :'duration',
        :'test_run_id' => :'testRunId',
        :'project_id' => :'projectId',
        :'success_ratio' => :'successRatio',
        :'project_name' => :'projectName',
        :'test_run_name' => :'testRunName',
        :'name' => :'name',
        :'external_id' => :'externalId',
        :'client_side_id' => :'clientSideId',
        :'user_id' => :'userId',
        :'user_email' => :'userEmail',
        :'row_index' => :'rowIndex',
        :'account_id' => :'accountId',
        :'config' => :'config',
        :'ui_link' => :'uiLink',
        :'biometric_instrumentation' => :'biometricInstrumentation'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'self_uri' => :'Object',
        :'create_time' => :'Object',
        :'device' => :'Object',
        :'end_time' => :'Object',
        :'device_log_first_timestamp' => :'Object',
        :'start_time' => :'Object',
        :'install_time' => :'Object',
        :'time_limit' => :'Object',
        :'type' => :'Object',
        :'state' => :'Object',
        :'test_case_all_count' => :'Object',
        :'test_case_success_count' => :'Object',
        :'test_case_passed_count' => :'Object',
        :'test_case_failed_count' => :'Object',
        :'test_case_skipped_count' => :'Object',
        :'billable' => :'Object',
        :'exclude_reason' => :'Object',
        :'device_instance_id' => :'Object',
        :'retry_state' => :'Object',
        :'auto_retries_left_count' => :'Object',
        :'device_time' => :'Object',
        :'duration' => :'Object',
        :'test_run_id' => :'Object',
        :'project_id' => :'Object',
        :'success_ratio' => :'Object',
        :'project_name' => :'Object',
        :'test_run_name' => :'Object',
        :'name' => :'Object',
        :'external_id' => :'Object',
        :'client_side_id' => :'Object',
        :'user_id' => :'Object',
        :'user_email' => :'Object',
        :'row_index' => :'Object',
        :'account_id' => :'Object',
        :'config' => :'Object',
        :'ui_link' => :'Object',
        :'biometric_instrumentation' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BitbarCloudApiClient::APIDeviceSession` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BitbarCloudApiClient::APIDeviceSession`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'self_uri')
        self.self_uri = attributes[:'self_uri']
      end

      if attributes.key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'device_log_first_timestamp')
        self.device_log_first_timestamp = attributes[:'device_log_first_timestamp']
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'install_time')
        self.install_time = attributes[:'install_time']
      end

      if attributes.key?(:'time_limit')
        self.time_limit = attributes[:'time_limit']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'test_case_all_count')
        self.test_case_all_count = attributes[:'test_case_all_count']
      end

      if attributes.key?(:'test_case_success_count')
        self.test_case_success_count = attributes[:'test_case_success_count']
      end

      if attributes.key?(:'test_case_passed_count')
        self.test_case_passed_count = attributes[:'test_case_passed_count']
      end

      if attributes.key?(:'test_case_failed_count')
        self.test_case_failed_count = attributes[:'test_case_failed_count']
      end

      if attributes.key?(:'test_case_skipped_count')
        self.test_case_skipped_count = attributes[:'test_case_skipped_count']
      end

      if attributes.key?(:'billable')
        self.billable = attributes[:'billable']
      end

      if attributes.key?(:'exclude_reason')
        self.exclude_reason = attributes[:'exclude_reason']
      end

      if attributes.key?(:'device_instance_id')
        self.device_instance_id = attributes[:'device_instance_id']
      end

      if attributes.key?(:'retry_state')
        self.retry_state = attributes[:'retry_state']
      end

      if attributes.key?(:'auto_retries_left_count')
        self.auto_retries_left_count = attributes[:'auto_retries_left_count']
      end

      if attributes.key?(:'device_time')
        self.device_time = attributes[:'device_time']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'test_run_id')
        self.test_run_id = attributes[:'test_run_id']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.key?(:'success_ratio')
        self.success_ratio = attributes[:'success_ratio']
      end

      if attributes.key?(:'project_name')
        self.project_name = attributes[:'project_name']
      end

      if attributes.key?(:'test_run_name')
        self.test_run_name = attributes[:'test_run_name']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'client_side_id')
        self.client_side_id = attributes[:'client_side_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'user_email')
        self.user_email = attributes[:'user_email']
      end

      if attributes.key?(:'row_index')
        self.row_index = attributes[:'row_index']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'config')
        self.config = attributes[:'config']
      end

      if attributes.key?(:'ui_link')
        self.ui_link = attributes[:'ui_link']
      end

      if attributes.key?(:'biometric_instrumentation')
        self.biometric_instrumentation = attributes[:'biometric_instrumentation']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('Object', ['AUTOMATIC', 'MANUAL_APP', 'MANUAL_WEB', 'REMOTE'])
      return false unless type_validator.valid?(@type)
      state_validator = EnumAttributeValidator.new('Object', ['ABORTED', 'EXCLUDED', 'FAILED', 'RUNNING', 'SUCCEEDED', 'TIMEOUT', 'WAITING', 'WARNING'])
      return false unless state_validator.valid?(@state)
      retry_state_validator = EnumAttributeValidator.new('Object', ['NONE', 'MANUAL', 'AUTO'])
      return false unless retry_state_validator.valid?(@retry_state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('Object', ['AUTOMATIC', 'MANUAL_APP', 'MANUAL_WEB', 'REMOTE'])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('Object', ['ABORTED', 'EXCLUDED', 'FAILED', 'RUNNING', 'SUCCEEDED', 'TIMEOUT', 'WAITING', 'WARNING'])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] retry_state Object to be assigned
    def retry_state=(retry_state)
      validator = EnumAttributeValidator.new('Object', ['NONE', 'MANUAL', 'AUTO'])
      unless validator.valid?(retry_state)
        fail ArgumentError, "invalid value for \"retry_state\", must be one of #{validator.allowable_values}."
      end
      @retry_state = retry_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          self_uri == o.self_uri &&
          create_time == o.create_time &&
          device == o.device &&
          end_time == o.end_time &&
          device_log_first_timestamp == o.device_log_first_timestamp &&
          start_time == o.start_time &&
          install_time == o.install_time &&
          time_limit == o.time_limit &&
          type == o.type &&
          state == o.state &&
          test_case_all_count == o.test_case_all_count &&
          test_case_success_count == o.test_case_success_count &&
          test_case_passed_count == o.test_case_passed_count &&
          test_case_failed_count == o.test_case_failed_count &&
          test_case_skipped_count == o.test_case_skipped_count &&
          billable == o.billable &&
          exclude_reason == o.exclude_reason &&
          device_instance_id == o.device_instance_id &&
          retry_state == o.retry_state &&
          auto_retries_left_count == o.auto_retries_left_count &&
          device_time == o.device_time &&
          duration == o.duration &&
          test_run_id == o.test_run_id &&
          project_id == o.project_id &&
          success_ratio == o.success_ratio &&
          project_name == o.project_name &&
          test_run_name == o.test_run_name &&
          name == o.name &&
          external_id == o.external_id &&
          client_side_id == o.client_side_id &&
          user_id == o.user_id &&
          user_email == o.user_email &&
          row_index == o.row_index &&
          account_id == o.account_id &&
          config == o.config &&
          ui_link == o.ui_link &&
          biometric_instrumentation == o.biometric_instrumentation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, self_uri, create_time, device, end_time, device_log_first_timestamp, start_time, install_time, time_limit, type, state, test_case_all_count, test_case_success_count, test_case_passed_count, test_case_failed_count, test_case_skipped_count, billable, exclude_reason, device_instance_id, retry_state, auto_retries_left_count, device_time, duration, test_run_id, project_id, success_ratio, project_name, test_run_name, name, external_id, client_side_id, user_id, user_email, row_index, account_id, config, ui_link, biometric_instrumentation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BitbarCloudApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
