=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

require 'date'

module BitbarCloudApiClient
  class APIDeviceStatus
    attr_accessor :id

    attr_accessor :self_uri

    attr_accessor :alarm_on

    attr_accessor :asl_on

    attr_accessor :battery_level

    attr_accessor :bluetooth_on

    attr_accessor :cluster_id

    attr_accessor :cluster_name

    attr_accessor :device_id

    attr_accessor :device_name

    attr_accessor :device_time

    attr_accessor :device_time_zone

    attr_accessor :email_account

    attr_accessor :external_storage

    attr_accessor :flash_on

    attr_accessor :internal_storage

    attr_accessor :internet_access

    attr_accessor :location_service_on

    attr_accessor :mock_location_on

    attr_accessor :monitoring_on

    attr_accessor :screen_locked

    attr_accessor :sdcard_present

    attr_accessor :ssid

    attr_accessor :state

    attr_accessor :tds_version

    attr_accessor :test_executing

    attr_accessor :tethering_on

    attr_accessor :update_time

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'self_uri' => :'selfURI',
        :'alarm_on' => :'alarmOn',
        :'asl_on' => :'aslOn',
        :'battery_level' => :'batteryLevel',
        :'bluetooth_on' => :'bluetoothOn',
        :'cluster_id' => :'clusterId',
        :'cluster_name' => :'clusterName',
        :'device_id' => :'deviceId',
        :'device_name' => :'deviceName',
        :'device_time' => :'deviceTime',
        :'device_time_zone' => :'deviceTimeZone',
        :'email_account' => :'emailAccount',
        :'external_storage' => :'externalStorage',
        :'flash_on' => :'flashOn',
        :'internal_storage' => :'internalStorage',
        :'internet_access' => :'internetAccess',
        :'location_service_on' => :'locationServiceOn',
        :'mock_location_on' => :'mockLocationOn',
        :'monitoring_on' => :'monitoringOn',
        :'screen_locked' => :'screenLocked',
        :'sdcard_present' => :'sdcardPresent',
        :'ssid' => :'ssid',
        :'state' => :'state',
        :'tds_version' => :'tdsVersion',
        :'test_executing' => :'testExecuting',
        :'tethering_on' => :'tetheringOn',
        :'update_time' => :'updateTime'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'self_uri' => :'Object',
        :'alarm_on' => :'Object',
        :'asl_on' => :'Object',
        :'battery_level' => :'Object',
        :'bluetooth_on' => :'Object',
        :'cluster_id' => :'Object',
        :'cluster_name' => :'Object',
        :'device_id' => :'Object',
        :'device_name' => :'Object',
        :'device_time' => :'Object',
        :'device_time_zone' => :'Object',
        :'email_account' => :'Object',
        :'external_storage' => :'Object',
        :'flash_on' => :'Object',
        :'internal_storage' => :'Object',
        :'internet_access' => :'Object',
        :'location_service_on' => :'Object',
        :'mock_location_on' => :'Object',
        :'monitoring_on' => :'Object',
        :'screen_locked' => :'Object',
        :'sdcard_present' => :'Object',
        :'ssid' => :'Object',
        :'state' => :'Object',
        :'tds_version' => :'Object',
        :'test_executing' => :'Object',
        :'tethering_on' => :'Object',
        :'update_time' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BitbarCloudApiClient::APIDeviceStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BitbarCloudApiClient::APIDeviceStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'self_uri')
        self.self_uri = attributes[:'self_uri']
      end

      if attributes.key?(:'alarm_on')
        self.alarm_on = attributes[:'alarm_on']
      end

      if attributes.key?(:'asl_on')
        self.asl_on = attributes[:'asl_on']
      end

      if attributes.key?(:'battery_level')
        self.battery_level = attributes[:'battery_level']
      end

      if attributes.key?(:'bluetooth_on')
        self.bluetooth_on = attributes[:'bluetooth_on']
      end

      if attributes.key?(:'cluster_id')
        self.cluster_id = attributes[:'cluster_id']
      end

      if attributes.key?(:'cluster_name')
        self.cluster_name = attributes[:'cluster_name']
      end

      if attributes.key?(:'device_id')
        self.device_id = attributes[:'device_id']
      end

      if attributes.key?(:'device_name')
        self.device_name = attributes[:'device_name']
      end

      if attributes.key?(:'device_time')
        self.device_time = attributes[:'device_time']
      end

      if attributes.key?(:'device_time_zone')
        self.device_time_zone = attributes[:'device_time_zone']
      end

      if attributes.key?(:'email_account')
        self.email_account = attributes[:'email_account']
      end

      if attributes.key?(:'external_storage')
        self.external_storage = attributes[:'external_storage']
      end

      if attributes.key?(:'flash_on')
        self.flash_on = attributes[:'flash_on']
      end

      if attributes.key?(:'internal_storage')
        self.internal_storage = attributes[:'internal_storage']
      end

      if attributes.key?(:'internet_access')
        self.internet_access = attributes[:'internet_access']
      end

      if attributes.key?(:'location_service_on')
        self.location_service_on = attributes[:'location_service_on']
      end

      if attributes.key?(:'mock_location_on')
        self.mock_location_on = attributes[:'mock_location_on']
      end

      if attributes.key?(:'monitoring_on')
        self.monitoring_on = attributes[:'monitoring_on']
      end

      if attributes.key?(:'screen_locked')
        self.screen_locked = attributes[:'screen_locked']
      end

      if attributes.key?(:'sdcard_present')
        self.sdcard_present = attributes[:'sdcard_present']
      end

      if attributes.key?(:'ssid')
        self.ssid = attributes[:'ssid']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'tds_version')
        self.tds_version = attributes[:'tds_version']
      end

      if attributes.key?(:'test_executing')
        self.test_executing = attributes[:'test_executing']
      end

      if attributes.key?(:'tethering_on')
        self.tethering_on = attributes[:'tethering_on']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      state_validator = EnumAttributeValidator.new('Object', ['OFFLINE_CLEANING', 'OFFLINE_DIRTY', 'OFFLINE_FREE', 'OFFLINE_TESTING', 'ONLINE_CLEANING', 'ONLINE_DIRTY', 'ONLINE_FREE', 'ONLINE_TESTING'])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('Object', ['OFFLINE_CLEANING', 'OFFLINE_DIRTY', 'OFFLINE_FREE', 'OFFLINE_TESTING', 'ONLINE_CLEANING', 'ONLINE_DIRTY', 'ONLINE_FREE', 'ONLINE_TESTING'])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          self_uri == o.self_uri &&
          alarm_on == o.alarm_on &&
          asl_on == o.asl_on &&
          battery_level == o.battery_level &&
          bluetooth_on == o.bluetooth_on &&
          cluster_id == o.cluster_id &&
          cluster_name == o.cluster_name &&
          device_id == o.device_id &&
          device_name == o.device_name &&
          device_time == o.device_time &&
          device_time_zone == o.device_time_zone &&
          email_account == o.email_account &&
          external_storage == o.external_storage &&
          flash_on == o.flash_on &&
          internal_storage == o.internal_storage &&
          internet_access == o.internet_access &&
          location_service_on == o.location_service_on &&
          mock_location_on == o.mock_location_on &&
          monitoring_on == o.monitoring_on &&
          screen_locked == o.screen_locked &&
          sdcard_present == o.sdcard_present &&
          ssid == o.ssid &&
          state == o.state &&
          tds_version == o.tds_version &&
          test_executing == o.test_executing &&
          tethering_on == o.tethering_on &&
          update_time == o.update_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, self_uri, alarm_on, asl_on, battery_level, bluetooth_on, cluster_id, cluster_name, device_id, device_name, device_time, device_time_zone, email_account, external_storage, flash_on, internal_storage, internet_access, location_service_on, mock_location_on, monitoring_on, screen_locked, sdcard_present, ssid, state, tds_version, test_executing, tethering_on, update_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BitbarCloudApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
