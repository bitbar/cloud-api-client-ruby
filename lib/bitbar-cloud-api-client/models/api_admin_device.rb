=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

require 'date'

module BitbarCloudApiClient
  class APIAdminDevice
    attr_accessor :id

    attr_accessor :self_uri

    attr_accessor :cluster

    attr_accessor :device_model_id

    attr_accessor :device_model_name

    attr_accessor :enabled

    attr_accessor :fingerprint

    attr_accessor :init_step

    attr_accessor :manufacturer

    attr_accessor :name

    attr_accessor :serial_id

    attr_accessor :software_version

    attr_accessor :state

    attr_accessor :state_time

    attr_accessor :state_change_time

    attr_accessor :last_online_time

    attr_accessor :unlock_gesture

    attr_accessor :ip_address

    attr_accessor :account_id

    attr_accessor :main_user_email

    attr_accessor :main_user_id

    attr_accessor :location

    attr_accessor :test_time_limit

    attr_accessor :locked

    attr_accessor :os_type

    attr_accessor :platform

    attr_accessor :dedication_end_time

    attr_accessor :comment

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'self_uri' => :'selfURI',
        :'cluster' => :'cluster',
        :'device_model_id' => :'deviceModelId',
        :'device_model_name' => :'deviceModelName',
        :'enabled' => :'enabled',
        :'fingerprint' => :'fingerprint',
        :'init_step' => :'initStep',
        :'manufacturer' => :'manufacturer',
        :'name' => :'name',
        :'serial_id' => :'serialId',
        :'software_version' => :'softwareVersion',
        :'state' => :'state',
        :'state_time' => :'stateTime',
        :'state_change_time' => :'stateChangeTime',
        :'last_online_time' => :'lastOnlineTime',
        :'unlock_gesture' => :'unlockGesture',
        :'ip_address' => :'ipAddress',
        :'account_id' => :'accountId',
        :'main_user_email' => :'mainUserEmail',
        :'main_user_id' => :'mainUserId',
        :'location' => :'location',
        :'test_time_limit' => :'testTimeLimit',
        :'locked' => :'locked',
        :'os_type' => :'osType',
        :'platform' => :'platform',
        :'dedication_end_time' => :'dedicationEndTime',
        :'comment' => :'comment'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'self_uri' => :'Object',
        :'cluster' => :'Object',
        :'device_model_id' => :'Object',
        :'device_model_name' => :'Object',
        :'enabled' => :'Object',
        :'fingerprint' => :'Object',
        :'init_step' => :'Object',
        :'manufacturer' => :'Object',
        :'name' => :'Object',
        :'serial_id' => :'Object',
        :'software_version' => :'Object',
        :'state' => :'Object',
        :'state_time' => :'Object',
        :'state_change_time' => :'Object',
        :'last_online_time' => :'Object',
        :'unlock_gesture' => :'Object',
        :'ip_address' => :'Object',
        :'account_id' => :'Object',
        :'main_user_email' => :'Object',
        :'main_user_id' => :'Object',
        :'location' => :'Object',
        :'test_time_limit' => :'Object',
        :'locked' => :'Object',
        :'os_type' => :'Object',
        :'platform' => :'Object',
        :'dedication_end_time' => :'Object',
        :'comment' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BitbarCloudApiClient::APIAdminDevice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BitbarCloudApiClient::APIAdminDevice`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'self_uri')
        self.self_uri = attributes[:'self_uri']
      end

      if attributes.key?(:'cluster')
        self.cluster = attributes[:'cluster']
      end

      if attributes.key?(:'device_model_id')
        self.device_model_id = attributes[:'device_model_id']
      end

      if attributes.key?(:'device_model_name')
        self.device_model_name = attributes[:'device_model_name']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'fingerprint')
        self.fingerprint = attributes[:'fingerprint']
      end

      if attributes.key?(:'init_step')
        self.init_step = attributes[:'init_step']
      end

      if attributes.key?(:'manufacturer')
        self.manufacturer = attributes[:'manufacturer']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'serial_id')
        self.serial_id = attributes[:'serial_id']
      end

      if attributes.key?(:'software_version')
        self.software_version = attributes[:'software_version']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'state_time')
        self.state_time = attributes[:'state_time']
      end

      if attributes.key?(:'state_change_time')
        self.state_change_time = attributes[:'state_change_time']
      end

      if attributes.key?(:'last_online_time')
        self.last_online_time = attributes[:'last_online_time']
      end

      if attributes.key?(:'unlock_gesture')
        self.unlock_gesture = attributes[:'unlock_gesture']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'main_user_email')
        self.main_user_email = attributes[:'main_user_email']
      end

      if attributes.key?(:'main_user_id')
        self.main_user_id = attributes[:'main_user_id']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'test_time_limit')
        self.test_time_limit = attributes[:'test_time_limit']
      end

      if attributes.key?(:'locked')
        self.locked = attributes[:'locked']
      end

      if attributes.key?(:'os_type')
        self.os_type = attributes[:'os_type']
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'dedication_end_time')
        self.dedication_end_time = attributes[:'dedication_end_time']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      init_step_validator = EnumAttributeValidator.new('Object', ['SKIP', 'REBOOT', 'REBOOT_WITH_UNLOCK', 'UNLOCK_ONLY'])
      return false unless init_step_validator.valid?(@init_step)
      state_validator = EnumAttributeValidator.new('Object', ['OFFLINE_CLEANING', 'OFFLINE_DIRTY', 'OFFLINE_FREE', 'OFFLINE_TESTING', 'ONLINE_CLEANING', 'ONLINE_DIRTY', 'ONLINE_FREE', 'ONLINE_TESTING'])
      return false unless state_validator.valid?(@state)
      os_type_validator = EnumAttributeValidator.new('Object', ['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'])
      return false unless os_type_validator.valid?(@os_type)
      platform_validator = EnumAttributeValidator.new('Object', ['IOS', 'ANDROID', 'WINDOWS', 'MAC', 'LINUX', 'UNDEFINED'])
      return false unless platform_validator.valid?(@platform)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] init_step Object to be assigned
    def init_step=(init_step)
      validator = EnumAttributeValidator.new('Object', ['SKIP', 'REBOOT', 'REBOOT_WITH_UNLOCK', 'UNLOCK_ONLY'])
      unless validator.valid?(init_step)
        fail ArgumentError, "invalid value for \"init_step\", must be one of #{validator.allowable_values}."
      end
      @init_step = init_step
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('Object', ['OFFLINE_CLEANING', 'OFFLINE_DIRTY', 'OFFLINE_FREE', 'OFFLINE_TESTING', 'ONLINE_CLEANING', 'ONLINE_DIRTY', 'ONLINE_FREE', 'ONLINE_TESTING'])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_type Object to be assigned
    def os_type=(os_type)
      validator = EnumAttributeValidator.new('Object', ['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'])
      unless validator.valid?(os_type)
        fail ArgumentError, "invalid value for \"os_type\", must be one of #{validator.allowable_values}."
      end
      @os_type = os_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] platform Object to be assigned
    def platform=(platform)
      validator = EnumAttributeValidator.new('Object', ['IOS', 'ANDROID', 'WINDOWS', 'MAC', 'LINUX', 'UNDEFINED'])
      unless validator.valid?(platform)
        fail ArgumentError, "invalid value for \"platform\", must be one of #{validator.allowable_values}."
      end
      @platform = platform
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          self_uri == o.self_uri &&
          cluster == o.cluster &&
          device_model_id == o.device_model_id &&
          device_model_name == o.device_model_name &&
          enabled == o.enabled &&
          fingerprint == o.fingerprint &&
          init_step == o.init_step &&
          manufacturer == o.manufacturer &&
          name == o.name &&
          serial_id == o.serial_id &&
          software_version == o.software_version &&
          state == o.state &&
          state_time == o.state_time &&
          state_change_time == o.state_change_time &&
          last_online_time == o.last_online_time &&
          unlock_gesture == o.unlock_gesture &&
          ip_address == o.ip_address &&
          account_id == o.account_id &&
          main_user_email == o.main_user_email &&
          main_user_id == o.main_user_id &&
          location == o.location &&
          test_time_limit == o.test_time_limit &&
          locked == o.locked &&
          os_type == o.os_type &&
          platform == o.platform &&
          dedication_end_time == o.dedication_end_time &&
          comment == o.comment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, self_uri, cluster, device_model_id, device_model_name, enabled, fingerprint, init_step, manufacturer, name, serial_id, software_version, state, state_time, state_change_time, last_online_time, unlock_gesture, ip_address, account_id, main_user_email, main_user_id, location, test_time_limit, locked, os_type, platform, dedication_end_time, comment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BitbarCloudApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
