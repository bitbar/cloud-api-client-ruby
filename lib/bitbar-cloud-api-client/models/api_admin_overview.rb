=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

require 'date'

module BitbarCloudApiClient
  class APIAdminOverview
    attr_accessor :id

    attr_accessor :self_uri

    attr_accessor :active_users_count

    attr_accessor :offline_cluster_count

    attr_accessor :offline_device_count

    attr_accessor :offline_device_model_count

    attr_accessor :running_inspector_sessions_count

    attr_accessor :running_test_runs_count

    attr_accessor :total_cluster_count

    attr_accessor :total_device_count

    attr_accessor :total_device_model_count

    attr_accessor :total_inspector_sessions_count

    attr_accessor :total_test_run_count

    attr_accessor :total_user_count

    attr_accessor :waiting_test_runs_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'self_uri' => :'selfURI',
        :'active_users_count' => :'activeUsersCount',
        :'offline_cluster_count' => :'offlineClusterCount',
        :'offline_device_count' => :'offlineDeviceCount',
        :'offline_device_model_count' => :'offlineDeviceModelCount',
        :'running_inspector_sessions_count' => :'runningInspectorSessionsCount',
        :'running_test_runs_count' => :'runningTestRunsCount',
        :'total_cluster_count' => :'totalClusterCount',
        :'total_device_count' => :'totalDeviceCount',
        :'total_device_model_count' => :'totalDeviceModelCount',
        :'total_inspector_sessions_count' => :'totalInspectorSessionsCount',
        :'total_test_run_count' => :'totalTestRunCount',
        :'total_user_count' => :'totalUserCount',
        :'waiting_test_runs_count' => :'waitingTestRunsCount'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'self_uri' => :'Object',
        :'active_users_count' => :'Object',
        :'offline_cluster_count' => :'Object',
        :'offline_device_count' => :'Object',
        :'offline_device_model_count' => :'Object',
        :'running_inspector_sessions_count' => :'Object',
        :'running_test_runs_count' => :'Object',
        :'total_cluster_count' => :'Object',
        :'total_device_count' => :'Object',
        :'total_device_model_count' => :'Object',
        :'total_inspector_sessions_count' => :'Object',
        :'total_test_run_count' => :'Object',
        :'total_user_count' => :'Object',
        :'waiting_test_runs_count' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BitbarCloudApiClient::APIAdminOverview` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BitbarCloudApiClient::APIAdminOverview`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'self_uri')
        self.self_uri = attributes[:'self_uri']
      end

      if attributes.key?(:'active_users_count')
        self.active_users_count = attributes[:'active_users_count']
      end

      if attributes.key?(:'offline_cluster_count')
        self.offline_cluster_count = attributes[:'offline_cluster_count']
      end

      if attributes.key?(:'offline_device_count')
        self.offline_device_count = attributes[:'offline_device_count']
      end

      if attributes.key?(:'offline_device_model_count')
        self.offline_device_model_count = attributes[:'offline_device_model_count']
      end

      if attributes.key?(:'running_inspector_sessions_count')
        self.running_inspector_sessions_count = attributes[:'running_inspector_sessions_count']
      end

      if attributes.key?(:'running_test_runs_count')
        self.running_test_runs_count = attributes[:'running_test_runs_count']
      end

      if attributes.key?(:'total_cluster_count')
        self.total_cluster_count = attributes[:'total_cluster_count']
      end

      if attributes.key?(:'total_device_count')
        self.total_device_count = attributes[:'total_device_count']
      end

      if attributes.key?(:'total_device_model_count')
        self.total_device_model_count = attributes[:'total_device_model_count']
      end

      if attributes.key?(:'total_inspector_sessions_count')
        self.total_inspector_sessions_count = attributes[:'total_inspector_sessions_count']
      end

      if attributes.key?(:'total_test_run_count')
        self.total_test_run_count = attributes[:'total_test_run_count']
      end

      if attributes.key?(:'total_user_count')
        self.total_user_count = attributes[:'total_user_count']
      end

      if attributes.key?(:'waiting_test_runs_count')
        self.waiting_test_runs_count = attributes[:'waiting_test_runs_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          self_uri == o.self_uri &&
          active_users_count == o.active_users_count &&
          offline_cluster_count == o.offline_cluster_count &&
          offline_device_count == o.offline_device_count &&
          offline_device_model_count == o.offline_device_model_count &&
          running_inspector_sessions_count == o.running_inspector_sessions_count &&
          running_test_runs_count == o.running_test_runs_count &&
          total_cluster_count == o.total_cluster_count &&
          total_device_count == o.total_device_count &&
          total_device_model_count == o.total_device_model_count &&
          total_inspector_sessions_count == o.total_inspector_sessions_count &&
          total_test_run_count == o.total_test_run_count &&
          total_user_count == o.total_user_count &&
          waiting_test_runs_count == o.waiting_test_runs_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, self_uri, active_users_count, offline_cluster_count, offline_device_count, offline_device_model_count, running_inspector_sessions_count, running_test_runs_count, total_cluster_count, total_device_count, total_device_model_count, total_inspector_sessions_count, total_test_run_count, total_user_count, waiting_test_runs_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BitbarCloudApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
