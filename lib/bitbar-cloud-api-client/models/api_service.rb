=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

require 'date'

module BitbarCloudApiClient
  class APIService
    attr_accessor :id

    attr_accessor :self_uri

    attr_accessor :auto_renew

    attr_accessor :external_id

    attr_accessor :common_id

    attr_accessor :cent_price

    attr_accessor :included_hours

    attr_accessor :price_per_hour

    attr_accessor :description

    attr_accessor :features

    attr_accessor :name

    attr_accessor :archive_time

    attr_accessor :activate_time

    attr_accessor :activated

    attr_accessor :custom_plan

    attr_accessor :charge_type

    attr_accessor :roles

    attr_accessor :unit

    attr_accessor :default_concurrences

    attr_accessor :price_string

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'self_uri' => :'selfURI',
        :'auto_renew' => :'autoRenew',
        :'external_id' => :'externalId',
        :'common_id' => :'commonId',
        :'cent_price' => :'centPrice',
        :'included_hours' => :'includedHours',
        :'price_per_hour' => :'pricePerHour',
        :'description' => :'description',
        :'features' => :'features',
        :'name' => :'name',
        :'archive_time' => :'archiveTime',
        :'activate_time' => :'activateTime',
        :'activated' => :'activated',
        :'custom_plan' => :'customPlan',
        :'charge_type' => :'chargeType',
        :'roles' => :'roles',
        :'unit' => :'unit',
        :'default_concurrences' => :'defaultConcurrences',
        :'price_string' => :'priceString'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'self_uri' => :'Object',
        :'auto_renew' => :'Object',
        :'external_id' => :'Object',
        :'common_id' => :'Object',
        :'cent_price' => :'Object',
        :'included_hours' => :'Object',
        :'price_per_hour' => :'Object',
        :'description' => :'Object',
        :'features' => :'Object',
        :'name' => :'Object',
        :'archive_time' => :'Object',
        :'activate_time' => :'Object',
        :'activated' => :'Object',
        :'custom_plan' => :'Object',
        :'charge_type' => :'Object',
        :'roles' => :'Object',
        :'unit' => :'Object',
        :'default_concurrences' => :'Object',
        :'price_string' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BitbarCloudApiClient::APIService` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BitbarCloudApiClient::APIService`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'self_uri')
        self.self_uri = attributes[:'self_uri']
      end

      if attributes.key?(:'auto_renew')
        self.auto_renew = attributes[:'auto_renew']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'common_id')
        self.common_id = attributes[:'common_id']
      end

      if attributes.key?(:'cent_price')
        self.cent_price = attributes[:'cent_price']
      end

      if attributes.key?(:'included_hours')
        self.included_hours = attributes[:'included_hours']
      end

      if attributes.key?(:'price_per_hour')
        self.price_per_hour = attributes[:'price_per_hour']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'features')
        self.features = attributes[:'features']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'archive_time')
        self.archive_time = attributes[:'archive_time']
      end

      if attributes.key?(:'activate_time')
        self.activate_time = attributes[:'activate_time']
      end

      if attributes.key?(:'activated')
        self.activated = attributes[:'activated']
      end

      if attributes.key?(:'custom_plan')
        self.custom_plan = attributes[:'custom_plan']
      end

      if attributes.key?(:'charge_type')
        self.charge_type = attributes[:'charge_type']
      end

      if attributes.key?(:'roles')
        if (value = attributes[:'roles']).is_a?(Array)
          self.roles = value
        end
      end

      if attributes.key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.key?(:'default_concurrences')
        if (value = attributes[:'default_concurrences']).is_a?(Array)
          self.default_concurrences = value
        end
      end

      if attributes.key?(:'price_string')
        self.price_string = attributes[:'price_string']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      charge_type_validator = EnumAttributeValidator.new('Object', ['CONCURRENCY', 'USAGE'])
      return false unless charge_type_validator.valid?(@charge_type)
      unit_validator = EnumAttributeValidator.new('Object', ['MONTH', 'DAY', 'YEAR', 'HOUR', 'RUN', 'PROJECT'])
      return false unless unit_validator.valid?(@unit)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge_type Object to be assigned
    def charge_type=(charge_type)
      validator = EnumAttributeValidator.new('Object', ['CONCURRENCY', 'USAGE'])
      unless validator.valid?(charge_type)
        fail ArgumentError, "invalid value for \"charge_type\", must be one of #{validator.allowable_values}."
      end
      @charge_type = charge_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit Object to be assigned
    def unit=(unit)
      validator = EnumAttributeValidator.new('Object', ['MONTH', 'DAY', 'YEAR', 'HOUR', 'RUN', 'PROJECT'])
      unless validator.valid?(unit)
        fail ArgumentError, "invalid value for \"unit\", must be one of #{validator.allowable_values}."
      end
      @unit = unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          self_uri == o.self_uri &&
          auto_renew == o.auto_renew &&
          external_id == o.external_id &&
          common_id == o.common_id &&
          cent_price == o.cent_price &&
          included_hours == o.included_hours &&
          price_per_hour == o.price_per_hour &&
          description == o.description &&
          features == o.features &&
          name == o.name &&
          archive_time == o.archive_time &&
          activate_time == o.activate_time &&
          activated == o.activated &&
          custom_plan == o.custom_plan &&
          charge_type == o.charge_type &&
          roles == o.roles &&
          unit == o.unit &&
          default_concurrences == o.default_concurrences &&
          price_string == o.price_string
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, self_uri, auto_renew, external_id, common_id, cent_price, included_hours, price_per_hour, description, features, name, archive_time, activate_time, activated, custom_plan, charge_type, roles, unit, default_concurrences, price_string].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BitbarCloudApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
