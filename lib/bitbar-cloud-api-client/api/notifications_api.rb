=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

module BitbarCloudApiClient
  class NotificationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create notification.
    # @param user_id
    # @param destination
    # @param channel
    # @param scope
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [APINotification]
    def create_user_notification(user_id, destination, channel, scope, opts = {})
      data, _status_code, _headers = create_user_notification_with_http_info(user_id, destination, channel, scope, opts)
      data
    end

    # Create notification.
    # @param user_id
    # @param destination
    # @param channel
    # @param scope
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [Array<(APINotification, Integer, Hash)>] APINotification data, response status code and response headers
    def create_user_notification_with_http_info(user_id, destination, channel, scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.create_user_notification ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling NotificationsApi.create_user_notification"
      end
      # verify the required parameter 'destination' is set
      if @api_client.config.client_side_validation && destination.nil?
        fail ArgumentError, "Missing the required parameter 'destination' when calling NotificationsApi.create_user_notification"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling NotificationsApi.create_user_notification"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['SLACK', 'EMAIL', 'WEBHOOK'].include?(channel)
        fail ArgumentError, "invalid value for 'channel', must be one of SLACK, EMAIL, WEBHOOK"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling NotificationsApi.create_user_notification"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ALL', 'TEST_RUN', 'TEST_RUN_FAILURE', 'TEST_RUN_SUCCEEDED', 'MAINTENANCE', 'MAINTENANCE_RELEASE', 'CUSTOM', 'NEWS', 'SYSTEM', 'CHECK', 'PLAN_LIMIT_REACHED', 'PLAN_INVOICE'].include?(scope)
        fail ArgumentError, "invalid value for 'scope', must be one of ALL, TEST_RUN, TEST_RUN_FAILURE, TEST_RUN_SUCCEEDED, MAINTENANCE, MAINTENANCE_RELEASE, CUSTOM, NEWS, SYSTEM, CHECK, PLAN_LIMIT_REACHED, PLAN_INVOICE"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'destination'] = destination
      query_params[:'channel'] = channel
      query_params[:'scope'] = scope
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APINotification'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#create_user_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_notification_email(user_id, id, opts = {})
      delete_user_notification_email_with_http_info(user_id, id, opts)
      nil
    end

    # Delete notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_notification_email_with_http_info(user_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.delete_user_notification_email ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling NotificationsApi.delete_user_notification_email"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationsApi.delete_user_notification_email"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications/{id}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#delete_user_notification_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification channels.
    # @param [Hash] opts the optional parameters
    # @return [APIListAPIEnum]
    def get_channels(opts = {})
      data, _status_code, _headers = get_channels_with_http_info(opts)
      data
    end

    # Get notification channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPIEnum, Integer, Hash)>] APIListAPIEnum data, response status code and response headers
    def get_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.get_channels ...'
      end
      # resource path
      local_var_path = '/api/v2/users/*/notifications/channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIEnum'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification scopes.
    # @param [Hash] opts the optional parameters
    # @return [APIListAPIEnum]
    def get_scopes(opts = {})
      data, _status_code, _headers = get_scopes_with_http_info(opts)
      data
    end

    # Get notification scopes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPIEnum, Integer, Hash)>] APIListAPIEnum data, response status code and response headers
    def get_scopes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.get_scopes ...'
      end
      # resource path
      local_var_path = '/api/v2/users/*/notifications/scopes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIEnum'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_scopes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APINotification]
    def get_user_notification(user_id, id, opts = {})
      data, _status_code, _headers = get_user_notification_with_http_info(user_id, id, opts)
      data
    end

    # Get notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APINotification, Integer, Hash)>] APINotification data, response status code and response headers
    def get_user_notification_with_http_info(user_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.get_user_notification ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling NotificationsApi.get_user_notification"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationsApi.get_user_notification"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications/{id}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APINotification'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_user_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notifications.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_all&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPINotification]
    def get_user_notifications(user_id, opts = {})
      data, _status_code, _headers = get_user_notifications_with_http_info(user_id, opts)
      data
    end

    # Get notifications.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_all&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPINotification, Integer, Hash)>] APIListAPINotification data, response status code and response headers
    def get_user_notifications_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.get_user_notifications ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling NotificationsApi.get_user_notifications"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPINotification'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_user_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIMessage]
    def test_user_notification(user_id, id, opts = {})
      data, _status_code, _headers = test_user_notification_with_http_info(user_id, id, opts)
      data
    end

    # Test notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIMessage, Integer, Hash)>] APIMessage data, response status code and response headers
    def test_user_notification_with_http_info(user_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.test_user_notification ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling NotificationsApi.test_user_notification"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationsApi.test_user_notification"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications/{id}/test'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIMessage'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#test_user_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :destination
    # @option opts [String] :scope
    # @return [APINotification]
    def update_user_notification(user_id, id, opts = {})
      data, _status_code, _headers = update_user_notification_with_http_info(user_id, id, opts)
      data
    end

    # Update notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :destination
    # @option opts [String] :scope
    # @return [Array<(APINotification, Integer, Hash)>] APINotification data, response status code and response headers
    def update_user_notification_with_http_info(user_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.update_user_notification ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling NotificationsApi.update_user_notification"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationsApi.update_user_notification"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['ALL', 'TEST_RUN', 'TEST_RUN_FAILURE', 'TEST_RUN_SUCCEEDED', 'MAINTENANCE', 'MAINTENANCE_RELEASE', 'CUSTOM', 'NEWS', 'SYSTEM', 'CHECK', 'PLAN_LIMIT_REACHED', 'PLAN_INVOICE'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of ALL, TEST_RUN, TEST_RUN_FAILURE, TEST_RUN_SUCCEEDED, MAINTENANCE, MAINTENANCE_RELEASE, CUSTOM, NEWS, SYSTEM, CHECK, PLAN_LIMIT_REACHED, PLAN_INVOICE'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications/{id}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'destination'] = opts[:'destination'] if !opts[:'destination'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APINotification'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#update_user_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
