=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

module BitbarCloudApiClient
  class SharingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add user to access group.
    # @param user_id
    # @param access_group_id
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def add_user(user_id, access_group_id, email, opts = {})
      data, _status_code, _headers = add_user_with_http_info(user_id, access_group_id, email, opts)
      data
    end

    # Add user to access group.
    # @param user_id
    # @param access_group_id
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def add_user_with_http_info(user_id, access_group_id, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.add_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.add_user"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.add_user"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling SharingApi.add_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#add_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create access group.
    # @param user_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope  (default to USER)
    # @return [APIAccessGroup]
    def create(user_id, name, opts = {})
      data, _status_code, _headers = create_with_http_info(user_id, name, opts)
      data
    end

    # Create access group.
    # @param user_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope
    # @return [Array<(APIAccessGroup, Integer, Hash)>] APIAccessGroup data, response status code and response headers
    def create_with_http_info(user_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.create ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.create"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling SharingApi.create"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete1(user_id, access_group_id, opts = {})
      delete1_with_http_info(user_id, access_group_id, opts)
      nil
    end

    # Delete access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete1_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.delete1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.delete1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.delete1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#delete1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group resource.
    # @param user_id
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource(user_id, access_group_id, resource_id, opts = {})
      delete_resource_with_http_info(user_id, access_group_id, resource_id, opts)
      nil
    end

    # Delete access group resource.
    # @param user_id
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_resource_with_http_info(user_id, access_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.delete_resource ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.delete_resource"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.delete_resource"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling SharingApi.delete_resource"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#delete_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group user.
    # @param user_id
    # @param access_group_id
    # @param participant_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user1(user_id, access_group_id, participant_id, opts = {})
      delete_user1_with_http_info(user_id, access_group_id, participant_id, opts)
      nil
    end

    # Delete access group user.
    # @param user_id
    # @param access_group_id
    # @param participant_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user1_with_http_info(user_id, access_group_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.delete_user1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.delete_user1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.delete_user1"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling SharingApi.delete_user1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users/{participantId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#delete_user1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccessGroup]
    def get1(user_id, access_group_id, opts = {})
      data, _status_code, _headers = get1_with_http_info(user_id, access_group_id, opts)
      data
    end

    # Get access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccessGroup, Integer, Hash)>] APIAccessGroup data, response status code and response headers
    def get1_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access groups.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAccessGroup]
    def get_list(user_id, opts = {})
      data, _status_code, _headers = get_list_with_http_info(user_id, opts)
      data
    end

    # Get access groups.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAccessGroup, Integer, Hash)>] APIListAPIAccessGroup data, response status code and response headers
    def get_list_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_list ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_list"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resource.
    # @param user_id
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [APISharedResource]
    def get_resource(user_id, access_group_id, resource_id, opts = {})
      data, _status_code, _headers = get_resource_with_http_info(user_id, access_group_id, resource_id, opts)
      data
    end

    # Get access group resource.
    # @param user_id
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APISharedResource, Integer, Hash)>] APISharedResource data, response status code and response headers
    def get_resource_with_http_info(user_id, access_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_resource ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_resource"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get_resource"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling SharingApi.get_resource"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resources.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPISharedResource]
    def get_resources(user_id, access_group_id, opts = {})
      data, _status_code, _headers = get_resources_with_http_info(user_id, access_group_id, opts)
      data
    end

    # Get access group resources.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def get_resources_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_resources ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_resources"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get_resources"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/resources'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group user.
    # @param user_id
    # @param access_group_id
    # @param participant_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def get_user1(user_id, access_group_id, participant_id, opts = {})
      data, _status_code, _headers = get_user1_with_http_info(user_id, access_group_id, participant_id, opts)
      data
    end

    # Get access group user.
    # @param user_id
    # @param access_group_id
    # @param participant_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def get_user1_with_http_info(user_id, access_group_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_user1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_user1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get_user1"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling SharingApi.get_user1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users/{participantId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_user1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group users.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUser]
    def get_users1(user_id, access_group_id, opts = {})
      data, _status_code, _headers = get_users1_with_http_info(user_id, access_group_id, opts)
      data
    end

    # Get access group users.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUser, Integer, Hash)>] APIListAPIUser data, response status code and response headers
    def get_users1_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.get_users1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.get_users1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.get_users1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#get_users1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [APIListAPISharedResource]
    def share_device_group(user_id, device_group_id, opts = {})
      data, _status_code, _headers = share_device_group_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Share device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def share_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.share_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.share_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling SharingApi.share_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/share'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#share_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [APIListAPISharedResource]
    def share_file(user_id, file_id, opts = {})
      data, _status_code, _headers = share_file_with_http_info(user_id, file_id, opts)
      data
    end

    # Share file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def share_file_with_http_info(user_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.share_file ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.share_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling SharingApi.share_file"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}/share'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#share_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [APIListAPISharedResource]
    def share_project(user_id, project_id, opts = {})
      data, _status_code, _headers = share_project_with_http_info(user_id, project_id, opts)
      data
    end

    # Share project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def share_project_with_http_info(user_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.share_project ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.share_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling SharingApi.share_project"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/share'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#share_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope
    # @option opts [String] :name
    # @return [APIAccessGroup]
    def update(user_id, access_group_id, opts = {})
      data, _status_code, _headers = update_with_http_info(user_id, access_group_id, opts)
      data
    end

    # Update access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope
    # @option opts [String] :name
    # @return [Array<(APIAccessGroup, Integer, Hash)>] APIAccessGroup data, response status code and response headers
    def update_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SharingApi.update ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SharingApi.update"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling SharingApi.update"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SharingApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
