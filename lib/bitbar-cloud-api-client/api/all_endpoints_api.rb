=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

module BitbarCloudApiClient
  class AllEndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Abort device session.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def abort_device_session(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = abort_device_session_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Abort device session.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def abort_device_session_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.abort_device_session ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.abort_device_session"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.abort_device_session"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.abort_device_session"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.abort_device_session"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/abort'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#abort_device_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Abort device session.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def abort_device_session1(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = abort_device_session1_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Abort device session.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def abort_device_session1_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.abort_device_session1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.abort_device_session1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.abort_device_session1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.abort_device_session1"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/abort'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#abort_device_session1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Abort test run and receive partial results.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def abort_project_test_run(project_id, run_id, opts = {})
      data, _status_code, _headers = abort_project_test_run_with_http_info(project_id, run_id, opts)
      data
    end

    # Abort test run and receive partial results.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def abort_project_test_run_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.abort_project_test_run ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.abort_project_test_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.abort_project_test_run"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/abort'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#abort_project_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Abort test run and receive partial results.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [APITestRun]
    def abort_test_run(run_id, opts = {})
      data, _status_code, _headers = abort_test_run_with_http_info(run_id, opts)
      data
    end

    # Abort test run and receive partial results.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def abort_test_run_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.abort_test_run ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.abort_test_run"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/abort'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#abort_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Abort test run and receive partial results.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APIAdminTestRun]
    def abort_test_run1(run_id, opts = {})
      data, _status_code, _headers = abort_test_run1_with_http_info(run_id, opts)
      data
    end

    # Abort test run and receive partial results.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminTestRun, Integer, Hash)>] APIAdminTestRun data, response status code and response headers
    def abort_test_run1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.abort_test_run1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.abort_test_run1"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}/abort'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminTestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#abort_test_run1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Abort test run and receive partial results.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def abort_user_test_run(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = abort_user_test_run_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Abort test run and receive partial results.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def abort_user_test_run_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.abort_user_test_run ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.abort_user_test_run"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.abort_user_test_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.abort_user_test_run"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/abort'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#abort_user_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate user after registration.
    # @param email
    # @param key
    # @param password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :first_name
    # @option opts [String] :last_name
    # @option opts [String] :phone
    # @option opts [String] :organization
    # @option opts [String] :country
    # @option opts [String] :city
    # @option opts [String] :state
    # @option opts [String] :address
    # @option opts [String] :zip
    # @return [APIUser]
    def activate(email, key, password, opts = {})
      data, _status_code, _headers = activate_with_http_info(email, key, password, opts)
      data
    end

    # Activate user after registration.
    # @param email
    # @param key
    # @param password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :first_name
    # @option opts [String] :last_name
    # @option opts [String] :phone
    # @option opts [String] :organization
    # @option opts [String] :country
    # @option opts [String] :city
    # @option opts [String] :state
    # @option opts [String] :address
    # @option opts [String] :zip
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def activate_with_http_info(email, key, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.activate ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AllEndpointsApi.activate"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AllEndpointsApi.activate"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling AllEndpointsApi.activate"
      end
      # resource path
      local_var_path = '/api/v2/users/activate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email
      query_params[:'key'] = key
      query_params[:'password'] = password
      query_params[:'firstName'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'lastName'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'phone'] = opts[:'phone'] if !opts[:'phone'].nil?
      query_params[:'organization'] = opts[:'organization'] if !opts[:'organization'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'zip'] = opts[:'zip'] if !opts[:'zip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#activate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def activate_license(id, opts = {})
      data, _status_code, _headers = activate_license_with_http_info(id, opts)
      data
    end

    # Activate license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Integer, Hash)>] APILicense data, response status code and response headers
    def activate_license_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.activate_license ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.activate_license"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}/activate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APILicense'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#activate_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate service.
    # @param service_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activate_time
    # @return [APIService]
    def activate_service(service_id, opts = {})
      data, _status_code, _headers = activate_service_with_http_info(service_id, opts)
      data
    end

    # Activate service.
    # @param service_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :activate_time
    # @return [Array<(APIService, Integer, Hash)>] APIService data, response status code and response headers
    def activate_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.activate_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AllEndpointsApi.activate_service"
      end
      # resource path
      local_var_path = '/api/v2/admin/services/{serviceId}/activate'.sub('{' + 'serviceId' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'activateTime'] = opts[:'activate_time'] if !opts[:'activate_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#activate_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate account service.
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccountService]
    def activate_user_service(account_service_id, opts = {})
      data, _status_code, _headers = activate_user_service_with_http_info(account_service_id, opts)
      data
    end

    # Activate account service.
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountService, Integer, Hash)>] APIAccountService data, response status code and response headers
    def activate_user_service_with_http_info(account_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.activate_user_service ...'
      end
      # verify the required parameter 'account_service_id' is set
      if @api_client.config.client_side_validation && account_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_service_id' when calling AllEndpointsApi.activate_user_service"
      end
      # resource path
      local_var_path = '/api/v2/admin/account-services/{accountServiceId}/activate'.sub('{' + 'accountServiceId' + '}', account_service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccountService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#activate_user_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add additional user.
    # @param user_id
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def add_additional_user(user_id, email, opts = {})
      data, _status_code, _headers = add_additional_user_with_http_info(user_id, email, opts)
      data
    end

    # Add additional user.
    # @param user_id
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def add_additional_user_with_http_info(user_id, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_additional_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.add_additional_user"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AllEndpointsApi.add_additional_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account/additional-users'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_additional_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add device specific cleanup configuration.
    # @param device_id
    # @param device_cleanup_configuration_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceCleanupConfiguration]
    def add_device_cleanup_configuration(device_id, device_cleanup_configuration_id, opts = {})
      data, _status_code, _headers = add_device_cleanup_configuration_with_http_info(device_id, device_cleanup_configuration_id, opts)
      data
    end

    # Add device specific cleanup configuration.
    # @param device_id
    # @param device_cleanup_configuration_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceCleanupConfiguration, Integer, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def add_device_cleanup_configuration_with_http_info(device_id, device_cleanup_configuration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_device_cleanup_configuration ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.add_device_cleanup_configuration"
      end
      # verify the required parameter 'device_cleanup_configuration_id' is set
      if @api_client.config.client_side_validation && device_cleanup_configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_cleanup_configuration_id' when calling AllEndpointsApi.add_device_cleanup_configuration"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/cleanup-configuration'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceCleanupConfigurationId'] = device_cleanup_configuration_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceCleanupConfiguration'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_device_cleanup_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add label to device.
    # @param device_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceProperty]
    def add_device_label(device_id, label_id, opts = {})
      data, _status_code, _headers = add_device_label_with_http_info(device_id, label_id, opts)
      data
    end

    # Add label to device.
    # @param device_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceProperty, Integer, Hash)>] APIDeviceProperty data, response status code and response headers
    def add_device_label_with_http_info(device_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_device_label ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.add_device_label"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AllEndpointsApi.add_device_label"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/labels'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'labelId'] = label_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_device_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add label to device.
    # @param device_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceProperty]
    def add_device_label1(device_id, label_id, opts = {})
      data, _status_code, _headers = add_device_label1_with_http_info(device_id, label_id, opts)
      data
    end

    # Add label to device.
    # @param device_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceProperty, Integer, Hash)>] APIDeviceProperty data, response status code and response headers
    def add_device_label1_with_http_info(device_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_device_label1 ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.add_device_label1"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AllEndpointsApi.add_device_label1"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/properties'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'labelId'] = label_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_device_label1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create device model criterion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :field
    # @option opts [Integer] :label_group_id
    # @return [APIMessage]
    def add_device_model_criteria(opts = {})
      data, _status_code, _headers = add_device_model_criteria_with_http_info(opts)
      data
    end

    # Create device model criterion.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :field
    # @option opts [Integer] :label_group_id
    # @return [Array<(APIMessage, Integer, Hash)>] APIMessage data, response status code and response headers
    def add_device_model_criteria_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_device_model_criteria ...'
      end
      if @api_client.config.client_side_validation && opts[:'field'] && !['NAME', 'FINGERPRINT', 'SERIAL_ID', 'UNLOCK_GESTURE', 'SOFTWARE_VERSION', 'INIT_STEP', 'ACCOUNT', 'BROWSERS'].include?(opts[:'field'])
        fail ArgumentError, 'invalid value for "field", must be one of NAME, FINGERPRINT, SERIAL_ID, UNLOCK_GESTURE, SOFTWARE_VERSION, INIT_STEP, ACCOUNT, BROWSERS'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-model-criteria'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'field'] = opts[:'field'] if !opts[:'field'].nil?
      query_params[:'labelGroupId'] = opts[:'label_group_id'] if !opts[:'label_group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIMessage'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_device_model_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add file to device session.
    # @param name
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody4] :body
    # @option opts [String] :tag
    # @return [APIUserFile]
    def add_device_session_output_file(name, device_session_id, opts = {})
      data, _status_code, _headers = add_device_session_output_file_with_http_info(name, device_session_id, opts)
      data
    end

    # Add file to device session.
    # @param name
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody4] :body
    # @option opts [String] :tag
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def add_device_session_output_file_with_http_info(name, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_device_session_output_file ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.add_device_session_output_file"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.add_device_session_output_file"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_device_session_output_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add device to device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_id
    # @option opts [Array<Integer>] :device_ids
    # @return [APIDeviceGroup]
    def add_device_to_device_group(user_id, device_group_id, opts = {})
      data, _status_code, _headers = add_device_to_device_group_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Add device to device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_id
    # @option opts [Array<Integer>] :device_ids
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def add_device_to_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_device_to_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.add_device_to_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.add_device_to_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/devices'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceId'] = @api_client.build_collection_param(opts[:'device_id'], :multi) if !opts[:'device_id'].nil?
      query_params[:'deviceIds[]'] = @api_client.build_collection_param(opts[:'device_ids'], :multi) if !opts[:'device_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_device_to_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add device to device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_id
    # @option opts [Array<Integer>] :device_ids
    # @return [APIDeviceGroup]
    def add_device_to_device_group1(device_group_id, opts = {})
      data, _status_code, _headers = add_device_to_device_group1_with_http_info(device_group_id, opts)
      data
    end

    # Add device to device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_id
    # @option opts [Array<Integer>] :device_ids
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def add_device_to_device_group1_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_device_to_device_group1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.add_device_to_device_group1"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/devices'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceId'] = @api_client.build_collection_param(opts[:'device_id'], :multi) if !opts[:'device_id'].nil?
      query_params[:'deviceIds[]'] = @api_client.build_collection_param(opts[:'device_ids'], :multi) if !opts[:'device_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_device_to_device_group1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add file to device session.
    # @param name
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody] :body
    # @option opts [String] :tag
    # @return [APIUserFile]
    def add_file(name, user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = add_file_with_http_info(name, user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Add file to device session.
    # @param name
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody] :body
    # @option opts [String] :tag
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def add_file_with_http_info(name, user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_file ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.add_file"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.add_file"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.add_file"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.add_file"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.add_file"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add file to device session.
    # @param name
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody1] :body
    # @option opts [String] :tag
    # @return [APIUserFile]
    def add_file1(name, user_id, device_session_id, opts = {})
      data, _status_code, _headers = add_file1_with_http_info(name, user_id, device_session_id, opts)
      data
    end

    # Add file to device session.
    # @param name
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody1] :body
    # @option opts [String] :tag
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def add_file1_with_http_info(name, user_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_file1 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.add_file1"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.add_file1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.add_file1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_file1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add file to device session.
    # @param name
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody2] :body
    # @option opts [String] :tag
    # @return [APIUserFile]
    def add_file2(name, run_id, device_session_id, opts = {})
      data, _status_code, _headers = add_file2_with_http_info(name, run_id, device_session_id, opts)
      data
    end

    # Add file to device session.
    # @param name
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody2] :body
    # @option opts [String] :tag
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def add_file2_with_http_info(name, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_file2 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.add_file2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.add_file2"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.add_file2"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_file2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add file to device session.
    # @param name
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody3] :body
    # @option opts [String] :tag
    # @return [APIUserFile]
    def add_file3(name, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = add_file3_with_http_info(name, project_id, run_id, device_session_id, opts)
      data
    end

    # Add file to device session.
    # @param name
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [OutputfilesetFilesBody3] :body
    # @option opts [String] :tag
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def add_file3_with_http_info(name, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_file3 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.add_file3"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.add_file3"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.add_file3"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.add_file3"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_file3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add tag to test run.
    # @param project_id
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @return [APITag]
    def add_project_test_run_tag(project_id, run_id, name, opts = {})
      data, _status_code, _headers = add_project_test_run_tag_with_http_info(project_id, run_id, name, opts)
      data
    end

    # Add tag to test run.
    # @param project_id
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITag, Integer, Hash)>] APITag data, response status code and response headers
    def add_project_test_run_tag_with_http_info(project_id, run_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_project_test_run_tag ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.add_project_test_run_tag"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.add_project_test_run_tag"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.add_project_test_run_tag"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/tags'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_project_test_run_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add account role.
    # @param user_id
    # @param role_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :value
    # @option opts [Integer] :expire_time
    # @return [APIRole]
    def add_role_to_account(user_id, role_id, opts = {})
      data, _status_code, _headers = add_role_to_account_with_http_info(user_id, role_id, opts)
      data
    end

    # Add account role.
    # @param user_id
    # @param role_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :value
    # @option opts [Integer] :expire_time
    # @return [Array<(APIRole, Integer, Hash)>] APIRole data, response status code and response headers
    def add_role_to_account_with_http_info(user_id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_role_to_account ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.add_role_to_account"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling AllEndpointsApi.add_role_to_account"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account/roles'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'roleId'] = role_id
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'expireTime'] = opts[:'expire_time'] if !opts[:'expire_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIRole'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_role_to_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add selectors to device group.
    # @param user_id
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIDeviceGroup]
    def add_selector_to_device_group(user_id, device_group_id, selector_ids, opts = {})
      data, _status_code, _headers = add_selector_to_device_group_with_http_info(user_id, device_group_id, selector_ids, opts)
      data
    end

    # Add selectors to device group.
    # @param user_id
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def add_selector_to_device_group_with_http_info(user_id, device_group_id, selector_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_selector_to_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.add_selector_to_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.add_selector_to_device_group"
      end
      # verify the required parameter 'selector_ids' is set
      if @api_client.config.client_side_validation && selector_ids.nil?
        fail ArgumentError, "Missing the required parameter 'selector_ids' when calling AllEndpointsApi.add_selector_to_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/selectors'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'selectorIds[]'] = @api_client.build_collection_param(selector_ids, :multi)
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_selector_to_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add selectors to device group.
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceGroup]
    def add_selector_to_device_group1(device_group_id, selector_ids, opts = {})
      data, _status_code, _headers = add_selector_to_device_group1_with_http_info(device_group_id, selector_ids, opts)
      data
    end

    # Add selectors to device group.
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def add_selector_to_device_group1_with_http_info(device_group_id, selector_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_selector_to_device_group1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.add_selector_to_device_group1"
      end
      # verify the required parameter 'selector_ids' is set
      if @api_client.config.client_side_validation && selector_ids.nil?
        fail ArgumentError, "Missing the required parameter 'selector_ids' when calling AllEndpointsApi.add_selector_to_device_group1"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/selectors'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'selectorIds[]'] = @api_client.build_collection_param(selector_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_selector_to_device_group1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add service to user.
    # @param user_id
    # @param service_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count  (default to 1)
    # @option opts [Integer] :end_time
    # @return [APIAccountService]
    def add_service_to_user(user_id, service_id, opts = {})
      data, _status_code, _headers = add_service_to_user_with_http_info(user_id, service_id, opts)
      data
    end

    # Add service to user.
    # @param user_id
    # @param service_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count
    # @option opts [Integer] :end_time
    # @return [Array<(APIAccountService, Integer, Hash)>] APIAccountService data, response status code and response headers
    def add_service_to_user_with_http_info(user_id, service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_service_to_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.add_service_to_user"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AllEndpointsApi.add_service_to_user"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account-services'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceId'] = service_id
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccountService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_service_to_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add tag to test run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @return [APITag]
    def add_test_run_tag(user_id, project_id, run_id, name, opts = {})
      data, _status_code, _headers = add_test_run_tag_with_http_info(user_id, project_id, run_id, name, opts)
      data
    end

    # Add tag to test run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITag, Integer, Hash)>] APITag data, response status code and response headers
    def add_test_run_tag_with_http_info(user_id, project_id, run_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_test_run_tag ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.add_test_run_tag"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.add_test_run_tag"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.add_test_run_tag"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.add_test_run_tag"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/tags'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_test_run_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add tag to test run.
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [APITag]
    def add_test_run_tag1(run_id, name, opts = {})
      data, _status_code, _headers = add_test_run_tag1_with_http_info(run_id, name, opts)
      data
    end

    # Add tag to test run.
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [Array<(APITag, Integer, Hash)>] APITag data, response status code and response headers
    def add_test_run_tag1_with_http_info(run_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_test_run_tag1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.add_test_run_tag1"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.add_test_run_tag1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/tags'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_test_run_tag1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add user to access group.
    # @param user_id
    # @param access_group_id
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def add_user(user_id, access_group_id, email, opts = {})
      data, _status_code, _headers = add_user_with_http_info(user_id, access_group_id, email, opts)
      data
    end

    # Add user to access group.
    # @param user_id
    # @param access_group_id
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def add_user_with_http_info(user_id, access_group_id, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.add_user"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.add_user"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AllEndpointsApi.add_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add user to access group.
    # @param access_group_id
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def add_user1(access_group_id, email, opts = {})
      data, _status_code, _headers = add_user1_with_http_info(access_group_id, email, opts)
      data
    end

    # Add user to access group.
    # @param access_group_id
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def add_user1_with_http_info(access_group_id, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.add_user1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.add_user1"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AllEndpointsApi.add_user1"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/users'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#add_user1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Archive service.
    # @param service_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def archive_service(service_id, opts = {})
      archive_service_with_http_info(service_id, opts)
      nil
    end

    # Archive service.
    # @param service_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def archive_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.archive_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AllEndpointsApi.archive_service"
      end
      # resource path
      local_var_path = '/api/v2/admin/services/{serviceId}'.sub('{' + 'serviceId' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#archive_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create property banning application.
    # @param test_run_id
    # @param [Hash] opts the optional parameters
    # @return [APIProperty]
    def ban_application(test_run_id, opts = {})
      data, _status_code, _headers = ban_application_with_http_info(test_run_id, opts)
      data
    end

    # Create property banning application.
    # @param test_run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProperty, Integer, Hash)>] APIProperty data, response status code and response headers
    def ban_application_with_http_info(test_run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.ban_application ...'
      end
      # verify the required parameter 'test_run_id' is set
      if @api_client.config.client_side_validation && test_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'test_run_id' when calling AllEndpointsApi.ban_application"
      end
      # resource path
      local_var_path = '/api/v2/properties/app-bans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'testRunId'] = test_run_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#ban_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create property banning email domain.
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [APIProperty]
    def ban_email_domain(email, opts = {})
      data, _status_code, _headers = ban_email_domain_with_http_info(email, opts)
      data
    end

    # Create property banning email domain.
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProperty, Integer, Hash)>] APIProperty data, response status code and response headers
    def ban_email_domain_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.ban_email_domain ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AllEndpointsApi.ban_email_domain"
      end
      # resource path
      local_var_path = '/api/v2/properties/email-bans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#ban_email_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start blinking device screen.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [APIAdminDevice]
    def blink(device_id, opts = {})
      data, _status_code, _headers = blink_with_http_info(device_id, opts)
      data
    end

    # Start blinking device screen.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminDevice, Integer, Hash)>] APIAdminDevice data, response status code and response headers
    def blink_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.blink ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.blink"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/blink'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#blink\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Buy service.
    # @param user_id
    # @param service_id
    # @param payment_method
    # @param [Hash] opts the optional parameters
    # @option opts [String] :first_name
    # @option opts [String] :last_name
    # @option opts [String] :email
    # @option opts [String] :phone
    # @option opts [String] :organization
    # @option opts [String] :country
    # @option opts [String] :city
    # @option opts [String] :state
    # @option opts [String] :address
    # @option opts [String] :zip
    # @option opts [String] :card_number
    # @option opts [String] :expiration_date
    # @option opts [String] :cvv
    # @option opts [Integer] :count  (default to 1)
    # @option opts [String] :stripe_token
    # @return [APIServicePaymentStatus]
    def buy_service(user_id, service_id, payment_method, opts = {})
      data, _status_code, _headers = buy_service_with_http_info(user_id, service_id, payment_method, opts)
      data
    end

    # Buy service.
    # @param user_id
    # @param service_id
    # @param payment_method
    # @param [Hash] opts the optional parameters
    # @option opts [String] :first_name
    # @option opts [String] :last_name
    # @option opts [String] :email
    # @option opts [String] :phone
    # @option opts [String] :organization
    # @option opts [String] :country
    # @option opts [String] :city
    # @option opts [String] :state
    # @option opts [String] :address
    # @option opts [String] :zip
    # @option opts [String] :card_number
    # @option opts [String] :expiration_date
    # @option opts [String] :cvv
    # @option opts [Integer] :count
    # @option opts [String] :stripe_token
    # @return [Array<(APIServicePaymentStatus, Integer, Hash)>] APIServicePaymentStatus data, response status code and response headers
    def buy_service_with_http_info(user_id, service_id, payment_method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.buy_service ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.buy_service"
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AllEndpointsApi.buy_service"
      end
      # verify the required parameter 'payment_method' is set
      if @api_client.config.client_side_validation && payment_method.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method' when calling AllEndpointsApi.buy_service"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['PAYPAL', 'BRAINTREE', 'STRIPE', 'INVOICE', 'PROMOTION', 'AWS'].include?(payment_method)
        fail ArgumentError, "invalid value for 'payment_method', must be one of PAYPAL, BRAINTREE, STRIPE, INVOICE, PROMOTION, AWS"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/services'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serviceId'] = service_id
      query_params[:'paymentMethod'] = payment_method
      query_params[:'firstName'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'lastName'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'phone'] = opts[:'phone'] if !opts[:'phone'].nil?
      query_params[:'organization'] = opts[:'organization'] if !opts[:'organization'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'zip'] = opts[:'zip'] if !opts[:'zip'].nil?
      query_params[:'cardNumber'] = opts[:'card_number'] if !opts[:'card_number'].nil?
      query_params[:'expirationDate'] = opts[:'expiration_date'] if !opts[:'expiration_date'].nil?
      query_params[:'cvv'] = opts[:'cvv'] if !opts[:'cvv'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'stripeToken'] = opts[:'stripe_token'] if !opts[:'stripe_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIServicePaymentStatus'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#buy_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel service subscription.
    # @param user_id
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [APIServicePaymentStatus]
    def cancel_subscription(user_id, account_service_id, opts = {})
      data, _status_code, _headers = cancel_subscription_with_http_info(user_id, account_service_id, opts)
      data
    end

    # Cancel service subscription.
    # @param user_id
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIServicePaymentStatus, Integer, Hash)>] APIServicePaymentStatus data, response status code and response headers
    def cancel_subscription_with_http_info(user_id, account_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.cancel_subscription ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.cancel_subscription"
      end
      # verify the required parameter 'account_service_id' is set
      if @api_client.config.client_side_validation && account_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_service_id' when calling AllEndpointsApi.cancel_subscription"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/services/{accountServiceId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accountServiceId' + '}', account_service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIServicePaymentStatus'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#cancel_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service price.
    # @param service_id
    # @param cent_price
    # @param [Hash] opts the optional parameters
    # @return [APIService]
    def change_service_price(service_id, cent_price, opts = {})
      data, _status_code, _headers = change_service_price_with_http_info(service_id, cent_price, opts)
      data
    end

    # Update service price.
    # @param service_id
    # @param cent_price
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIService, Integer, Hash)>] APIService data, response status code and response headers
    def change_service_price_with_http_info(service_id, cent_price, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.change_service_price ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AllEndpointsApi.change_service_price"
      end
      # verify the required parameter 'cent_price' is set
      if @api_client.config.client_side_validation && cent_price.nil?
        fail ArgumentError, "Missing the required parameter 'cent_price' when calling AllEndpointsApi.change_service_price"
      end
      # resource path
      local_var_path = '/api/v2/admin/services/{serviceId}/change-price'.sub('{' + 'serviceId' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'centPrice'] = cent_price

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#change_service_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create access group.
    # @param user_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope  (default to USER)
    # @return [APIAccessGroup]
    def create(user_id, name, opts = {})
      data, _status_code, _headers = create_with_http_info(user_id, name, opts)
      data
    end

    # Create access group.
    # @param user_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope
    # @return [Array<(APIAccessGroup, Integer, Hash)>] APIAccessGroup data, response status code and response headers
    def create_with_http_info(user_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.create"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.create"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create access group.
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope  (default to USER)
    # @option opts [Integer] :user_id
    # @return [APIAccessGroup]
    def create1(name, opts = {})
      data, _status_code, _headers = create1_with_http_info(name, opts)
      data
    end

    # Create access group.
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope
    # @option opts [Integer] :user_id
    # @return [Array<(APIAccessGroup, Integer, Hash)>] APIAccessGroup data, response status code and response headers
    def create1_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create1 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.create1"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/access-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create browser.
    # @param name
    # @param display_name
    # @param version
    # @param os_type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :architecture
    # @option opts [String] :install_url
    # @return [APIBrowser]
    def create_browser(name, display_name, version, os_type, opts = {})
      data, _status_code, _headers = create_browser_with_http_info(name, display_name, version, os_type, opts)
      data
    end

    # Create browser.
    # @param name
    # @param display_name
    # @param version
    # @param os_type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :architecture
    # @option opts [String] :install_url
    # @return [Array<(APIBrowser, Integer, Hash)>] APIBrowser data, response status code and response headers
    def create_browser_with_http_info(name, display_name, version, os_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_browser ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.create_browser"
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AllEndpointsApi.create_browser"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling AllEndpointsApi.create_browser"
      end
      # verify the required parameter 'os_type' is set
      if @api_client.config.client_side_validation && os_type.nil?
        fail ArgumentError, "Missing the required parameter 'os_type' when calling AllEndpointsApi.create_browser"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(os_type)
        fail ArgumentError, "invalid value for 'os_type', must be one of IOS, ANDROID, DESKTOP, UNDEFINED"
      end
      # resource path
      local_var_path = '/api/v2/admin/browsers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'displayName'] = display_name
      query_params[:'version'] = version
      query_params[:'osType'] = os_type
      query_params[:'architecture'] = opts[:'architecture'] if !opts[:'architecture'].nil?
      query_params[:'installUrl'] = opts[:'install_url'] if !opts[:'install_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIBrowser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_browser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create device cleanup configuration.
    # @param content
    # @param os_type
    # @param discriminator
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled  (default to true)
    # @return [APIDeviceCleanupConfiguration]
    def create_device_cleanup_configuration(content, os_type, discriminator, opts = {})
      data, _status_code, _headers = create_device_cleanup_configuration_with_http_info(content, os_type, discriminator, opts)
      data
    end

    # Create device cleanup configuration.
    # @param content
    # @param os_type
    # @param discriminator
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled
    # @return [Array<(APIDeviceCleanupConfiguration, Integer, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def create_device_cleanup_configuration_with_http_info(content, os_type, discriminator, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_device_cleanup_configuration ...'
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling AllEndpointsApi.create_device_cleanup_configuration"
      end
      # verify the required parameter 'os_type' is set
      if @api_client.config.client_side_validation && os_type.nil?
        fail ArgumentError, "Missing the required parameter 'os_type' when calling AllEndpointsApi.create_device_cleanup_configuration"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(os_type)
        fail ArgumentError, "invalid value for 'os_type', must be one of IOS, ANDROID, DESKTOP, UNDEFINED"
      end
      # verify the required parameter 'discriminator' is set
      if @api_client.config.client_side_validation && discriminator.nil?
        fail ArgumentError, "Missing the required parameter 'discriminator' when calling AllEndpointsApi.create_device_cleanup_configuration"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = content
      query_params[:'osType'] = os_type
      query_params[:'discriminator'] = discriminator
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceCleanupConfiguration'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_device_cleanup_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create connection for device session.
    # @param user_id
    # @param device_session_id
    # @param host
    # @param port
    # @param type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password
    # @return [APIConnection]
    def create_device_session_connection(user_id, device_session_id, host, port, type, opts = {})
      data, _status_code, _headers = create_device_session_connection_with_http_info(user_id, device_session_id, host, port, type, opts)
      data
    end

    # Create connection for device session.
    # @param user_id
    # @param device_session_id
    # @param host
    # @param port
    # @param type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password
    # @return [Array<(APIConnection, Integer, Hash)>] APIConnection data, response status code and response headers
    def create_device_session_connection_with_http_info(user_id, device_session_id, host, port, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_device_session_connection ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.create_device_session_connection"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.create_device_session_connection"
      end
      # verify the required parameter 'host' is set
      if @api_client.config.client_side_validation && host.nil?
        fail ArgumentError, "Missing the required parameter 'host' when calling AllEndpointsApi.create_device_session_connection"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AllEndpointsApi.create_device_session_connection"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AllEndpointsApi.create_device_session_connection"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/connections'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'host'] = host
      query_params[:'port'] = port
      query_params[:'type'] = type
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIConnection'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_device_session_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create connection for device session.
    # @param device_session_id
    # @param host
    # @param port
    # @param type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password
    # @return [APIConnection]
    def create_device_session_connection1(device_session_id, host, port, type, opts = {})
      data, _status_code, _headers = create_device_session_connection1_with_http_info(device_session_id, host, port, type, opts)
      data
    end

    # Create connection for device session.
    # @param device_session_id
    # @param host
    # @param port
    # @param type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password
    # @return [Array<(APIConnection, Integer, Hash)>] APIConnection data, response status code and response headers
    def create_device_session_connection1_with_http_info(device_session_id, host, port, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_device_session_connection1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.create_device_session_connection1"
      end
      # verify the required parameter 'host' is set
      if @api_client.config.client_side_validation && host.nil?
        fail ArgumentError, "Missing the required parameter 'host' when calling AllEndpointsApi.create_device_session_connection1"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AllEndpointsApi.create_device_session_connection1"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AllEndpointsApi.create_device_session_connection1"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/connections'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'host'] = host
      query_params[:'port'] = port
      query_params[:'type'] = type
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIConnection'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_device_session_connection1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create feedback email.
    # @param content
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [UserIdFeedbackBody] :body
    # @return [nil]
    def create_feedback_form_email(content, user_id, opts = {})
      create_feedback_form_email_with_http_info(content, user_id, opts)
      nil
    end

    # Create feedback email.
    # @param content
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [UserIdFeedbackBody] :body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_feedback_form_email_with_http_info(content, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_feedback_form_email ...'
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling AllEndpointsApi.create_feedback_form_email"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.create_feedback_form_email"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/feedback'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = content

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_feedback_form_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create file property.
    # @param file_id
    # @param key
    # @param value
    # @param [Hash] opts the optional parameters
    # @return [APIUserFileProperty]
    def create_file_property(file_id, key, value, opts = {})
      data, _status_code, _headers = create_file_property_with_http_info(file_id, key, value, opts)
      data
    end

    # Create file property.
    # @param file_id
    # @param key
    # @param value
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFileProperty, Integer, Hash)>] APIUserFileProperty data, response status code and response headers
    def create_file_property_with_http_info(file_id, key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_file_property ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.create_file_property"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AllEndpointsApi.create_file_property"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling AllEndpointsApi.create_file_property"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/properties'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = key
      query_params[:'value'] = value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFileProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_file_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create framework.
    # @param name
    # @param os_type
    # @param content
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description
    # @option opts [String] :required_app_extensions
    # @option opts [String] :required_test_extensions
    # @option opts [String] :required_test_file_tags
    # @option opts [String] :documentation_url
    # @option opts [BOOLEAN] :for_projects  (default to true)
    # @option opts [BOOLEAN] :can_run_from_ui  (default to true)
    # @option opts [BOOLEAN] :retryable  (default to true)
    # @option opts [BOOLEAN] :skip_queue  (default to false)
    # @option opts [BOOLEAN] :skip_older_sdk  (default to true)
    # @option opts [String] :type
    # @option opts [Integer] :account_id
    # @option opts [Integer] :label_id
    # @option opts [BOOLEAN] :add_label_to_devices  (default to false)
    # @option opts [Array<Integer>] :role_ids
    # @option opts [Integer] :sample_app_id
    # @option opts [Integer] :sample_test_id
    # @option opts [String] :icon
    # @return [APIFramework]
    def create_framework(name, os_type, content, opts = {})
      data, _status_code, _headers = create_framework_with_http_info(name, os_type, content, opts)
      data
    end

    # Create framework.
    # @param name
    # @param os_type
    # @param content
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description
    # @option opts [String] :required_app_extensions
    # @option opts [String] :required_test_extensions
    # @option opts [String] :required_test_file_tags
    # @option opts [String] :documentation_url
    # @option opts [BOOLEAN] :for_projects
    # @option opts [BOOLEAN] :can_run_from_ui
    # @option opts [BOOLEAN] :retryable
    # @option opts [BOOLEAN] :skip_queue
    # @option opts [BOOLEAN] :skip_older_sdk
    # @option opts [String] :type
    # @option opts [Integer] :account_id
    # @option opts [Integer] :label_id
    # @option opts [BOOLEAN] :add_label_to_devices
    # @option opts [Array<Integer>] :role_ids
    # @option opts [Integer] :sample_app_id
    # @option opts [Integer] :sample_test_id
    # @option opts [String] :icon
    # @return [Array<(APIFramework, Integer, Hash)>] APIFramework data, response status code and response headers
    def create_framework_with_http_info(name, os_type, content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_framework ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.create_framework"
      end
      # verify the required parameter 'os_type' is set
      if @api_client.config.client_side_validation && os_type.nil?
        fail ArgumentError, "Missing the required parameter 'os_type' when calling AllEndpointsApi.create_framework"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(os_type)
        fail ArgumentError, "invalid value for 'os_type', must be one of IOS, ANDROID, DESKTOP, UNDEFINED"
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling AllEndpointsApi.create_framework"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'osType'] = os_type
      query_params[:'content'] = content
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'requiredAppExtensions'] = opts[:'required_app_extensions'] if !opts[:'required_app_extensions'].nil?
      query_params[:'requiredTestExtensions'] = opts[:'required_test_extensions'] if !opts[:'required_test_extensions'].nil?
      query_params[:'requiredTestFileTags'] = opts[:'required_test_file_tags'] if !opts[:'required_test_file_tags'].nil?
      query_params[:'documentationUrl'] = opts[:'documentation_url'] if !opts[:'documentation_url'].nil?
      query_params[:'forProjects'] = opts[:'for_projects'] if !opts[:'for_projects'].nil?
      query_params[:'canRunFromUI'] = opts[:'can_run_from_ui'] if !opts[:'can_run_from_ui'].nil?
      query_params[:'retryable'] = opts[:'retryable'] if !opts[:'retryable'].nil?
      query_params[:'skipQueue'] = opts[:'skip_queue'] if !opts[:'skip_queue'].nil?
      query_params[:'skipOlderSdk'] = opts[:'skip_older_sdk'] if !opts[:'skip_older_sdk'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'labelId'] = opts[:'label_id'] if !opts[:'label_id'].nil?
      query_params[:'addLabelToDevices'] = opts[:'add_label_to_devices'] if !opts[:'add_label_to_devices'].nil?
      query_params[:'roleIds[]'] = @api_client.build_collection_param(opts[:'role_ids'], :multi) if !opts[:'role_ids'].nil?
      query_params[:'sampleAppId'] = opts[:'sample_app_id'] if !opts[:'sample_app_id'].nil?
      query_params[:'sampleTestId'] = opts[:'sample_test_id'] if !opts[:'sample_test_id'].nil?
      query_params[:'icon'] = opts[:'icon'] if !opts[:'icon'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIFramework'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_framework\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create device session.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [APIDeviceSessionConfig] :body
    # @option opts [Integer] :device_model_id
    # @option opts [String] :type
    # @option opts [String] :browser_name
    # @option opts [String] :browser_version
    # @option opts [String] :screen_resolution
    # @option opts [String] :url
    # @return [APIDeviceSession]
    def create_inspector_device_session(user_id, opts = {})
      data, _status_code, _headers = create_inspector_device_session_with_http_info(user_id, opts)
      data
    end

    # Create device session.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [APIDeviceSessionConfig] :body
    # @option opts [Integer] :device_model_id
    # @option opts [String] :type
    # @option opts [String] :browser_name
    # @option opts [String] :browser_version
    # @option opts [String] :screen_resolution
    # @option opts [String] :url
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def create_inspector_device_session_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_inspector_device_session ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.create_inspector_device_session"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['AUTOMATIC', 'MANUAL_APP', 'MANUAL_WEB', 'REMOTE'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of AUTOMATIC, MANUAL_APP, MANUAL_WEB, REMOTE'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceModelId'] = opts[:'device_model_id'] if !opts[:'device_model_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'browserName'] = opts[:'browser_name'] if !opts[:'browser_name'].nil?
      query_params[:'browserVersion'] = opts[:'browser_version'] if !opts[:'browser_version'].nil?
      query_params[:'screenResolution'] = opts[:'screen_resolution'] if !opts[:'screen_resolution'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_inspector_device_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add label to label group.
    # @param group_id
    # @param name
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceProperty]
    def create_label(group_id, name, display_name, opts = {})
      data, _status_code, _headers = create_label_with_http_info(group_id, name, display_name, opts)
      data
    end

    # Add label to label group.
    # @param group_id
    # @param name
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceProperty, Integer, Hash)>] APIDeviceProperty data, response status code and response headers
    def create_label_with_http_info(group_id, name, display_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_label ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AllEndpointsApi.create_label"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.create_label"
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AllEndpointsApi.create_label"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}/labels'.sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'displayName'] = display_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create label group.
    # @param name
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @return [APILabelGroup]
    def create_label_group(name, display_name, opts = {})
      data, _status_code, _headers = create_label_group_with_http_info(name, display_name, opts)
      data
    end

    # Create label group.
    # @param name
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILabelGroup, Integer, Hash)>] APILabelGroup data, response status code and response headers
    def create_label_group_with_http_info(name, display_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_label_group ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.create_label_group"
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AllEndpointsApi.create_label_group"
      end
      # resource path
      local_var_path = '/api/v2/label-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'displayName'] = display_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APILabelGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_label_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create license.
    # @param user_id
    # @param unit
    # @param unit_count
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :android_enabled  (default to false)
    # @option opts [Integer] :android_device_limit
    # @option opts [Integer] :android_project_limit
    # @option opts [BOOLEAN] :inspector_enabled  (default to false)
    # @option opts [BOOLEAN] :ios_enabled  (default to false)
    # @option opts [Integer] :ios_device_limit
    # @option opts [Integer] :ios_project_limit
    # @option opts [BOOLEAN] :private_instance  (default to false)
    # @option opts [BOOLEAN] :build_enabled  (default to false)
    # @option opts [Integer] :build_limit
    # @option opts [BOOLEAN] :desktop_enabled  (default to false)
    # @option opts [Integer] :desktop_device_limit
    # @option opts [Integer] :desktop_project_limit
    # @option opts [Integer] :global_device_limit
    # @option opts [Integer] :global_project_limit
    # @return [APILicense]
    def create_license(user_id, unit, unit_count, opts = {})
      data, _status_code, _headers = create_license_with_http_info(user_id, unit, unit_count, opts)
      data
    end

    # Create license.
    # @param user_id
    # @param unit
    # @param unit_count
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :android_enabled
    # @option opts [Integer] :android_device_limit
    # @option opts [Integer] :android_project_limit
    # @option opts [BOOLEAN] :inspector_enabled
    # @option opts [BOOLEAN] :ios_enabled
    # @option opts [Integer] :ios_device_limit
    # @option opts [Integer] :ios_project_limit
    # @option opts [BOOLEAN] :private_instance
    # @option opts [BOOLEAN] :build_enabled
    # @option opts [Integer] :build_limit
    # @option opts [BOOLEAN] :desktop_enabled
    # @option opts [Integer] :desktop_device_limit
    # @option opts [Integer] :desktop_project_limit
    # @option opts [Integer] :global_device_limit
    # @option opts [Integer] :global_project_limit
    # @return [Array<(APILicense, Integer, Hash)>] APILicense data, response status code and response headers
    def create_license_with_http_info(user_id, unit, unit_count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_license ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.create_license"
      end
      # verify the required parameter 'unit' is set
      if @api_client.config.client_side_validation && unit.nil?
        fail ArgumentError, "Missing the required parameter 'unit' when calling AllEndpointsApi.create_license"
      end
      # verify the required parameter 'unit_count' is set
      if @api_client.config.client_side_validation && unit_count.nil?
        fail ArgumentError, "Missing the required parameter 'unit_count' when calling AllEndpointsApi.create_license"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userId'] = user_id
      query_params[:'unit'] = unit
      query_params[:'unitCount'] = unit_count
      query_params[:'androidEnabled'] = opts[:'android_enabled'] if !opts[:'android_enabled'].nil?
      query_params[:'androidDeviceLimit'] = opts[:'android_device_limit'] if !opts[:'android_device_limit'].nil?
      query_params[:'androidProjectLimit'] = opts[:'android_project_limit'] if !opts[:'android_project_limit'].nil?
      query_params[:'inspectorEnabled'] = opts[:'inspector_enabled'] if !opts[:'inspector_enabled'].nil?
      query_params[:'iosEnabled'] = opts[:'ios_enabled'] if !opts[:'ios_enabled'].nil?
      query_params[:'iosDeviceLimit'] = opts[:'ios_device_limit'] if !opts[:'ios_device_limit'].nil?
      query_params[:'iosProjectLimit'] = opts[:'ios_project_limit'] if !opts[:'ios_project_limit'].nil?
      query_params[:'privateInstance'] = opts[:'private_instance'] if !opts[:'private_instance'].nil?
      query_params[:'buildEnabled'] = opts[:'build_enabled'] if !opts[:'build_enabled'].nil?
      query_params[:'buildLimit'] = opts[:'build_limit'] if !opts[:'build_limit'].nil?
      query_params[:'desktopEnabled'] = opts[:'desktop_enabled'] if !opts[:'desktop_enabled'].nil?
      query_params[:'desktopDeviceLimit'] = opts[:'desktop_device_limit'] if !opts[:'desktop_device_limit'].nil?
      query_params[:'desktopProjectLimit'] = opts[:'desktop_project_limit'] if !opts[:'desktop_project_limit'].nil?
      query_params[:'globalDeviceLimit'] = opts[:'global_device_limit'] if !opts[:'global_device_limit'].nil?
      query_params[:'globalProjectLimit'] = opts[:'global_project_limit'] if !opts[:'global_project_limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APILicense'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create project.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @return [APIProject]
    def create_my_project(user_id, opts = {})
      data, _status_code, _headers = create_my_project_with_http_info(user_id, opts)
      data
    end

    # Create project.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @return [Array<(APIProject, Integer, Hash)>] APIProject data, response status code and response headers
    def create_my_project_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_my_project ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.create_my_project"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProject'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_my_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update VisualTests access.
    # @param body
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIVisualTestAccess]
    def create_or_update_visual_test_access(body, user_id, opts = {})
      data, _status_code, _headers = create_or_update_visual_test_access_with_http_info(body, user_id, opts)
      data
    end

    # Create or update VisualTests access.
    # @param body
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIVisualTestAccess, Integer, Hash)>] APIVisualTestAccess data, response status code and response headers
    def create_or_update_visual_test_access_with_http_info(body, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_or_update_visual_test_access ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AllEndpointsApi.create_or_update_visual_test_access"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.create_or_update_visual_test_access"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account/visualtest/access'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'APIVisualTestAccess'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_or_update_visual_test_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create property.
    # @param name
    # @param value
    # @param description
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_time
    # @option opts [Integer] :to_time
    # @return [APIProperty]
    def create_property(name, value, description, opts = {})
      data, _status_code, _headers = create_property_with_http_info(name, value, description, opts)
      data
    end

    # Create property.
    # @param name
    # @param value
    # @param description
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_time
    # @option opts [Integer] :to_time
    # @return [Array<(APIProperty, Integer, Hash)>] APIProperty data, response status code and response headers
    def create_property_with_http_info(name, value, description, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_property ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.create_property"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling AllEndpointsApi.create_property"
      end
      # verify the required parameter 'description' is set
      if @api_client.config.client_side_validation && description.nil?
        fail ArgumentError, "Missing the required parameter 'description' when calling AllEndpointsApi.create_property"
      end
      # resource path
      local_var_path = '/api/v2/properties'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'value'] = value
      query_params[:'description'] = description
      query_params[:'fromTime'] = opts[:'from_time'] if !opts[:'from_time'].nil?
      query_params[:'toTime'] = opts[:'to_time'] if !opts[:'to_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update the service.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [APIService]
    def create_service(body, opts = {})
      data, _status_code, _headers = create_service_with_http_info(body, opts)
      data
    end

    # Create or update the service.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIService, Integer, Hash)>] APIService data, response status code and response headers
    def create_service_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_service ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AllEndpointsApi.create_service"
      end
      # resource path
      local_var_path = '/api/v2/admin/services'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'APIService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create user.
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def create_user(email, opts = {})
      data, _status_code, _headers = create_user_with_http_info(email, opts)
      data
    end

    # Create user.
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def create_user_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_user ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AllEndpointsApi.create_user"
      end
      # resource path
      local_var_path = '/api/v2/admin/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create device group.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type  (default to ANDROID)
    # @option opts [Array<Integer>] :device_ids
    # @option opts [Array<Integer>] :selector_ids
    # @return [APIDeviceGroup]
    def create_user_device_group(user_id, opts = {})
      data, _status_code, _headers = create_user_device_group_with_http_info(user_id, opts)
      data
    end

    # Create device group.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type
    # @option opts [Array<Integer>] :device_ids
    # @option opts [Array<Integer>] :selector_ids
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def create_user_device_group_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_user_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.create_user_device_group"
      end
      if @api_client.config.client_side_validation && opts[:'os_type'] && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(opts[:'os_type'])
        fail ArgumentError, 'invalid value for "os_type", must be one of IOS, ANDROID, DESKTOP, UNDEFINED'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'osType'] = opts[:'os_type'] if !opts[:'os_type'].nil?
      query_params[:'deviceIds[]'] = @api_client.build_collection_param(opts[:'device_ids'], :multi) if !opts[:'device_ids'].nil?
      query_params[:'selectorIds[]'] = @api_client.build_collection_param(opts[:'selector_ids'], :multi) if !opts[:'selector_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_user_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create notification.
    # @param user_id
    # @param destination
    # @param channel
    # @param scope
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [APINotification]
    def create_user_notification(user_id, destination, channel, scope, opts = {})
      data, _status_code, _headers = create_user_notification_with_http_info(user_id, destination, channel, scope, opts)
      data
    end

    # Create notification.
    # @param user_id
    # @param destination
    # @param channel
    # @param scope
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [Array<(APINotification, Integer, Hash)>] APINotification data, response status code and response headers
    def create_user_notification_with_http_info(user_id, destination, channel, scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.create_user_notification ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.create_user_notification"
      end
      # verify the required parameter 'destination' is set
      if @api_client.config.client_side_validation && destination.nil?
        fail ArgumentError, "Missing the required parameter 'destination' when calling AllEndpointsApi.create_user_notification"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling AllEndpointsApi.create_user_notification"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['SLACK', 'EMAIL', 'WEBHOOK'].include?(channel)
        fail ArgumentError, "invalid value for 'channel', must be one of SLACK, EMAIL, WEBHOOK"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling AllEndpointsApi.create_user_notification"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ALL', 'TEST_RUN', 'TEST_RUN_FAILURE', 'TEST_RUN_SUCCEEDED', 'MAINTENANCE', 'MAINTENANCE_RELEASE', 'CUSTOM', 'NEWS', 'SYSTEM', 'CHECK', 'PLAN_LIMIT_REACHED', 'PLAN_INVOICE'].include?(scope)
        fail ArgumentError, "invalid value for 'scope', must be one of ALL, TEST_RUN, TEST_RUN_FAILURE, TEST_RUN_SUCCEEDED, MAINTENANCE, MAINTENANCE_RELEASE, CUSTOM, NEWS, SYSTEM, CHECK, PLAN_LIMIT_REACHED, PLAN_INVOICE"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'destination'] = destination
      query_params[:'channel'] = channel
      query_params[:'scope'] = scope
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APINotification'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#create_user_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deactivate license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def deactivate_license(id, opts = {})
      data, _status_code, _headers = deactivate_license_with_http_info(id, opts)
      data
    end

    # Deactivate license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Integer, Hash)>] APILicense data, response status code and response headers
    def deactivate_license_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.deactivate_license ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.deactivate_license"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}/deactivate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APILicense'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#deactivate_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deactivate account service.
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccountService]
    def deactivate_user_service(account_service_id, opts = {})
      data, _status_code, _headers = deactivate_user_service_with_http_info(account_service_id, opts)
      data
    end

    # Deactivate account service.
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountService, Integer, Hash)>] APIAccountService data, response status code and response headers
    def deactivate_user_service_with_http_info(account_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.deactivate_user_service ...'
      end
      # verify the required parameter 'account_service_id' is set
      if @api_client.config.client_side_validation && account_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_service_id' when calling AllEndpointsApi.deactivate_user_service"
      end
      # resource path
      local_var_path = '/api/v2/admin/account-services/{accountServiceId}/deactivate'.sub('{' + 'accountServiceId' + '}', account_service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccountService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#deactivate_user_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete users tunnel.
    # @param user_id
    # @param tunnel_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(user_id, tunnel_id, opts = {})
      delete_with_http_info(user_id, tunnel_id, opts)
      nil
    end

    # Delete users tunnel.
    # @param user_id
    # @param tunnel_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_with_http_info(user_id, tunnel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete"
      end
      # verify the required parameter 'tunnel_id' is set
      if @api_client.config.client_side_validation && tunnel_id.nil?
        fail ArgumentError, "Missing the required parameter 'tunnel_id' when calling AllEndpointsApi.delete"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/tunnels/{tunnelId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'tunnelId' + '}', tunnel_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete1(user_id, access_group_id, opts = {})
      delete1_with_http_info(user_id, access_group_id, opts)
      nil
    end

    # Delete access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete1_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.delete1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete2(access_group_id, opts = {})
      delete2_with_http_info(access_group_id, opts)
      nil
    end

    # Delete access group.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete2_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete2 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.delete2"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete browser.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_browser(id, opts = {})
      delete_browser_with_http_info(id, opts)
      nil
    end

    # Delete browser.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_browser_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_browser ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.delete_browser"
      end
      # resource path
      local_var_path = '/api/v2/admin/browsers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_browser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete cluster.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cluster(id, opts = {})
      delete_cluster_with_http_info(id, opts)
      nil
    end

    # Delete cluster.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_cluster_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_cluster ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.delete_cluster"
      end
      # resource path
      local_var_path = '/api/v2/clusters/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device(device_id, opts = {})
      delete_device_with_http_info(device_id, opts)
      nil
    end

    # Delete device.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_device_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_device ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.delete_device"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device specific cleanup configuration.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_cleanup_configuration(device_id, opts = {})
      delete_device_cleanup_configuration_with_http_info(device_id, opts)
      nil
    end

    # Delete device specific cleanup configuration.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_device_cleanup_configuration_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_device_cleanup_configuration ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.delete_device_cleanup_configuration"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/cleanup-configuration'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_device_cleanup_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device from device group.
    # @param user_id
    # @param device_group_id
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_from_device_group(user_id, device_group_id, device_id, opts = {})
      delete_device_from_device_group_with_http_info(user_id, device_group_id, device_id, opts)
      nil
    end

    # Delete device from device group.
    # @param user_id
    # @param device_group_id
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_device_from_device_group_with_http_info(user_id, device_group_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_device_from_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_device_from_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_device_from_device_group"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.delete_device_from_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/devices/{deviceId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s).sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_device_from_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device from device group.
    # @param device_group_id
    # @param device_model_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_from_device_group1(device_group_id, device_model_id, opts = {})
      delete_device_from_device_group1_with_http_info(device_group_id, device_model_id, opts)
      nil
    end

    # Delete device from device group.
    # @param device_group_id
    # @param device_model_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_device_from_device_group1_with_http_info(device_group_id, device_model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_device_from_device_group1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_device_from_device_group1"
      end
      # verify the required parameter 'device_model_id' is set
      if @api_client.config.client_side_validation && device_model_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_model_id' when calling AllEndpointsApi.delete_device_from_device_group1"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/devices/{deviceModelId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s).sub('{' + 'deviceModelId' + '}', device_model_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_device_from_device_group1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_group(device_group_id, opts = {})
      delete_device_group_with_http_info(device_group_id, opts)
      nil
    end

    # Delete device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_device_group_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_device_group ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_device_group"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete label from device.
    # @param device_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_label(device_id, label_id, opts = {})
      delete_device_label_with_http_info(device_id, label_id, opts)
      nil
    end

    # Delete label from device.
    # @param device_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_device_label_with_http_info(device_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_device_label ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.delete_device_label"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AllEndpointsApi.delete_device_label"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/properties/{labelId}'.sub('{' + 'deviceId' + '}', device_id.to_s).sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_device_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete label from device.
    # @param device_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_label1(device_id, label_id, opts = {})
      delete_device_label1_with_http_info(device_id, label_id, opts)
      nil
    end

    # Delete label from device.
    # @param device_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_device_label1_with_http_info(device_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_device_label1 ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.delete_device_label1"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AllEndpointsApi.delete_device_label1"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/labels/{labelId}'.sub('{' + 'deviceId' + '}', device_id.to_s).sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_device_label1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device model criterion.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIMessage]
    def delete_device_model_criteria(id, opts = {})
      data, _status_code, _headers = delete_device_model_criteria_with_http_info(id, opts)
      data
    end

    # Delete device model criterion.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIMessage, Integer, Hash)>] APIMessage data, response status code and response headers
    def delete_device_model_criteria_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_device_model_criteria ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.delete_device_model_criteria"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-model-criteria/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIMessage'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_device_model_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete devices from device group.
    # @param user_id
    # @param device_group_id
    # @param device_ids
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_devices_from_device_group(user_id, device_group_id, device_ids, opts = {})
      delete_devices_from_device_group_with_http_info(user_id, device_group_id, device_ids, opts)
      nil
    end

    # Delete devices from device group.
    # @param user_id
    # @param device_group_id
    # @param device_ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_devices_from_device_group_with_http_info(user_id, device_group_id, device_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_devices_from_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_devices_from_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_devices_from_device_group"
      end
      # verify the required parameter 'device_ids' is set
      if @api_client.config.client_side_validation && device_ids.nil?
        fail ArgumentError, "Missing the required parameter 'device_ids' when calling AllEndpointsApi.delete_devices_from_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/devices'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceIds[]'] = @api_client.build_collection_param(device_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_devices_from_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete devices from device group.
    # @param device_group_id
    # @param device_ids
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_devices_from_device_group1(device_group_id, device_ids, opts = {})
      delete_devices_from_device_group1_with_http_info(device_group_id, device_ids, opts)
      nil
    end

    # Delete devices from device group.
    # @param device_group_id
    # @param device_ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_devices_from_device_group1_with_http_info(device_group_id, device_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_devices_from_device_group1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_devices_from_device_group1"
      end
      # verify the required parameter 'device_ids' is set
      if @api_client.config.client_side_validation && device_ids.nil?
        fail ArgumentError, "Missing the required parameter 'device_ids' when calling AllEndpointsApi.delete_devices_from_device_group1"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/devices'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceIds[]'] = @api_client.build_collection_param(device_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_devices_from_device_group1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file(user_id, file_id, opts = {})
      delete_file_with_http_info(user_id, file_id, opts)
      nil
    end

    # Delete file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_file_with_http_info(user_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_file ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.delete_file"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete file from device session.
    # @param user_id
    # @param device_session_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file1(user_id, device_session_id, file_id, opts = {})
      delete_file1_with_http_info(user_id, device_session_id, file_id, opts)
      nil
    end

    # Delete file from device session.
    # @param user_id
    # @param device_session_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_file1_with_http_info(user_id, device_session_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_file1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_file1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.delete_file1"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.delete_file1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/output-file-set/files/{fileId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_file1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file2(file_id, opts = {})
      delete_file2_with_http_info(file_id, opts)
      nil
    end

    # Delete file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_file2_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_file2 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.delete_file2"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_file2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete file from device session.
    # @param device_session_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file3(device_session_id, file_id, opts = {})
      delete_file3_with_http_info(device_session_id, file_id, opts)
      nil
    end

    # Delete file from device session.
    # @param device_session_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_file3_with_http_info(device_session_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_file3 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.delete_file3"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.delete_file3"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/files/{fileId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_file3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete sample file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file4(file_id, opts = {})
      delete_file4_with_http_info(file_id, opts)
      nil
    end

    # Delete sample file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_file4_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_file4 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.delete_file4"
      end
      # resource path
      local_var_path = '/api/v2/admin/samples/{fileId}'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_file4\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete file property.
    # @param file_id
    # @param property_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file_property(file_id, property_id, opts = {})
      delete_file_property_with_http_info(file_id, property_id, opts)
      nil
    end

    # Delete file property.
    # @param file_id
    # @param property_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_file_property_with_http_info(file_id, property_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_file_property ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.delete_file_property"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling AllEndpointsApi.delete_file_property"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/properties/{propertyId}'.sub('{' + 'fileId' + '}', file_id.to_s).sub('{' + 'propertyId' + '}', property_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_file_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete framework.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_framework(id, opts = {})
      delete_framework_with_http_info(id, opts)
      nil
    end

    # Delete framework.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_framework_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_framework ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.delete_framework"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_framework\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete label.
    # @param group_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_label(group_id, label_id, opts = {})
      delete_label_with_http_info(group_id, label_id, opts)
      nil
    end

    # Delete label.
    # @param group_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_label_with_http_info(group_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_label ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AllEndpointsApi.delete_label"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AllEndpointsApi.delete_label"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}/labels/{labelId}'.sub('{' + 'groupId' + '}', group_id.to_s).sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete label group.
    # @param group_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_label_group(group_id, opts = {})
      delete_label_group_with_http_info(group_id, opts)
      nil
    end

    # Delete label group.
    # @param group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_label_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_label_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AllEndpointsApi.delete_label_group"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}'.sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_label_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_license(id, opts = {})
      delete_license_with_http_info(id, opts)
      nil
    end

    # Delete license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_license_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_license ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.delete_license"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project(project_id, opts = {})
      delete_project_with_http_info(project_id, opts)
      nil
    end

    # Delete project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.delete_project"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project_test_run(project_id, run_id, opts = {})
      delete_project_test_run_with_http_info(project_id, run_id, opts)
      nil
    end

    # Delete test run.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_project_test_run_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_project_test_run ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.delete_project_test_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.delete_project_test_run"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_project_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete property.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_property(id, opts = {})
      delete_property_with_http_info(id, opts)
      nil
    end

    # Delete property.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_property_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_property ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.delete_property"
      end
      # resource path
      local_var_path = '/api/v2/properties/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group resource.
    # @param user_id
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource(user_id, access_group_id, resource_id, opts = {})
      delete_resource_with_http_info(user_id, access_group_id, resource_id, opts)
      nil
    end

    # Delete access group resource.
    # @param user_id
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_resource_with_http_info(user_id, access_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_resource ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_resource"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.delete_resource"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling AllEndpointsApi.delete_resource"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group resource.
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource1(access_group_id, resource_id, opts = {})
      delete_resource1_with_http_info(access_group_id, resource_id, opts)
      nil
    end

    # Delete access group resource.
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_resource1_with_http_info(access_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_resource1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.delete_resource1"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling AllEndpointsApi.delete_resource1"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_resource1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete account role.
    # @param user_id
    # @param account_role_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_role_from_account(user_id, account_role_id, opts = {})
      delete_role_from_account_with_http_info(user_id, account_role_id, opts)
      nil
    end

    # Delete account role.
    # @param user_id
    # @param account_role_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_role_from_account_with_http_info(user_id, account_role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_role_from_account ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_role_from_account"
      end
      # verify the required parameter 'account_role_id' is set
      if @api_client.config.client_side_validation && account_role_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_role_id' when calling AllEndpointsApi.delete_role_from_account"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account/roles/{accountRoleId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accountRoleId' + '}', account_role_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_role_from_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete selector from device group.
    # @param user_id
    # @param device_group_id
    # @param selector_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_selector_from_device_group(user_id, device_group_id, selector_id, opts = {})
      delete_selector_from_device_group_with_http_info(user_id, device_group_id, selector_id, opts)
      nil
    end

    # Delete selector from device group.
    # @param user_id
    # @param device_group_id
    # @param selector_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_selector_from_device_group_with_http_info(user_id, device_group_id, selector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_selector_from_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_selector_from_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_selector_from_device_group"
      end
      # verify the required parameter 'selector_id' is set
      if @api_client.config.client_side_validation && selector_id.nil?
        fail ArgumentError, "Missing the required parameter 'selector_id' when calling AllEndpointsApi.delete_selector_from_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/selectors/{selectorId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s).sub('{' + 'selectorId' + '}', selector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_selector_from_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete selector from device group.
    # @param device_group_id
    # @param selector_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_selector_from_device_group1(device_group_id, selector_id, opts = {})
      delete_selector_from_device_group1_with_http_info(device_group_id, selector_id, opts)
      nil
    end

    # Delete selector from device group.
    # @param device_group_id
    # @param selector_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_selector_from_device_group1_with_http_info(device_group_id, selector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_selector_from_device_group1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_selector_from_device_group1"
      end
      # verify the required parameter 'selector_id' is set
      if @api_client.config.client_side_validation && selector_id.nil?
        fail ArgumentError, "Missing the required parameter 'selector_id' when calling AllEndpointsApi.delete_selector_from_device_group1"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/selectors/{selectorId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s).sub('{' + 'selectorId' + '}', selector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_selector_from_device_group1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete selectors from device group.
    # @param user_id
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_selectors_from_device_group(user_id, device_group_id, selector_ids, opts = {})
      delete_selectors_from_device_group_with_http_info(user_id, device_group_id, selector_ids, opts)
      nil
    end

    # Delete selectors from device group.
    # @param user_id
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_selectors_from_device_group_with_http_info(user_id, device_group_id, selector_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_selectors_from_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_selectors_from_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_selectors_from_device_group"
      end
      # verify the required parameter 'selector_ids' is set
      if @api_client.config.client_side_validation && selector_ids.nil?
        fail ArgumentError, "Missing the required parameter 'selector_ids' when calling AllEndpointsApi.delete_selectors_from_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/selectors'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'selectorIds[]'] = @api_client.build_collection_param(selector_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_selectors_from_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete selectors from device group.
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_selectors_from_device_group1(device_group_id, selector_ids, opts = {})
      delete_selectors_from_device_group1_with_http_info(device_group_id, selector_ids, opts)
      nil
    end

    # Delete selectors from device group.
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_selectors_from_device_group1_with_http_info(device_group_id, selector_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_selectors_from_device_group1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_selectors_from_device_group1"
      end
      # verify the required parameter 'selector_ids' is set
      if @api_client.config.client_side_validation && selector_ids.nil?
        fail ArgumentError, "Missing the required parameter 'selector_ids' when calling AllEndpointsApi.delete_selectors_from_device_group1"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/selectors'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'selectorIds[]'] = @api_client.build_collection_param(selector_ids, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_selectors_from_device_group1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [nil]
    def delete_test_run(run_id, opts = {})
      delete_test_run_with_http_info(run_id, opts)
      nil
    end

    # Delete test run.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_test_run_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_test_run ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.delete_test_run"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_test_run1(run_id, opts = {})
      delete_test_run1_with_http_info(run_id, opts)
      nil
    end

    # Delete test run.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_test_run1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_test_run1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.delete_test_run1"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_test_run1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run tag.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_test_run_tag(user_id, project_id, run_id, tag_id, opts = {})
      delete_test_run_tag_with_http_info(user_id, project_id, run_id, tag_id, opts)
      nil
    end

    # Delete test run tag.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_test_run_tag_with_http_info(user_id, project_id, run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_test_run_tag ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_test_run_tag"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.delete_test_run_tag"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.delete_test_run_tag"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AllEndpointsApi.delete_test_run_tag"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/tags/{tagId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_test_run_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run tag.
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [nil]
    def delete_test_run_tag1(run_id, tag_id, opts = {})
      delete_test_run_tag1_with_http_info(run_id, tag_id, opts)
      nil
    end

    # Delete test run tag.
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_test_run_tag1_with_http_info(run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_test_run_tag1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.delete_test_run_tag1"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AllEndpointsApi.delete_test_run_tag1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/tags/{tagId}'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_test_run_tag1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run tag.
    # @param project_id
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_test_run_tag_with_project(project_id, run_id, tag_id, opts = {})
      delete_test_run_tag_with_project_with_http_info(project_id, run_id, tag_id, opts)
      nil
    end

    # Delete test run tag.
    # @param project_id
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_test_run_tag_with_project_with_http_info(project_id, run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_test_run_tag_with_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.delete_test_run_tag_with_project"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.delete_test_run_tag_with_project"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AllEndpointsApi.delete_test_run_tag_with_project"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/tags/{tagId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_test_run_tag_with_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete user.
    # @param user_id
    # @param password
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def delete_user(user_id, password, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(user_id, password, opts)
      data
    end

    # Delete user.
    # @param user_id
    # @param password
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def delete_user_with_http_info(user_id, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_user"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling AllEndpointsApi.delete_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/delete'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'password'] = password

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group user.
    # @param user_id
    # @param access_group_id
    # @param participant_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user1(user_id, access_group_id, participant_id, opts = {})
      delete_user1_with_http_info(user_id, access_group_id, participant_id, opts)
      nil
    end

    # Delete access group user.
    # @param user_id
    # @param access_group_id
    # @param participant_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user1_with_http_info(user_id, access_group_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_user1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_user1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.delete_user1"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling AllEndpointsApi.delete_user1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users/{participantId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_user1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete access group user.
    # @param access_group_id
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user2(access_group_id, user_id, opts = {})
      delete_user2_with_http_info(access_group_id, user_id, opts)
      nil
    end

    # Delete access group user.
    # @param access_group_id
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user2_with_http_info(access_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_user2 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.delete_user2"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_user2"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/users/{userId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_user2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_device_group(user_id, device_group_id, opts = {})
      delete_user_device_group_with_http_info(user_id, device_group_id, opts)
      nil
    end

    # Delete device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_user_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_user_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.delete_user_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_user_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_notification_email(user_id, id, opts = {})
      delete_user_notification_email_with_http_info(user_id, id, opts)
      nil
    end

    # Delete notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_notification_email_with_http_info(user_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_user_notification_email ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_user_notification_email"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.delete_user_notification_email"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications/{id}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_user_notification_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_project(user_id, project_id, opts = {})
      delete_user_project_with_http_info(user_id, project_id, opts)
      nil
    end

    # Delete project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_project_with_http_info(user_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_user_project ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_user_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.delete_user_project"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_user_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete test run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_test_run(user_id, project_id, run_id, opts = {})
      delete_user_test_run_with_http_info(user_id, project_id, run_id, opts)
      nil
    end

    # Delete test run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_test_run_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_user_test_run ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_user_test_run"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.delete_user_test_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.delete_user_test_run"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_user_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all user test runs.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_test_runs(user_id, opts = {})
      delete_user_test_runs_with_http_info(user_id, opts)
      nil
    end

    # Delete all user test runs.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_test_runs_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.delete_user_test_runs ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.delete_user_test_runs"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/runs'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#delete_user_test_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disable additional user.
    # @param user_id
    # @param additional_user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def disable_additional_user(user_id, additional_user_id, opts = {})
      data, _status_code, _headers = disable_additional_user_with_http_info(user_id, additional_user_id, opts)
      data
    end

    # Disable additional user.
    # @param user_id
    # @param additional_user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def disable_additional_user_with_http_info(user_id, additional_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.disable_additional_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.disable_additional_user"
      end
      # verify the required parameter 'additional_user_id' is set
      if @api_client.config.client_side_validation && additional_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'additional_user_id' when calling AllEndpointsApi.disable_additional_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account/additional-users/{additionalUserId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'additionalUserId' + '}', additional_user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#disable_additional_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disable user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def disable_user(user_id, opts = {})
      data, _status_code, _headers = disable_user_with_http_info(user_id, opts)
      data
    end

    # Disable user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def disable_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.disable_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.disable_user"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/disable'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#disable_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download icon of file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_icon_file(user_id, file_id, opts = {})
      download_icon_file_with_http_info(user_id, file_id, opts)
      nil
    end

    # Download icon of file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_icon_file_with_http_info(user_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_icon_file ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.download_icon_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.download_icon_file"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}/icon'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_icon_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download icon of file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_icon_file1(file_id, opts = {})
      download_icon_file1_with_http_info(file_id, opts)
      nil
    end

    # Download icon of file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_icon_file1_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_icon_file1 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.download_icon_file1"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/icon'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_icon_file1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_license(id, opts = {})
      download_license_with_http_info(id, opts)
      nil
    end

    # Get license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_license_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_license ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.download_license"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}/download'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_output_files_zip(user_id, device_session_id, opts = {})
      download_output_files_zip_with_http_info(user_id, device_session_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_output_files_zip_with_http_info(user_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_output_files_zip ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.download_output_files_zip"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.download_output_files_zip"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_output_files_zip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_output_files_zip1(device_session_id, opts = {})
      download_output_files_zip1_with_http_info(device_session_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_output_files_zip1_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_output_files_zip1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.download_output_files_zip1"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_output_files_zip1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_test_run_output_files_zip(user_id, project_id, run_id, device_session_id, opts = {})
      download_test_run_output_files_zip_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_test_run_output_files_zip_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_test_run_output_files_zip ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.download_test_run_output_files_zip"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.download_test_run_output_files_zip"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.download_test_run_output_files_zip"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.download_test_run_output_files_zip"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_test_run_output_files_zip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_test_run_output_files_zip1(run_id, device_session_id, opts = {})
      download_test_run_output_files_zip1_with_http_info(run_id, device_session_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_test_run_output_files_zip1_with_http_info(run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_test_run_output_files_zip1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.download_test_run_output_files_zip1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.download_test_run_output_files_zip1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_test_run_output_files_zip1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.zip.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_test_run_output_files_zip2(project_id, run_id, device_session_id, opts = {})
      download_test_run_output_files_zip2_with_http_info(project_id, run_id, device_session_id, opts)
      nil
    end

    # Get device session output files.zip.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_test_run_output_files_zip2_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_test_run_output_files_zip2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.download_test_run_output_files_zip2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.download_test_run_output_files_zip2"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.download_test_run_output_files_zip2"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_test_run_output_files_zip2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [nil]
    def download_user_file(user_id, file_id, opts = {})
      download_user_file_with_http_info(user_id, file_id, opts)
      nil
    end

    # Download file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_user_file_with_http_info(user_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_user_file ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.download_user_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.download_user_file"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}/file'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_user_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [nil]
    def download_user_file1(file_id, opts = {})
      download_user_file1_with_http_info(file_id, opts)
      nil
    end

    # Download file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_user_file1_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.download_user_file1 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.download_user_file1"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/file'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#download_user_file1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable additional user.
    # @param user_id
    # @param additional_user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def enable_additional_user(user_id, additional_user_id, opts = {})
      data, _status_code, _headers = enable_additional_user_with_http_info(user_id, additional_user_id, opts)
      data
    end

    # Enable additional user.
    # @param user_id
    # @param additional_user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def enable_additional_user_with_http_info(user_id, additional_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.enable_additional_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.enable_additional_user"
      end
      # verify the required parameter 'additional_user_id' is set
      if @api_client.config.client_side_validation && additional_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'additional_user_id' when calling AllEndpointsApi.enable_additional_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account/additional-users/{additionalUserId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'additionalUserId' + '}', additional_user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#enable_additional_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def enable_user(user_id, opts = {})
      data, _status_code, _headers = enable_user_with_http_info(user_id, opts)
      data
    end

    # Enable user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def enable_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.enable_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.enable_user"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/enable'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#enable_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate recovery key.
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [APIMessage]
    def generate_recovery_key_for_user(email, opts = {})
      data, _status_code, _headers = generate_recovery_key_for_user_with_http_info(email, opts)
      data
    end

    # Generate recovery key.
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIMessage, Integer, Hash)>] APIMessage data, response status code and response headers
    def generate_recovery_key_for_user_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.generate_recovery_key_for_user ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AllEndpointsApi.generate_recovery_key_for_user"
      end
      # resource path
      local_var_path = '/api/v2/users/recoveries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIMessage'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#generate_recovery_key_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get users tunnels.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active
    # @return [APIListAPISmartbearTunnel]
    def get(user_id, opts = {})
      data, _status_code, _headers = get_with_http_info(user_id, opts)
      data
    end

    # Get users tunnels.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active
    # @return [Array<(APIListAPISmartbearTunnel, Integer, Hash)>] APIListAPISmartbearTunnel data, response status code and response headers
    def get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/tunnels'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISmartbearTunnel'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccessGroup]
    def get1(user_id, access_group_id, opts = {})
      data, _status_code, _headers = get1_with_http_info(user_id, access_group_id, opts)
      data
    end

    # Get access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccessGroup, Integer, Hash)>] APIAccessGroup data, response status code and response headers
    def get1_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccessGroup]
    def get2(access_group_id, opts = {})
      data, _status_code, _headers = get2_with_http_info(access_group_id, opts)
      data
    end

    # Get access group.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccessGroup, Integer, Hash)>] APIAccessGroup data, response status code and response headers
    def get2_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get2 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get2"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccount]
    def get_account(user_id, opts = {})
      data, _status_code, _headers = get_account_with_http_info(user_id, opts)
      data
    end

    # Get account.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccount, Integer, Hash)>] APIAccount data, response status code and response headers
    def get_account_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_account ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_account"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccount'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account.
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_dedicated_devices_info  (default to false)
    # @return [APIAccount]
    def get_account1(account_id, opts = {})
      data, _status_code, _headers = get_account1_with_http_info(account_id, opts)
      data
    end

    # Get account.
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_dedicated_devices_info
    # @return [Array<(APIAccount, Integer, Hash)>] APIAccount data, response status code and response headers
    def get_account1_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_account1 ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AllEndpointsApi.get_account1"
      end
      # resource path
      local_var_path = '/api/v2/admin/accounts/{accountId}'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withDedicatedDevicesInfo'] = opts[:'with_dedicated_devices_info'] if !opts[:'with_dedicated_devices_info'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccount'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_account1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account concurrency status.
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccountConcurrencyStatusMap]
    def get_account_concurrency_status(account_id, opts = {})
      data, _status_code, _headers = get_account_concurrency_status_with_http_info(account_id, opts)
      data
    end

    # Get account concurrency status.
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountConcurrencyStatusMap, Integer, Hash)>] APIAccountConcurrencyStatusMap data, response status code and response headers
    def get_account_concurrency_status_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_account_concurrency_status ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AllEndpointsApi.get_account_concurrency_status"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/concurrency-status'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccountConcurrencyStatusMap'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_account_concurrency_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_dedicated_devices_info  (default to false)
    # @option opts [BOOLEAN] :only_with_dedicated_devices  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;mainUserFirstName_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;mainUserLastName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1700230366167&lt;br&gt;filter&#x3D;mainuserfirstname_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;mainuserlastname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAccount]
    def get_account_list(opts = {})
      data, _status_code, _headers = get_account_list_with_http_info(opts)
      data
    end

    # Get accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_dedicated_devices_info
    # @option opts [BOOLEAN] :only_with_dedicated_devices
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;mainUserFirstName_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;mainUserLastName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1700230366167&lt;br&gt;filter&#x3D;mainuserfirstname_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;mainuserlastname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAccount, Integer, Hash)>] APIListAPIAccount data, response status code and response headers
    def get_account_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_account_list ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withDedicatedDevicesInfo'] = opts[:'with_dedicated_devices_info'] if !opts[:'with_dedicated_devices_info'].nil?
      query_params[:'onlyWithDedicatedDevices'] = opts[:'only_with_dedicated_devices'] if !opts[:'only_with_dedicated_devices'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAccount'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_account_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account preferences.
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccountPreference]
    def get_account_preferences(account_id, opts = {})
      data, _status_code, _headers = get_account_preferences_with_http_info(account_id, opts)
      data
    end

    # Get account preferences.
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountPreference, Integer, Hash)>] APIAccountPreference data, response status code and response headers
    def get_account_preferences_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_account_preferences ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AllEndpointsApi.get_account_preferences"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/preferences'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccountPreference'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_account_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account roles.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_admin&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIRole]
    def get_account_roles(user_id, opts = {})
      data, _status_code, _headers = get_account_roles_with_http_info(user_id, opts)
      data
    end

    # Get account roles.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_admin&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIRole, Integer, Hash)>] APIListAPIRole data, response status code and response headers
    def get_account_roles_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_account_roles ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_account_roles"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account/roles'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIRole'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_account_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get billing information.
    # @param user_id
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :on_date
    # @return [APIAccountServicePayment]
    def get_account_service_payment(user_id, account_service_id, opts = {})
      data, _status_code, _headers = get_account_service_payment_with_http_info(user_id, account_service_id, opts)
      data
    end

    # Get billing information.
    # @param user_id
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :on_date
    # @return [Array<(APIAccountServicePayment, Integer, Hash)>] APIAccountServicePayment data, response status code and response headers
    def get_account_service_payment_with_http_info(user_id, account_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_account_service_payment ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_account_service_payment"
      end
      # verify the required parameter 'account_service_id' is set
      if @api_client.config.client_side_validation && account_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_service_id' when calling AllEndpointsApi.get_account_service_payment"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account-services/{accountServiceId}/billing-period'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accountServiceId' + '}', account_service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'onDate'] = opts[:'on_date'] if !opts[:'on_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccountServicePayment'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_account_service_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;cbtId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;cbtid_eq_value&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;starttime_eq_1700230366179&lt;br&gt;filter&#x3D;_endtime_eq_1700230366179&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAccountService]
    def get_account_services(opts = {})
      data, _status_code, _headers = get_account_services_with_http_info(opts)
      data
    end

    # Get account services.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;cbtId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;cbtid_eq_value&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;starttime_eq_1700230366179&lt;br&gt;filter&#x3D;_endtime_eq_1700230366179&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAccountService, Integer, Hash)>] APIListAPIAccountService data, response status code and response headers
    def get_account_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_account_services ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/account-services'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAccountService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_account_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get activities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;userAgent_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;body_a&lt;br&gt;sort&#x3D;httpMethod_a&lt;br&gt;sort&#x3D;parameters_a&lt;br&gt;sort&#x3D;uri_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;deprecatedResource_a&lt;br&gt;sort&#x3D;accept_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1700230366162&lt;br&gt;filter&#x3D;useragent_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;body_eq_value&lt;br&gt;filter&#x3D;httpmethod_eq_get&lt;br&gt;filter&#x3D;parameters_eq_value&lt;br&gt;filter&#x3D;uri_eq_value&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;deprecatedresource_eq_true&lt;br&gt;filter&#x3D;accept_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIActivity]
    def get_activities(opts = {})
      data, _status_code, _headers = get_activities_with_http_info(opts)
      data
    end

    # Get activities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;userAgent_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;body_a&lt;br&gt;sort&#x3D;httpMethod_a&lt;br&gt;sort&#x3D;parameters_a&lt;br&gt;sort&#x3D;uri_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;deprecatedResource_a&lt;br&gt;sort&#x3D;accept_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1700230366162&lt;br&gt;filter&#x3D;useragent_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;body_eq_value&lt;br&gt;filter&#x3D;httpmethod_eq_get&lt;br&gt;filter&#x3D;parameters_eq_value&lt;br&gt;filter&#x3D;uri_eq_value&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;deprecatedresource_eq_true&lt;br&gt;filter&#x3D;accept_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIActivity, Integer, Hash)>] APIListAPIActivity data, response status code and response headers
    def get_activities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_activities ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/activities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIActivity'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get additional users.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;serviceIds_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;deleteTime_a&lt;br&gt;sort&#x3D;accountServiceIds_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;serviceids_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364459&lt;br&gt;filter&#x3D;deletetime_eq_1700230364459&lt;br&gt;filter&#x3D;accountserviceids_eq_1&lt;br&gt;filter&#x3D;ismainuser_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value&lt;br&gt;filter&#x3D;status_eq_inactive
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUser]
    def get_additional_users(user_id, opts = {})
      data, _status_code, _headers = get_additional_users_with_http_info(user_id, opts)
      data
    end

    # Get additional users.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;serviceIds_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;deleteTime_a&lt;br&gt;sort&#x3D;accountServiceIds_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;serviceids_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364459&lt;br&gt;filter&#x3D;deletetime_eq_1700230364459&lt;br&gt;filter&#x3D;accountserviceids_eq_1&lt;br&gt;filter&#x3D;ismainuser_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value&lt;br&gt;filter&#x3D;status_eq_inactive
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUser, Integer, Hash)>] APIListAPIUser data, response status code and response headers
    def get_additional_users_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_additional_users ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_additional_users"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account/additional-users'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_additional_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [APIAdminDevice]
    def get_admin_device(device_id, opts = {})
      data, _status_code, _headers = get_admin_device_with_http_info(device_id, opts)
      data
    end

    # Get device.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminDevice, Integer, Hash)>] APIAdminDevice data, response status code and response headers
    def get_admin_device_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_admin_device ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.get_admin_device"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_admin_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days  (default to 30)
    # @return [APIAdminDeviceSessionStatistics]
    def get_admin_test_runs(opts = {})
      data, _status_code, _headers = get_admin_test_runs_with_http_info(opts)
      data
    end

    # Get device session statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days
    # @return [Array<(APIAdminDeviceSessionStatistics, Integer, Hash)>] APIAdminDeviceSessionStatistics data, response status code and response headers
    def get_admin_test_runs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_admin_test_runs ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/statistics/device-sessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminDeviceSessionStatistics'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_admin_test_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230365771&lt;br&gt;filter&#x3D;starttime_eq_1700230365771&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminTestRun]
    def get_admin_test_runs1(opts = {})
      data, _status_code, _headers = get_admin_test_runs1_with_http_info(opts)
      data
    end

    # Get test runs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230365771&lt;br&gt;filter&#x3D;starttime_eq_1700230365771&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminTestRun, Integer, Hash)>] APIListAPIAdminTestRun data, response status code and response headers
    def get_admin_test_runs1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_admin_test_runs1 ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/runs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminTestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_admin_test_runs1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get billing periods.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;additionalHoursPrice_a&lt;br&gt;sort&#x3D;mail_a&lt;br&gt;sort&#x3D;totalPrice_a&lt;br&gt;sort&#x3D;startBillingPeriod_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;_endBillingPeriod_a&lt;br&gt;sort&#x3D;subscriptionEnd_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;servicePrice_a&lt;br&gt;sort&#x3D;lastPaymentDate_a&lt;br&gt;sort&#x3D;subscriptionStart_a&lt;br&gt;sort&#x3D;additionalHours_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;additionalHoursPaymentDate_a&lt;br&gt;sort&#x3D;paymentDate_a&lt;br&gt;sort&#x3D;plan_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;additionalhoursprice_eq_1&lt;br&gt;filter&#x3D;mail_eq_value&lt;br&gt;filter&#x3D;totalprice_eq_1&lt;br&gt;filter&#x3D;startbillingperiod_eq_1700230366157&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;_endbillingperiod_eq_1700230366157&lt;br&gt;filter&#x3D;subscriptionend_eq_1700230366157&lt;br&gt;filter&#x3D;createtime_eq_1700230366157&lt;br&gt;filter&#x3D;serviceprice_eq_1&lt;br&gt;filter&#x3D;lastpaymentdate_eq_1700230366157&lt;br&gt;filter&#x3D;paid_eq_true&lt;br&gt;filter&#x3D;subscriptionstart_eq_1700230366157&lt;br&gt;filter&#x3D;additionalhours_eq_1&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;plan_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIBillingPeriod]
    def get_all_billing_periods(opts = {})
      data, _status_code, _headers = get_all_billing_periods_with_http_info(opts)
      data
    end

    # Get billing periods.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;additionalHoursPrice_a&lt;br&gt;sort&#x3D;mail_a&lt;br&gt;sort&#x3D;totalPrice_a&lt;br&gt;sort&#x3D;startBillingPeriod_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;_endBillingPeriod_a&lt;br&gt;sort&#x3D;subscriptionEnd_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;servicePrice_a&lt;br&gt;sort&#x3D;lastPaymentDate_a&lt;br&gt;sort&#x3D;subscriptionStart_a&lt;br&gt;sort&#x3D;additionalHours_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;additionalHoursPaymentDate_a&lt;br&gt;sort&#x3D;paymentDate_a&lt;br&gt;sort&#x3D;plan_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;additionalhoursprice_eq_1&lt;br&gt;filter&#x3D;mail_eq_value&lt;br&gt;filter&#x3D;totalprice_eq_1&lt;br&gt;filter&#x3D;startbillingperiod_eq_1700230366157&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;_endbillingperiod_eq_1700230366157&lt;br&gt;filter&#x3D;subscriptionend_eq_1700230366157&lt;br&gt;filter&#x3D;createtime_eq_1700230366157&lt;br&gt;filter&#x3D;serviceprice_eq_1&lt;br&gt;filter&#x3D;lastpaymentdate_eq_1700230366157&lt;br&gt;filter&#x3D;paid_eq_true&lt;br&gt;filter&#x3D;subscriptionstart_eq_1700230366157&lt;br&gt;filter&#x3D;additionalhours_eq_1&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;plan_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIBillingPeriod, Integer, Hash)>] APIListAPIBillingPeriod data, response status code and response headers
    def get_all_billing_periods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_all_billing_periods ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/billing-periods'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIBillingPeriod'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_all_billing_periods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps of all device sessions in run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSessionStep]
    def get_all_test_run_device_session_steps(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_all_test_run_device_session_steps_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Get device session steps of all device sessions in run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSessionStep, Integer, Hash)>] APIListAPIDeviceSessionStep data, response status code and response headers
    def get_all_test_run_device_session_steps_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_all_test_run_device_session_steps ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_all_test_run_device_session_steps"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_all_test_run_device_session_steps"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_all_test_run_device_session_steps"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/steps'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_all_test_run_device_session_steps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps of all device sessions in run.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSessionStep]
    def get_all_test_run_device_session_steps1(run_id, opts = {})
      data, _status_code, _headers = get_all_test_run_device_session_steps1_with_http_info(run_id, opts)
      data
    end

    # Get device session steps of all device sessions in run.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSessionStep, Integer, Hash)>] APIListAPIDeviceSessionStep data, response status code and response headers
    def get_all_test_run_device_session_steps1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_all_test_run_device_session_steps1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_all_test_run_device_session_steps1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/steps'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_all_test_run_device_session_steps1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps of all device sessions in run.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSessionStep]
    def get_all_test_run_device_session_steps2(project_id, run_id, opts = {})
      data, _status_code, _headers = get_all_test_run_device_session_steps2_with_http_info(project_id, run_id, opts)
      data
    end

    # Get device session steps of all device sessions in run.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSessionStep, Integer, Hash)>] APIListAPIDeviceSessionStep data, response status code and response headers
    def get_all_test_run_device_session_steps2_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_all_test_run_device_session_steps2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_all_test_run_device_session_steps2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_all_test_run_device_session_steps2"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/steps'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_all_test_run_device_session_steps2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get label.
    # @param group_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceProperty]
    def get_api_label(group_id, label_id, opts = {})
      data, _status_code, _headers = get_api_label_with_http_info(group_id, label_id, opts)
      data
    end

    # Get label.
    # @param group_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceProperty, Integer, Hash)>] APIDeviceProperty data, response status code and response headers
    def get_api_label_with_http_info(group_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_api_label ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AllEndpointsApi.get_api_label"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AllEndpointsApi.get_api_label"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}/labels/{labelId}'.sub('{' + 'groupId' + '}', group_id.to_s).sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_api_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get label group.
    # @param group_id
    # @param [Hash] opts the optional parameters
    # @return [APILabelGroup]
    def get_api_label_group(group_id, opts = {})
      data, _status_code, _headers = get_api_label_group_with_http_info(group_id, opts)
      data
    end

    # Get label group.
    # @param group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILabelGroup, Integer, Hash)>] APILabelGroup data, response status code and response headers
    def get_api_label_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_api_label_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AllEndpointsApi.get_api_label_group"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}'.sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APILabelGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_api_label_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get property.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIProperty]
    def get_api_property(id, opts = {})
      data, _status_code, _headers = get_api_property_with_http_info(id, opts)
      data
    end

    # Get property.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProperty, Integer, Hash)>] APIProperty data, response status code and response headers
    def get_api_property_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_api_property ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_api_property"
      end
      # resource path
      local_var_path = '/api/v2/properties/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_api_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get available frameworks.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;canRunFromUI_a&lt;br&gt;sort&#x3D;retryable_a&lt;br&gt;sort&#x3D;skipQueue_a&lt;br&gt;sort&#x3D;forProjects_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;labelId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;jobConfigId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelName_a&lt;br&gt;sort&#x3D;secured_a&lt;br&gt;sort&#x3D;skipOlderSdk_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;canrunfromui_eq_true&lt;br&gt;filter&#x3D;retryable_eq_true&lt;br&gt;filter&#x3D;skipqueue_eq_true&lt;br&gt;filter&#x3D;forprojects_eq_true&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;type_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;labelid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364439&lt;br&gt;filter&#x3D;jobconfigid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelname_eq_value&lt;br&gt;filter&#x3D;secured_eq_true&lt;br&gt;filter&#x3D;skipoldersdk_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIFramework]
    def get_available_frameworks(user_id, opts = {})
      data, _status_code, _headers = get_available_frameworks_with_http_info(user_id, opts)
      data
    end

    # Get available frameworks.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;canRunFromUI_a&lt;br&gt;sort&#x3D;retryable_a&lt;br&gt;sort&#x3D;skipQueue_a&lt;br&gt;sort&#x3D;forProjects_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;labelId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;jobConfigId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelName_a&lt;br&gt;sort&#x3D;secured_a&lt;br&gt;sort&#x3D;skipOlderSdk_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;canrunfromui_eq_true&lt;br&gt;filter&#x3D;retryable_eq_true&lt;br&gt;filter&#x3D;skipqueue_eq_true&lt;br&gt;filter&#x3D;forprojects_eq_true&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;type_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;labelid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364439&lt;br&gt;filter&#x3D;jobconfigid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelname_eq_value&lt;br&gt;filter&#x3D;secured_eq_true&lt;br&gt;filter&#x3D;skipoldersdk_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIFramework, Integer, Hash)>] APIListAPIFramework data, response status code and response headers
    def get_available_frameworks_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_available_frameworks ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_available_frameworks"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/available-frameworks'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIFramework'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_available_frameworks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get available services.
    # For logged in users
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;pricePerHour_a&lt;br&gt;sort&#x3D;centPrice_a&lt;br&gt;sort&#x3D;customPlan_a&lt;br&gt;sort&#x3D;includedHours_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;commonId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;activated_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230363752&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;activatetime_eq_1700230363752&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;priceperhour_eq_1&lt;br&gt;filter&#x3D;centprice_eq_1&lt;br&gt;filter&#x3D;customplan_eq_true&lt;br&gt;filter&#x3D;includedhours_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;commonid_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;activated_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIService]
    def get_available_services(user_id, opts = {})
      data, _status_code, _headers = get_available_services_with_http_info(user_id, opts)
      data
    end

    # Get available services.
    # For logged in users
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;pricePerHour_a&lt;br&gt;sort&#x3D;centPrice_a&lt;br&gt;sort&#x3D;customPlan_a&lt;br&gt;sort&#x3D;includedHours_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;commonId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;activated_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230363752&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;activatetime_eq_1700230363752&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;priceperhour_eq_1&lt;br&gt;filter&#x3D;centprice_eq_1&lt;br&gt;filter&#x3D;customplan_eq_true&lt;br&gt;filter&#x3D;includedhours_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;commonid_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;activated_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIService, Integer, Hash)>] APIListAPIService data, response status code and response headers
    def get_available_services_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_available_services ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_available_services"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/services/available'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_available_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get available services.
    # For not logged in users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;pricePerHour_a&lt;br&gt;sort&#x3D;centPrice_a&lt;br&gt;sort&#x3D;customPlan_a&lt;br&gt;sort&#x3D;includedHours_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;commonId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;activated_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230364570&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;activatetime_eq_1700230364571&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;priceperhour_eq_1&lt;br&gt;filter&#x3D;centprice_eq_1&lt;br&gt;filter&#x3D;customplan_eq_true&lt;br&gt;filter&#x3D;includedhours_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;commonid_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;activated_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIService]
    def get_available_services1(opts = {})
      data, _status_code, _headers = get_available_services1_with_http_info(opts)
      data
    end

    # Get available services.
    # For not logged in users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;pricePerHour_a&lt;br&gt;sort&#x3D;centPrice_a&lt;br&gt;sort&#x3D;customPlan_a&lt;br&gt;sort&#x3D;includedHours_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;commonId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;activated_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230364570&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;activatetime_eq_1700230364571&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;priceperhour_eq_1&lt;br&gt;filter&#x3D;centprice_eq_1&lt;br&gt;filter&#x3D;customplan_eq_true&lt;br&gt;filter&#x3D;includedhours_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;commonid_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;activated_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIService, Integer, Hash)>] APIListAPIService data, response status code and response headers
    def get_available_services1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_available_services1 ...'
      end
      # resource path
      local_var_path = '/api/v2/services/available'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_available_services1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get property of banned application.
    # @param test_run_id
    # @param [Hash] opts the optional parameters
    # @return [APIProperty]
    def get_ban_application(test_run_id, opts = {})
      data, _status_code, _headers = get_ban_application_with_http_info(test_run_id, opts)
      data
    end

    # Get property of banned application.
    # @param test_run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProperty, Integer, Hash)>] APIProperty data, response status code and response headers
    def get_ban_application_with_http_info(test_run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_ban_application ...'
      end
      # verify the required parameter 'test_run_id' is set
      if @api_client.config.client_side_validation && test_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'test_run_id' when calling AllEndpointsApi.get_ban_application"
      end
      # resource path
      local_var_path = '/api/v2/properties/app-bans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'testRunId'] = test_run_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_ban_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get billing period.
    # @param user_id
    # @param billing_period_id
    # @param [Hash] opts the optional parameters
    # @return [APIBillingPeriod]
    def get_billing_period(user_id, billing_period_id, opts = {})
      data, _status_code, _headers = get_billing_period_with_http_info(user_id, billing_period_id, opts)
      data
    end

    # Get billing period.
    # @param user_id
    # @param billing_period_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIBillingPeriod, Integer, Hash)>] APIBillingPeriod data, response status code and response headers
    def get_billing_period_with_http_info(user_id, billing_period_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_billing_period ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_billing_period"
      end
      # verify the required parameter 'billing_period_id' is set
      if @api_client.config.client_side_validation && billing_period_id.nil?
        fail ArgumentError, "Missing the required parameter 'billing_period_id' when calling AllEndpointsApi.get_billing_period"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/billing-periods/{billingPeriodId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'billingPeriodId' + '}', billing_period_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIBillingPeriod'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_billing_period\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get browser.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIBrowser]
    def get_browser(id, opts = {})
      data, _status_code, _headers = get_browser_with_http_info(id, opts)
      data
    end

    # Get browser.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIBrowser, Integer, Hash)>] APIBrowser data, response status code and response headers
    def get_browser_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_browser ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_browser"
      end
      # resource path
      local_var_path = '/api/v2/admin/browsers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIBrowser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_browser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get browsers.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;version_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIBrowser]
    def get_browsers(opts = {})
      data, _status_code, _headers = get_browsers_with_http_info(opts)
      data
    end

    # Get browsers.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;version_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIBrowser, Integer, Hash)>] APIListAPIBrowser data, response status code and response headers
    def get_browsers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_browsers ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/browsers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIBrowser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_browsers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification scopes for user and channel.
    # @param channel
    # @param [Hash] opts the optional parameters
    # @return [APIListAPIEnum]
    def get_channel_scopes(channel, opts = {})
      data, _status_code, _headers = get_channel_scopes_with_http_info(channel, opts)
      data
    end

    # Get notification scopes for user and channel.
    # @param channel
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPIEnum, Integer, Hash)>] APIListAPIEnum data, response status code and response headers
    def get_channel_scopes_with_http_info(channel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_channel_scopes ...'
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling AllEndpointsApi.get_channel_scopes"
      end
      # resource path
      local_var_path = '/api/v2/users/*/notifications/channels/{channel}/scopes'.sub('{' + 'channel' + '}', channel.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIEnum'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_channel_scopes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification channels.
    # @param [Hash] opts the optional parameters
    # @return [APIListAPIEnum]
    def get_channels(opts = {})
      data, _status_code, _headers = get_channels_with_http_info(opts)
      data
    end

    # Get notification channels.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPIEnum, Integer, Hash)>] APIListAPIEnum data, response status code and response headers
    def get_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_channels ...'
      end
      # resource path
      local_var_path = '/api/v2/users/*/notifications/channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIEnum'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get cluster.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_devices
    # @return [APICluster]
    def get_cluster_by_id(id, opts = {})
      data, _status_code, _headers = get_cluster_by_id_with_http_info(id, opts)
      data
    end

    # Get cluster.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_devices
    # @return [Array<(APICluster, Integer, Hash)>] APICluster data, response status code and response headers
    def get_cluster_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_cluster_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_cluster_by_id"
      end
      # resource path
      local_var_path = '/api/v2/clusters/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withDevices'] = opts[:'with_devices'] if !opts[:'with_devices'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APICluster'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_cluster_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get cluster devices.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;manufacturer_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;dedicationEndTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1700230365659&lt;br&gt;filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1700230365659&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;dedicationendtime_eq_1700230365659&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;locked_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminDevice]
    def get_cluster_devices(id, opts = {})
      data, _status_code, _headers = get_cluster_devices_with_http_info(id, opts)
      data
    end

    # Get cluster devices.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;manufacturer_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;dedicationEndTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1700230365659&lt;br&gt;filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1700230365659&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;dedicationendtime_eq_1700230365659&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;locked_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminDevice, Integer, Hash)>] APIListAPIAdminDevice data, response status code and response headers
    def get_cluster_devices_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_cluster_devices ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_cluster_devices"
      end
      # resource path
      local_var_path = '/api/v2/clusters/{id}/devices'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_cluster_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;ipAddress_a&lt;br&gt;sort&#x3D;jenkinsVersion_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;url_a&lt;br&gt;sort&#x3D;pluginVersion_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;location_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;region_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1700230365631&lt;br&gt;filter&#x3D;ipaddress_eq_value&lt;br&gt;filter&#x3D;jenkinsversion_eq_value&lt;br&gt;filter&#x3D;type_eq_bare_metal&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;url_eq_value&lt;br&gt;filter&#x3D;pluginversion_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1700230365631&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline&lt;br&gt;filter&#x3D;region_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPICluster]
    def get_clusters(opts = {})
      data, _status_code, _headers = get_clusters_with_http_info(opts)
      data
    end

    # Get clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;ipAddress_a&lt;br&gt;sort&#x3D;jenkinsVersion_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;url_a&lt;br&gt;sort&#x3D;pluginVersion_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;location_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;region_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1700230365631&lt;br&gt;filter&#x3D;ipaddress_eq_value&lt;br&gt;filter&#x3D;jenkinsversion_eq_value&lt;br&gt;filter&#x3D;type_eq_bare_metal&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;url_eq_value&lt;br&gt;filter&#x3D;pluginversion_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1700230365631&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline&lt;br&gt;filter&#x3D;region_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPICluster, Integer, Hash)>] APIListAPICluster data, response status code and response headers
    def get_clusters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_clusters ...'
      end
      # resource path
      local_var_path = '/api/v2/clusters'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPICluster'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_clusters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device model criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceModelCriterion]
    def get_criteria(opts = {})
      data, _status_code, _headers = get_criteria_with_http_info(opts)
      data
    end

    # Get device model criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceModelCriterion, Integer, Hash)>] APIListAPIDeviceModelCriterion data, response status code and response headers
    def get_criteria_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_criteria ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-model-criteria'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceModelCriterion'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current device session step.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_current_device_session_step(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_current_device_session_step_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Get current device session step.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Integer, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_current_device_session_step_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_current_device_session_step ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_current_device_session_step"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_current_device_session_step"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_current_device_session_step"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_current_device_session_step"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps/current'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_current_device_session_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current device session step.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_current_device_session_step1(run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_current_device_session_step1_with_http_info(run_id, device_session_id, opts)
      data
    end

    # Get current device session step.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Integer, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_current_device_session_step1_with_http_info(run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_current_device_session_step1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_current_device_session_step1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_current_device_session_step1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/steps/current'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_current_device_session_step1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current device session step.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_current_device_session_step2(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_current_device_session_step2_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Get current device session step.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Integer, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_current_device_session_step2_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_current_device_session_step2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_current_device_session_step2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_current_device_session_step2"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_current_device_session_step2"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps/current'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_current_device_session_step2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current device session step.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_current_device_session_step3(device_session_id, opts = {})
      data, _status_code, _headers = get_current_device_session_step3_with_http_info(device_session_id, opts)
      data
    end

    # Get current device session step.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Integer, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_current_device_session_step3_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_current_device_session_step3 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_current_device_session_step3"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/steps/current'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_current_device_session_step3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get desktop browser capabilities.
    # @param [Hash] opts the optional parameters
    # @return [APIDesktopBrowserCapabilities]
    def get_desktop_browser_capabilities(opts = {})
      data, _status_code, _headers = get_desktop_browser_capabilities_with_http_info(opts)
      data
    end

    # Get desktop browser capabilities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDesktopBrowserCapabilities, Integer, Hash)>] APIDesktopBrowserCapabilities data, response status code and response headers
    def get_desktop_browser_capabilities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_desktop_browser_capabilities ...'
      end
      # resource path
      local_var_path = '/api/v2/devices/desktop-browser-capabilities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDesktopBrowserCapabilities'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_desktop_browser_capabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_dedicated  (default to false)
    # @option opts [BOOLEAN] :with_disabled  (default to false)
    # @option opts [BOOLEAN] :with_browsers  (default to false)
    # @return [APIDevice]
    def get_device(device_id, opts = {})
      data, _status_code, _headers = get_device_with_http_info(device_id, opts)
      data
    end

    # Get device.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_dedicated
    # @option opts [BOOLEAN] :with_disabled
    # @option opts [BOOLEAN] :with_browsers
    # @return [Array<(APIDevice, Integer, Hash)>] APIDevice data, response status code and response headers
    def get_device_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.get_device"
      end
      # resource path
      local_var_path = '/api/v2/devices/{deviceId}'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withDedicated'] = opts[:'with_dedicated'] if !opts[:'with_dedicated'].nil?
      query_params[:'withDisabled'] = opts[:'with_disabled'] if !opts[:'with_disabled'].nil?
      query_params[:'withBrowsers'] = opts[:'with_browsers'] if !opts[:'with_browsers'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device browsers.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;version_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIBrowser]
    def get_device_browsers(device_id, opts = {})
      data, _status_code, _headers = get_device_browsers_with_http_info(device_id, opts)
      data
    end

    # Get device browsers.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;version_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIBrowser, Integer, Hash)>] APIListAPIBrowser data, response status code and response headers
    def get_device_browsers_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_browsers ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.get_device_browsers"
      end
      # resource path
      local_var_path = '/api/v2/devices/{deviceId}/browsers'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIBrowser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_browsers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device specific cleanup configuration.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceCleanupConfiguration]
    def get_device_cleanup_configuration(device_id, opts = {})
      data, _status_code, _headers = get_device_cleanup_configuration_with_http_info(device_id, opts)
      data
    end

    # Get device specific cleanup configuration.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceCleanupConfiguration, Integer, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def get_device_cleanup_configuration_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_cleanup_configuration ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.get_device_cleanup_configuration"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/cleanup-configuration'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceCleanupConfiguration'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_cleanup_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device cleanup configuration.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceCleanupConfiguration]
    def get_device_cleanup_configuration1(id, opts = {})
      data, _status_code, _headers = get_device_cleanup_configuration1_with_http_info(id, opts)
      data
    end

    # Get device cleanup configuration.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceCleanupConfiguration, Integer, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def get_device_cleanup_configuration1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_cleanup_configuration1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_device_cleanup_configuration1"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceCleanupConfiguration'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_cleanup_configuration1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device cleanup configurations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createdByEmail_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;lastModificationTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;global_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;content_a&lt;br&gt;sort&#x3D;createdById_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;discriminator_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createdbyemail_eq_value&lt;br&gt;filter&#x3D;createtime_eq_1700230365974&lt;br&gt;filter&#x3D;lastmodificationtime_eq_1700230365974&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;global_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;content_eq_value&lt;br&gt;filter&#x3D;createdbyid_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;discriminator_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceCleanupConfiguration]
    def get_device_cleanup_configurations(opts = {})
      data, _status_code, _headers = get_device_cleanup_configurations_with_http_info(opts)
      data
    end

    # Get device cleanup configurations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createdByEmail_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;lastModificationTime_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;global_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;content_a&lt;br&gt;sort&#x3D;createdById_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;discriminator_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createdbyemail_eq_value&lt;br&gt;filter&#x3D;createtime_eq_1700230365974&lt;br&gt;filter&#x3D;lastmodificationtime_eq_1700230365974&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;global_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;content_eq_value&lt;br&gt;filter&#x3D;createdbyid_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;discriminator_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceCleanupConfiguration, Integer, Hash)>] APIListAPIDeviceCleanupConfiguration data, response status code and response headers
    def get_device_cleanup_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_cleanup_configurations ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceCleanupConfiguration'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_cleanup_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceGroup]
    def get_device_group(device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_with_http_info(device_group_id, opts)
      data
    end

    # Get device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def get_device_group_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_group ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.get_device_group"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group devices.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230364388&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDevice]
    def get_device_group_devices(user_id, device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_devices_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Get device group devices.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230364388&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDevice, Integer, Hash)>] APIListAPIDevice data, response status code and response headers
    def get_device_group_devices_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_group_devices ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_device_group_devices"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.get_device_group_devices"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/devices'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withProperties'] = opts[:'with_properties'] if !opts[:'with_properties'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_group_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group devices.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230365585&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDevice]
    def get_device_group_devices1(device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_devices1_with_http_info(device_group_id, opts)
      data
    end

    # Get device group devices.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230365585&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDevice, Integer, Hash)>] APIListAPIDevice data, response status code and response headers
    def get_device_group_devices1_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_group_devices1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.get_device_group_devices1"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/devices'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withProperties'] = opts[:'with_properties'] if !opts[:'with_properties'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_group_devices1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group selectors.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceProperty]
    def get_device_group_selectors(user_id, device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_selectors_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Get device group selectors.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceProperty, Integer, Hash)>] APIListAPIDeviceProperty data, response status code and response headers
    def get_device_group_selectors_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_group_selectors ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_device_group_selectors"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.get_device_group_selectors"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/selectors'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_group_selectors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group selectors.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceProperty]
    def get_device_group_selectors1(device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_selectors1_with_http_info(device_group_id, opts)
      data
    end

    # Get device group selectors.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceProperty, Integer, Hash)>] APIListAPIDeviceProperty data, response status code and response headers
    def get_device_group_selectors1_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_group_selectors1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.get_device_group_selectors1"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/selectors'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_group_selectors1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceGroup]
    def get_device_groups(opts = {})
      data, _status_code, _headers = get_device_groups_with_http_info(opts)
      data
    end

    # Get device groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceGroup, Integer, Hash)>] APIListAPIDeviceGroup data, response status code and response headers
    def get_device_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_groups ...'
      end
      # resource path
      local_var_path = '/api/v2/device-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device labels.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceProperty]
    def get_device_labels(device_id, opts = {})
      data, _status_code, _headers = get_device_labels_with_http_info(device_id, opts)
      data
    end

    # Get device labels.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceProperty, Integer, Hash)>] APIListAPIDeviceProperty data, response status code and response headers
    def get_device_labels_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_labels ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.get_device_labels"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/labels'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device labels.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceProperty]
    def get_device_labels1(device_id, opts = {})
      data, _status_code, _headers = get_device_labels1_with_http_info(device_id, opts)
      data
    end

    # Get device labels.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceProperty, Integer, Hash)>] APIListAPIDeviceProperty data, response status code and response headers
    def get_device_labels1_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_labels1 ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.get_device_labels1"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/properties'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_labels1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device model browsers.
    # @param device_model_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;version_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIBrowser]
    def get_device_model_browsers(device_model_id, opts = {})
      data, _status_code, _headers = get_device_model_browsers_with_http_info(device_model_id, opts)
      data
    end

    # Get device model browsers.
    # @param device_model_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;version_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIBrowser, Integer, Hash)>] APIListAPIBrowser data, response status code and response headers
    def get_device_model_browsers_with_http_info(device_model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_model_browsers ...'
      end
      # verify the required parameter 'device_model_id' is set
      if @api_client.config.client_side_validation && device_model_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_model_id' when calling AllEndpointsApi.get_device_model_browsers"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-models/{deviceModelId}/browsers'.sub('{' + 'deviceModelId' + '}', device_model_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIBrowser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_model_browsers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device model browsers.
    # @param serial_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;version_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIBrowser]
    def get_device_model_browsers1(serial_id, opts = {})
      data, _status_code, _headers = get_device_model_browsers1_with_http_info(serial_id, opts)
      data
    end

    # Get device model browsers.
    # @param serial_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;version_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIBrowser, Integer, Hash)>] APIListAPIBrowser data, response status code and response headers
    def get_device_model_browsers1_with_http_info(serial_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_model_browsers1 ...'
      end
      # verify the required parameter 'serial_id' is set
      if @api_client.config.client_side_validation && serial_id.nil?
        fail ArgumentError, "Missing the required parameter 'serial_id' when calling AllEndpointsApi.get_device_model_browsers1"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-models/browsers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serialId'] = serial_id
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIBrowser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_model_browsers1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device model pool.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceModelPool]
    def get_device_model_pool(id, opts = {})
      data, _status_code, _headers = get_device_model_pool_with_http_info(id, opts)
      data
    end

    # Get device model pool.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceModelPool, Integer, Hash)>] APIDeviceModelPool data, response status code and response headers
    def get_device_model_pool_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_model_pool ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_device_model_pool"
      end
      # resource path
      local_var_path = '/api/v2/admin/pools/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceModelPool'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_model_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device model pools statistics.
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceModelPoolStatistics]
    def get_device_model_pool_statistics(opts = {})
      data, _status_code, _headers = get_device_model_pool_statistics_with_http_info(opts)
      data
    end

    # Get device model pools statistics.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceModelPoolStatistics, Integer, Hash)>] APIDeviceModelPoolStatistics data, response status code and response headers
    def get_device_model_pool_statistics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_model_pool_statistics ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/pools/statistics'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceModelPoolStatistics'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_model_pool_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device model pools.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;retentionStrategy_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;location_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;retentionstrategy_eq_cluster_on_off&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceModelPool]
    def get_device_model_pools(opts = {})
      data, _status_code, _headers = get_device_model_pools_with_http_info(opts)
      data
    end

    # Get device model pools.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;retentionStrategy_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;location_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;enabled_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;retentionstrategy_eq_cluster_on_off&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;enabled_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceModelPool, Integer, Hash)>] APIListAPIDeviceModelPool data, response status code and response headers
    def get_device_model_pools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_model_pools ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/pools'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceModelPool'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_model_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device models.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_sessions_info
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;total_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;online_a&lt;br&gt;sort&#x3D;location_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;dedicated_eq_true&lt;br&gt;filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;total_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_1&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminDeviceModel]
    def get_device_models(opts = {})
      data, _status_code, _headers = get_device_models_with_http_info(opts)
      data
    end

    # Get device models.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_sessions_info
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;total_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;online_a&lt;br&gt;sort&#x3D;location_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;dedicated_eq_true&lt;br&gt;filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;total_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_1&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminDeviceModel, Integer, Hash)>] APIListAPIAdminDeviceModel data, response status code and response headers
    def get_device_models_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_models ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-models'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withSessionsInfo'] = opts[:'with_sessions_info'] if !opts[:'with_sessions_info'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminDeviceModel'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_models\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicefiltergroup.name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIDevicePicker]
    def get_device_picker(opts = {})
      data, _status_code, _headers = get_device_picker_with_http_info(opts)
      data
    end

    # Get device properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicefiltergroup.name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIDevicePicker, Integer, Hash)>] APIDevicePicker data, response status code and response headers
    def get_device_picker_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_picker ...'
      end
      # resource path
      local_var_path = '/api/v2/devices/filters'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDevicePicker'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_picker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device problems.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;clusterName_a&lt;br&gt;sort&#x3D;clusterId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;deviceName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;clustername_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;clusterid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminDeviceProblem]
    def get_device_problems(opts = {})
      data, _status_code, _headers = get_device_problems_with_http_info(opts)
      data
    end

    # Get device problems.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;clusterName_a&lt;br&gt;sort&#x3D;clusterId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;deviceName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;clustername_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;clusterid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminDeviceProblem, Integer, Hash)>] APIListAPIAdminDeviceProblem data, response status code and response headers
    def get_device_problems_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_problems ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-problems'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminDeviceProblem'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_problems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device properties.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceProperty]
    def get_device_properties(device_id, opts = {})
      data, _status_code, _headers = get_device_properties_with_http_info(device_id, opts)
      data
    end

    # Get device properties.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceProperty, Integer, Hash)>] APIListAPIDeviceProperty data, response status code and response headers
    def get_device_properties_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_properties ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.get_device_properties"
      end
      # resource path
      local_var_path = '/api/v2/devices/{deviceId}/properties'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device queue.
    # Ignores sort value. Sorts by order in queue.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;startedByDisplayName_a&lt;br&gt;sort&#x3D;currentStepType_a&lt;br&gt;sort&#x3D;deviceModel.id_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;priority_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230365957&lt;br&gt;filter&#x3D;startedbydisplayname_eq_value&lt;br&gt;filter&#x3D;currentsteptype_eq_waiting&lt;br&gt;filter&#x3D;devicemodel.id_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;priority_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365957&lt;br&gt;filter&#x3D;starttime_eq_1700230365957&lt;br&gt;filter&#x3D;_endtime_eq_1700230365957&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminDeviceSession]
    def get_device_queue(device_id, opts = {})
      data, _status_code, _headers = get_device_queue_with_http_info(device_id, opts)
      data
    end

    # Get device queue.
    # Ignores sort value. Sorts by order in queue.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;startedByDisplayName_a&lt;br&gt;sort&#x3D;currentStepType_a&lt;br&gt;sort&#x3D;deviceModel.id_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;priority_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230365957&lt;br&gt;filter&#x3D;startedbydisplayname_eq_value&lt;br&gt;filter&#x3D;currentsteptype_eq_waiting&lt;br&gt;filter&#x3D;devicemodel.id_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;priority_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365957&lt;br&gt;filter&#x3D;starttime_eq_1700230365957&lt;br&gt;filter&#x3D;_endtime_eq_1700230365957&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminDeviceSession, Integer, Hash)>] APIListAPIAdminDeviceSession data, response status code and response headers
    def get_device_queue_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_queue ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.get_device_queue"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}/queue'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :test_run_id
    # @return [APIDeviceSession]
    def get_device_session(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_with_http_info(device_session_id, opts)
      data
    end

    # Get device session.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :test_run_id
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def get_device_session_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session commands.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPICommand]
    def get_device_session_commands(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_commands_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session commands.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPICommand, Integer, Hash)>] APIListAPICommand data, response status code and response headers
    def get_device_session_commands_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_commands ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_device_session_commands"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_device_session_commands"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_commands"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_commands"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/commands'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPICommand'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_commands\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session commands.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPICommand]
    def get_device_session_commands1(run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_commands1_with_http_info(run_id, device_session_id, opts)
      data
    end

    # Get device session commands.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPICommand, Integer, Hash)>] APIListAPICommand data, response status code and response headers
    def get_device_session_commands1_with_http_info(run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_commands1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_commands1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_commands1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/commands'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPICommand'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_commands1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session commands.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPICommand]
    def get_device_session_commands2(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_commands2_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session commands.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPICommand, Integer, Hash)>] APIListAPICommand data, response status code and response headers
    def get_device_session_commands2_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_commands2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_device_session_commands2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_commands2"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_commands2"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/commands'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPICommand'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_commands2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session commands.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPICommand]
    def get_device_session_commands3(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_commands3_with_http_info(device_session_id, opts)
      data
    end

    # Get device session commands.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPICommand, Integer, Hash)>] APIListAPICommand data, response status code and response headers
    def get_device_session_commands3_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_commands3 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_commands3"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/commands'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPICommand'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_commands3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get connections for device session.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;path_a&lt;br&gt;sort&#x3D;password_a&lt;br&gt;sort&#x3D;urlSchema_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;port_a&lt;br&gt;sort&#x3D;host_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;path_eq_value&lt;br&gt;filter&#x3D;password_eq_value&lt;br&gt;filter&#x3D;urlschema_eq_value&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364360&lt;br&gt;filter&#x3D;port_eq_1&lt;br&gt;filter&#x3D;host_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230364360&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIConnection]
    def get_device_session_connections(user_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_connections_with_http_info(user_id, device_session_id, opts)
      data
    end

    # Get connections for device session.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;path_a&lt;br&gt;sort&#x3D;password_a&lt;br&gt;sort&#x3D;urlSchema_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;port_a&lt;br&gt;sort&#x3D;host_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;path_eq_value&lt;br&gt;filter&#x3D;password_eq_value&lt;br&gt;filter&#x3D;urlschema_eq_value&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364360&lt;br&gt;filter&#x3D;port_eq_1&lt;br&gt;filter&#x3D;host_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230364360&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIConnection, Integer, Hash)>] APIListAPIConnection data, response status code and response headers
    def get_device_session_connections_with_http_info(user_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_connections ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_device_session_connections"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_connections"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/connections'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIConnection'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get connections for device session.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;path_a&lt;br&gt;sort&#x3D;password_a&lt;br&gt;sort&#x3D;urlSchema_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;port_a&lt;br&gt;sort&#x3D;host_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;path_eq_value&lt;br&gt;filter&#x3D;password_eq_value&lt;br&gt;filter&#x3D;urlschema_eq_value&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365550&lt;br&gt;filter&#x3D;port_eq_1&lt;br&gt;filter&#x3D;host_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230365550&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIConnection]
    def get_device_session_connections1(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_connections1_with_http_info(device_session_id, opts)
      data
    end

    # Get connections for device session.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;path_a&lt;br&gt;sort&#x3D;password_a&lt;br&gt;sort&#x3D;urlSchema_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;port_a&lt;br&gt;sort&#x3D;host_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;path_eq_value&lt;br&gt;filter&#x3D;password_eq_value&lt;br&gt;filter&#x3D;urlschema_eq_value&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365550&lt;br&gt;filter&#x3D;port_eq_1&lt;br&gt;filter&#x3D;host_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230365550&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIConnection, Integer, Hash)>] APIListAPIConnection data, response status code and response headers
    def get_device_session_connections1_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_connections1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_connections1"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/connections'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIConnection'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_connections1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;startedByDisplayName_a&lt;br&gt;sort&#x3D;currentStepType_a&lt;br&gt;sort&#x3D;deviceModel.id_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;priority_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230366086&lt;br&gt;filter&#x3D;startedbydisplayname_eq_value&lt;br&gt;filter&#x3D;currentsteptype_eq_waiting&lt;br&gt;filter&#x3D;devicemodel.id_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;priority_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230366086&lt;br&gt;filter&#x3D;starttime_eq_1700230366086&lt;br&gt;filter&#x3D;_endtime_eq_1700230366086&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminDeviceSession]
    def get_device_session_history(opts = {})
      data, _status_code, _headers = get_device_session_history_with_http_info(opts)
      data
    end

    # Get device sessions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;startedByDisplayName_a&lt;br&gt;sort&#x3D;currentStepType_a&lt;br&gt;sort&#x3D;deviceModel.id_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;priority_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230366086&lt;br&gt;filter&#x3D;startedbydisplayname_eq_value&lt;br&gt;filter&#x3D;currentsteptype_eq_waiting&lt;br&gt;filter&#x3D;devicemodel.id_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;priority_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230366086&lt;br&gt;filter&#x3D;starttime_eq_1700230366086&lt;br&gt;filter&#x3D;_endtime_eq_1700230366086&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;testrunname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminDeviceSession, Integer, Hash)>] APIListAPIAdminDeviceSession data, response status code and response headers
    def get_device_session_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_history ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-sessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshot.
    # @param run_id
    # @param device_session_id
    # @param screenshot_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [nil]
    def get_device_session_screenshot(run_id, device_session_id, screenshot_id, opts = {})
      get_device_session_screenshot_with_http_info(run_id, device_session_id, screenshot_id, opts)
      nil
    end

    # Get device session screenshot.
    # @param run_id
    # @param device_session_id
    # @param screenshot_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_device_session_screenshot_with_http_info(run_id, device_session_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_screenshot ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_screenshot"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_screenshot"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AllEndpointsApi.get_device_session_screenshot"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/screenshots/{screenshotId}'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_screenshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshot.
    # @param device_session_id
    # @param screenshot_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :test_run_id
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [nil]
    def get_device_session_screenshot1(device_session_id, screenshot_id, opts = {})
      get_device_session_screenshot1_with_http_info(device_session_id, screenshot_id, opts)
      nil
    end

    # Get device session screenshot.
    # @param device_session_id
    # @param screenshot_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :test_run_id
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_device_session_screenshot1_with_http_info(device_session_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_screenshot1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_screenshot1"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AllEndpointsApi.get_device_session_screenshot1"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/screenshots/{screenshotId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_screenshot1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshots.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIScreenshot]
    def get_device_session_screenshots(run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_screenshots_with_http_info(run_id, device_session_id, opts)
      data
    end

    # Get device session screenshots.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIScreenshot, Integer, Hash)>] APIListAPIScreenshot data, response status code and response headers
    def get_device_session_screenshots_with_http_info(run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_screenshots ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_screenshots"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_screenshots"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/screenshots'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshot'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_screenshots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshots.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :test_run_id
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIScreenshot]
    def get_device_session_screenshots1(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_screenshots1_with_http_info(device_session_id, opts)
      data
    end

    # Get device session screenshots.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :test_run_id
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIScreenshot, Integer, Hash)>] APIListAPIScreenshot data, response status code and response headers
    def get_device_session_screenshots1_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_screenshots1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_screenshots1"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/screenshots'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshot'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_screenshots1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session step.
    # @param run_id
    # @param device_session_id
    # @param device_session_step_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_device_session_step(run_id, device_session_id, device_session_step_id, opts = {})
      data, _status_code, _headers = get_device_session_step_with_http_info(run_id, device_session_id, device_session_step_id, opts)
      data
    end

    # Get device session step.
    # @param run_id
    # @param device_session_id
    # @param device_session_step_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Integer, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_device_session_step_with_http_info(run_id, device_session_id, device_session_step_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_step ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_step"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_step"
      end
      # verify the required parameter 'device_session_step_id' is set
      if @api_client.config.client_side_validation && device_session_step_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_step_id' when calling AllEndpointsApi.get_device_session_step"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/steps/{deviceSessionStepId}'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'deviceSessionStepId' + '}', device_session_step_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session step.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param device_session_step_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_device_session_step1(project_id, run_id, device_session_id, device_session_step_id, opts = {})
      data, _status_code, _headers = get_device_session_step1_with_http_info(project_id, run_id, device_session_id, device_session_step_id, opts)
      data
    end

    # Get device session step.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param device_session_step_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Integer, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_device_session_step1_with_http_info(project_id, run_id, device_session_id, device_session_step_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_step1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_device_session_step1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_step1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_step1"
      end
      # verify the required parameter 'device_session_step_id' is set
      if @api_client.config.client_side_validation && device_session_step_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_step_id' when calling AllEndpointsApi.get_device_session_step1"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps/{deviceSessionStepId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'deviceSessionStepId' + '}', device_session_step_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_step1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session step.
    # @param device_session_id
    # @param device_session_step_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_device_session_step2(device_session_id, device_session_step_id, opts = {})
      data, _status_code, _headers = get_device_session_step2_with_http_info(device_session_id, device_session_step_id, opts)
      data
    end

    # Get device session step.
    # @param device_session_id
    # @param device_session_step_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Integer, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_device_session_step2_with_http_info(device_session_id, device_session_step_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_step2 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_step2"
      end
      # verify the required parameter 'device_session_step_id' is set
      if @api_client.config.client_side_validation && device_session_step_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_step_id' when calling AllEndpointsApi.get_device_session_step2"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/steps/{deviceSessionStepId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'deviceSessionStepId' + '}', device_session_step_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_step2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSessionStep]
    def get_device_session_steps(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_steps_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSessionStep, Integer, Hash)>] APIListAPIDeviceSessionStep data, response status code and response headers
    def get_device_session_steps_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_steps ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_device_session_steps"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_device_session_steps"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_steps"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_steps"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_steps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSessionStep]
    def get_device_session_steps1(run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_steps1_with_http_info(run_id, device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSessionStep, Integer, Hash)>] APIListAPIDeviceSessionStep data, response status code and response headers
    def get_device_session_steps1_with_http_info(run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_steps1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_steps1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_steps1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/steps'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_steps1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSessionStep]
    def get_device_session_steps2(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_steps2_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSessionStep, Integer, Hash)>] APIListAPIDeviceSessionStep data, response status code and response headers
    def get_device_session_steps2_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_steps2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_device_session_steps2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_steps2"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_steps2"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_steps2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSessionStep]
    def get_device_session_steps3(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_steps3_with_http_info(device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;finishTimeMS_a&lt;br&gt;sort&#x3D;deviceSessionId_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;startTimeMS_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;finishtimems_eq_1&lt;br&gt;filter&#x3D;devicesessionid_eq_1&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;starttimems_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSessionStep, Integer, Hash)>] APIListAPIDeviceSessionStep data, response status code and response headers
    def get_device_session_steps3_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_steps3 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_steps3"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/steps'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_steps3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :test_run_id
    # @return [APIListAPITestCaseRun]
    def get_device_session_steps_with_params(device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_steps_with_params_with_http_info(device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :test_run_id
    # @return [Array<(APIListAPITestCaseRun, Integer, Hash)>] APIListAPITestCaseRun data, response status code and response headers
    def get_device_session_steps_with_params_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_steps_with_params ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_steps_with_params"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/test-case-runs'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'testRunId'] = opts[:'test_run_id'] if !opts[:'test_run_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITestCaseRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_steps_with_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPITestCaseRun]
    def get_device_session_test_case_runs(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_test_case_runs_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPITestCaseRun, Integer, Hash)>] APIListAPITestCaseRun data, response status code and response headers
    def get_device_session_test_case_runs_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_test_case_runs ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_device_session_test_case_runs"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_device_session_test_case_runs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_test_case_runs"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_test_case_runs"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/test-case-runs'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITestCaseRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_test_case_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPITestCaseRun]
    def get_device_session_test_case_runs1(run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_test_case_runs1_with_http_info(run_id, device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPITestCaseRun, Integer, Hash)>] APIListAPITestCaseRun data, response status code and response headers
    def get_device_session_test_case_runs1_with_http_info(run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_test_case_runs1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_test_case_runs1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_test_case_runs1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/test-case-runs'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITestCaseRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_test_case_runs1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session steps.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPITestCaseRun]
    def get_device_session_test_case_runs2(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_test_case_runs2_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session steps.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPITestCaseRun, Integer, Hash)>] APIListAPITestCaseRun data, response status code and response headers
    def get_device_session_test_case_runs2_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_test_case_runs2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_device_session_test_case_runs2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_test_case_runs2"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_test_case_runs2"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/test-case-runs'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITestCaseRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_test_case_runs2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def get_device_session_with_project(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_with_project_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def get_device_session_with_project_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_with_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_device_session_with_project"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_with_project"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_with_project"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_with_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def get_device_session_with_run(run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_device_session_with_run_with_http_info(run_id, device_session_id, opts)
      data
    end

    # Get device session.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def get_device_session_with_run_with_http_info(run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_session_with_run ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_session_with_run"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_device_session_with_run"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_session_with_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;clientSideId_a&lt;br&gt;sort&#x3D;externalId_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;biometricInstrumentation_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;clientsideid_eq_value&lt;br&gt;filter&#x3D;externalid_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364086&lt;br&gt;filter&#x3D;biometricinstrumentation_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1700230364086&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230364086&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_null
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSession]
    def get_device_sessions(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_device_sessions_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Get device sessions.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;clientSideId_a&lt;br&gt;sort&#x3D;externalId_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;biometricInstrumentation_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;clientsideid_eq_value&lt;br&gt;filter&#x3D;externalid_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364086&lt;br&gt;filter&#x3D;biometricinstrumentation_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1700230364086&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230364086&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_null
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSession, Integer, Hash)>] APIListAPIDeviceSession data, response status code and response headers
    def get_device_sessions_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_sessions ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_device_sessions"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_device_sessions"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_sessions"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;clientSideId_a&lt;br&gt;sort&#x3D;externalId_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;biometricInstrumentation_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;clientsideid_eq_value&lt;br&gt;filter&#x3D;externalid_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364841&lt;br&gt;filter&#x3D;biometricinstrumentation_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1700230364841&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230364841&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_null
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSession]
    def get_device_sessions1(run_id, opts = {})
      data, _status_code, _headers = get_device_sessions1_with_http_info(run_id, opts)
      data
    end

    # Get device sessions.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;clientSideId_a&lt;br&gt;sort&#x3D;externalId_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;biometricInstrumentation_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;clientsideid_eq_value&lt;br&gt;filter&#x3D;externalid_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364841&lt;br&gt;filter&#x3D;biometricinstrumentation_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1700230364841&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230364841&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_null
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSession, Integer, Hash)>] APIListAPIDeviceSession data, response status code and response headers
    def get_device_sessions1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_sessions1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_device_sessions1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_sessions1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device statistics.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account  (default to false)
    # @option opts [BOOLEAN] :skip_common_project  (default to false)
    # @option opts [BOOLEAN] :skip_shared  (default to false)
    # @option opts [String] :mode  (default to DEVICE_NAME)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;failedRatio_a&lt;br&gt;sort&#x3D;passedTests_a&lt;br&gt;sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;failedTests_a&lt;br&gt;sort&#x3D;passedRatio_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;usageCount_a&lt;br&gt;sort&#x3D;totalTests_a&lt;br&gt;sort&#x3D;failedDevices_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;usageMillis_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230364268&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceStatistic]
    def get_device_statistics(user_id, opts = {})
      data, _status_code, _headers = get_device_statistics_with_http_info(user_id, opts)
      data
    end

    # Get device statistics.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account
    # @option opts [BOOLEAN] :skip_common_project
    # @option opts [BOOLEAN] :skip_shared
    # @option opts [String] :mode
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;failedRatio_a&lt;br&gt;sort&#x3D;passedTests_a&lt;br&gt;sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;failedTests_a&lt;br&gt;sort&#x3D;passedRatio_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;usageCount_a&lt;br&gt;sort&#x3D;totalTests_a&lt;br&gt;sort&#x3D;failedDevices_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;usageMillis_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230364268&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceStatistic, Integer, Hash)>] APIListAPIDeviceStatistic data, response status code and response headers
    def get_device_statistics_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_statistics ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_device_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'mode'] && !['DEVICE_NAME', 'DEVICE_OS'].include?(opts[:'mode'])
        fail ArgumentError, 'invalid value for "mode", must be one of DEVICE_NAME, DEVICE_OS'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-statistics'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'skipCommonProject'] = opts[:'skip_common_project'] if !opts[:'skip_common_project'].nil?
      query_params[:'skipShared'] = opts[:'skip_shared'] if !opts[:'skip_shared'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceStatistic'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip_common_project  (default to false)
    # @option opts [String] :mode  (default to DEVICE_NAME)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;failedRatio_a&lt;br&gt;sort&#x3D;passedTests_a&lt;br&gt;sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;failedTests_a&lt;br&gt;sort&#x3D;passedRatio_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;usageCount_a&lt;br&gt;sort&#x3D;totalTests_a&lt;br&gt;sort&#x3D;failedDevices_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;usageMillis_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230365460&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceStatistic]
    def get_device_statistics1(opts = {})
      data, _status_code, _headers = get_device_statistics1_with_http_info(opts)
      data
    end

    # Get device statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip_common_project
    # @option opts [String] :mode
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;failedRatio_a&lt;br&gt;sort&#x3D;passedTests_a&lt;br&gt;sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;failedTests_a&lt;br&gt;sort&#x3D;passedRatio_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;usageCount_a&lt;br&gt;sort&#x3D;totalTests_a&lt;br&gt;sort&#x3D;failedDevices_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;usageMillis_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230365460&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceStatistic, Integer, Hash)>] APIListAPIDeviceStatistic data, response status code and response headers
    def get_device_statistics1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_statistics1 ...'
      end
      if @api_client.config.client_side_validation && opts[:'mode'] && !['DEVICE_NAME', 'DEVICE_OS'].include?(opts[:'mode'])
        fail ArgumentError, 'invalid value for "mode", must be one of DEVICE_NAME, DEVICE_OS'
      end
      # resource path
      local_var_path = '/api/v2/device-statistics'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skipCommonProject'] = opts[:'skip_common_project'] if !opts[:'skip_common_project'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceStatistic'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_statistics1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device statuses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;internalStorage_a&lt;br&gt;sort&#x3D;tdsVersion_a&lt;br&gt;sort&#x3D;alarmOn_a&lt;br&gt;sort&#x3D;externalStorage_a&lt;br&gt;sort&#x3D;monitoringOn_a&lt;br&gt;sort&#x3D;deviceTime_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;ssid_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;internetAccess_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;clusterName_a&lt;br&gt;sort&#x3D;emailAccount_a&lt;br&gt;sort&#x3D;bluetoothOn_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;mockLocationOn_a&lt;br&gt;sort&#x3D;batteryLevel_a&lt;br&gt;sort&#x3D;locationServiceOn_a&lt;br&gt;sort&#x3D;testExecuting_a&lt;br&gt;sort&#x3D;screenLocked_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;sdcardPresent_a&lt;br&gt;sort&#x3D;aslOn_a&lt;br&gt;sort&#x3D;deviceTimeZone_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;flashOn_a&lt;br&gt;sort&#x3D;tetheringOn_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;internalstorage_eq_1&lt;br&gt;filter&#x3D;tdsversion_eq_value&lt;br&gt;filter&#x3D;alarmon_eq_true&lt;br&gt;filter&#x3D;externalstorage_eq_1&lt;br&gt;filter&#x3D;monitoringon_eq_true&lt;br&gt;filter&#x3D;devicetime_eq_1&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;ssid_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;internetaccess_eq_true&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;clustername_eq_value&lt;br&gt;filter&#x3D;emailaccount_eq_value&lt;br&gt;filter&#x3D;bluetoothon_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;mocklocationon_eq_true&lt;br&gt;filter&#x3D;batterylevel_eq_1&lt;br&gt;filter&#x3D;locationserviceon_eq_true&lt;br&gt;filter&#x3D;testexecuting_eq_true&lt;br&gt;filter&#x3D;screenlocked_eq_true&lt;br&gt;filter&#x3D;sdcardpresent_eq_true&lt;br&gt;filter&#x3D;aslon_eq_true&lt;br&gt;filter&#x3D;devicetimezone_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230366053&lt;br&gt;filter&#x3D;flashon_eq_true&lt;br&gt;filter&#x3D;tetheringon_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceStatus]
    def get_device_statuses(opts = {})
      data, _status_code, _headers = get_device_statuses_with_http_info(opts)
      data
    end

    # Get device statuses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;internalStorage_a&lt;br&gt;sort&#x3D;tdsVersion_a&lt;br&gt;sort&#x3D;alarmOn_a&lt;br&gt;sort&#x3D;externalStorage_a&lt;br&gt;sort&#x3D;monitoringOn_a&lt;br&gt;sort&#x3D;deviceTime_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;ssid_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;internetAccess_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;clusterName_a&lt;br&gt;sort&#x3D;emailAccount_a&lt;br&gt;sort&#x3D;bluetoothOn_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;mockLocationOn_a&lt;br&gt;sort&#x3D;batteryLevel_a&lt;br&gt;sort&#x3D;locationServiceOn_a&lt;br&gt;sort&#x3D;testExecuting_a&lt;br&gt;sort&#x3D;screenLocked_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;sdcardPresent_a&lt;br&gt;sort&#x3D;aslOn_a&lt;br&gt;sort&#x3D;deviceTimeZone_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;flashOn_a&lt;br&gt;sort&#x3D;tetheringOn_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;internalstorage_eq_1&lt;br&gt;filter&#x3D;tdsversion_eq_value&lt;br&gt;filter&#x3D;alarmon_eq_true&lt;br&gt;filter&#x3D;externalstorage_eq_1&lt;br&gt;filter&#x3D;monitoringon_eq_true&lt;br&gt;filter&#x3D;devicetime_eq_1&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;ssid_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;internetaccess_eq_true&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;clustername_eq_value&lt;br&gt;filter&#x3D;emailaccount_eq_value&lt;br&gt;filter&#x3D;bluetoothon_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;mocklocationon_eq_true&lt;br&gt;filter&#x3D;batterylevel_eq_1&lt;br&gt;filter&#x3D;locationserviceon_eq_true&lt;br&gt;filter&#x3D;testexecuting_eq_true&lt;br&gt;filter&#x3D;screenlocked_eq_true&lt;br&gt;filter&#x3D;sdcardpresent_eq_true&lt;br&gt;filter&#x3D;aslon_eq_true&lt;br&gt;filter&#x3D;devicetimezone_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230366053&lt;br&gt;filter&#x3D;flashon_eq_true&lt;br&gt;filter&#x3D;tetheringon_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceStatus, Integer, Hash)>] APIListAPIDeviceStatus data, response status code and response headers
    def get_device_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_statuses ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device/statuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceStatus'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device time, counted testRuns and deviceSessions per day, user, project, deviceModel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;starttime_eq_1700230366077&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230366077&lt;br&gt;filter&#x3D;projectname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceTimeCountSessionReportEntry]
    def get_device_time_count_session_report(opts = {})
      data, _status_code, _headers = get_device_time_count_session_report_with_http_info(opts)
      data
    end

    # Get device time, counted testRuns and deviceSessions per day, user, project, deviceModel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;starttime_eq_1700230366077&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230366077&lt;br&gt;filter&#x3D;projectname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceTimeCountSessionReportEntry, Integer, Hash)>] APIListAPIDeviceTimeCountSessionReportEntry data, response status code and response headers
    def get_device_time_count_session_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_time_count_session_report ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-time/count-session-report'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceTimeCountSessionReportEntry'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_time_count_session_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device time history.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1700230366066&lt;br&gt;filter&#x3D;_endtime_eq_1700230366066&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserDeviceTime]
    def get_device_time_history(opts = {})
      data, _status_code, _headers = get_device_time_history_with_http_info(opts)
      data
    end

    # Get device time history.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1700230366066&lt;br&gt;filter&#x3D;_endtime_eq_1700230366066&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserDeviceTime, Integer, Hash)>] APIListAPIUserDeviceTime data, response status code and response headers
    def get_device_time_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_time_history ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-time'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserDeviceTime'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_time_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device time summary.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1700230366080&lt;br&gt;filter&#x3D;_endtime_eq_1700230366080&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIUserDeviceTimeSummary]
    def get_device_time_history_summary(opts = {})
      data, _status_code, _headers = get_device_time_history_summary_with_http_info(opts)
      data
    end

    # Get device time summary.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1700230366080&lt;br&gt;filter&#x3D;_endtime_eq_1700230366080&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIUserDeviceTimeSummary, Integer, Hash)>] APIUserDeviceTimeSummary data, response status code and response headers
    def get_device_time_history_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_time_history_summary ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-time-summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserDeviceTimeSummary'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_time_history_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device preparing and waiting time per day, user, project, deviceModel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;starttime_eq_1700230366072&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230366072&lt;br&gt;filter&#x3D;projectname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceTimeStepTimeReportEntry]
    def get_device_time_step_time_report(opts = {})
      data, _status_code, _headers = get_device_time_step_time_report_with_http_info(opts)
      data
    end

    # Get device preparing and waiting time per day, user, project, deviceModel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt;
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;starttime_eq_1700230366072&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230366072&lt;br&gt;filter&#x3D;projectname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceTimeStepTimeReportEntry, Integer, Hash)>] APIListAPIDeviceTimeStepTimeReportEntry data, response status code and response headers
    def get_device_time_step_time_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_time_step_time_report ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-time/step-time-report'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceTimeStepTimeReportEntry'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_time_step_time_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device frame.
    # @param device_type_id
    # @param [Hash] opts the optional parameters
    # @return [APIAdminDeviceType]
    def get_device_type(device_type_id, opts = {})
      data, _status_code, _headers = get_device_type_with_http_info(device_type_id, opts)
      data
    end

    # Get device frame.
    # @param device_type_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminDeviceType, Integer, Hash)>] APIAdminDeviceType data, response status code and response headers
    def get_device_type_with_http_info(device_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_type ...'
      end
      # verify the required parameter 'device_type_id' is set
      if @api_client.config.client_side_validation && device_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_type_id' when calling AllEndpointsApi.get_device_type"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-types/{deviceTypeId}'.sub('{' + 'deviceTypeId' + '}', device_type_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminDeviceType'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device frames.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;imagePrefix_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;imageprefix_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminDeviceType]
    def get_device_types(opts = {})
      data, _status_code, _headers = get_device_types_with_http_info(opts)
      data
    end

    # Get device frames.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;imagePrefix_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;imageprefix_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminDeviceType, Integer, Hash)>] APIListAPIAdminDeviceType data, response status code and response headers
    def get_device_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_device_types ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/device-types'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminDeviceType'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_device_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get devices.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_disabled  (default to false)
    # @option opts [BOOLEAN] :with_dedicated  (default to false)
    # @option opts [BOOLEAN] :with_browsers  (default to false)
    # @option opts [BOOLEAN] :with_properties  (default to false)
    # @option opts [BOOLEAN] :with_supported_creators  (default to false)
    # @option opts [BOOLEAN] :live_testing_only  (default to false)
    # @option opts [BOOLEAN] :only_with_browsers  (default to false)
    # @option opts [Array<Integer>] :label_ids
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230365397&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDevice]
    def get_devices(opts = {})
      data, _status_code, _headers = get_devices_with_http_info(opts)
      data
    end

    # Get devices.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_disabled
    # @option opts [BOOLEAN] :with_dedicated
    # @option opts [BOOLEAN] :with_browsers
    # @option opts [BOOLEAN] :with_properties
    # @option opts [BOOLEAN] :with_supported_creators
    # @option opts [BOOLEAN] :live_testing_only
    # @option opts [BOOLEAN] :only_with_browsers
    # @option opts [Array<Integer>] :label_ids
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230365397&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDevice, Integer, Hash)>] APIListAPIDevice data, response status code and response headers
    def get_devices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_devices ...'
      end
      # resource path
      local_var_path = '/api/v2/devices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withDisabled'] = opts[:'with_disabled'] if !opts[:'with_disabled'].nil?
      query_params[:'withDedicated'] = opts[:'with_dedicated'] if !opts[:'with_dedicated'].nil?
      query_params[:'withBrowsers'] = opts[:'with_browsers'] if !opts[:'with_browsers'].nil?
      query_params[:'withProperties'] = opts[:'with_properties'] if !opts[:'with_properties'].nil?
      query_params[:'withSupportedCreators'] = opts[:'with_supported_creators'] if !opts[:'with_supported_creators'].nil?
      query_params[:'liveTestingOnly'] = opts[:'live_testing_only'] if !opts[:'live_testing_only'].nil?
      query_params[:'onlyWithBrowsers'] = opts[:'only_with_browsers'] if !opts[:'only_with_browsers'].nil?
      query_params[:'labelIds[]'] = @api_client.build_collection_param(opts[:'label_ids'], :multi) if !opts[:'label_ids'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get devices.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_disabled  (default to true)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;manufacturer_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;dedicationEndTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1700230365935&lt;br&gt;filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1700230365935&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;dedicationendtime_eq_1700230365935&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;locked_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminDevice]
    def get_devices1(opts = {})
      data, _status_code, _headers = get_devices1_with_http_info(opts)
      data
    end

    # Get devices.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_disabled
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;manufacturer_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;dedicationEndTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1700230365935&lt;br&gt;filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1700230365935&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;dedicationendtime_eq_1700230365935&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;locked_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminDevice, Integer, Hash)>] APIListAPIAdminDevice data, response status code and response headers
    def get_devices1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_devices1 ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/devices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withDisabled'] = opts[:'with_disabled'] if !opts[:'with_disabled'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_devices1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get devices used given device cleanup configuration.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;manufacturer_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;dedicationEndTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1700230365989&lt;br&gt;filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1700230365989&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;dedicationendtime_eq_1700230365989&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;locked_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminDevice]
    def get_devices_used_device_cleanup_configuration(id, opts = {})
      data, _status_code, _headers = get_devices_used_device_cleanup_configuration_with_http_info(id, opts)
      data
    end

    # Get devices used given device cleanup configuration.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;stateChangeTime_a&lt;br&gt;sort&#x3D;cluster.name_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;manufacturer_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;serialId_a&lt;br&gt;sort&#x3D;stateTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;fingerprint_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;dedicationEndTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;statechangetime_eq_1700230365989&lt;br&gt;filter&#x3D;cluster.name_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;serialid_eq_value&lt;br&gt;filter&#x3D;statetime_eq_1700230365989&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;fingerprint_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;dedicationendtime_eq_1700230365989&lt;br&gt;filter&#x3D;devicecleanupconfigurationid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_offline_cleaning&lt;br&gt;filter&#x3D;locked_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminDevice, Integer, Hash)>] APIListAPIAdminDevice data, response status code and response headers
    def get_devices_used_device_cleanup_configuration_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_devices_used_device_cleanup_configuration ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_devices_used_device_cleanup_configuration"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/{id}/devices'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_devices_used_device_cleanup_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get emails.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;subject_a&lt;br&gt;sort&#x3D;lastRetryTime_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;sent_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1700230365926&lt;br&gt;filter&#x3D;subject_eq_value&lt;br&gt;filter&#x3D;lastretrytime_eq_1700230365926&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sent_eq_true&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminEmail]
    def get_emails(opts = {})
      data, _status_code, _headers = get_emails_with_http_info(opts)
      data
    end

    # Get emails.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;subject_a&lt;br&gt;sort&#x3D;lastRetryTime_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;sent_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;createtime_eq_1700230365926&lt;br&gt;filter&#x3D;subject_eq_value&lt;br&gt;filter&#x3D;lastretrytime_eq_1700230365926&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sent_eq_true&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminEmail, Integer, Hash)>] APIListAPIAdminEmail data, response status code and response headers
    def get_emails_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_emails ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/emails'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminEmail'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get enums.
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<String>>]
    def get_enums(opts = {})
      data, _status_code, _headers = get_enums_with_http_info(opts)
      data
    end

    # Get enums.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<String>>, Integer, Hash)>] Hash<String, Array<String>> data, response status code and response headers
    def get_enums_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_enums ...'
      end
      # resource path
      local_var_path = '/api/v2/enums'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Hash<String, Array<String>>'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_enums\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get errors.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;quantity_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;quantity_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_abort_request&lt;br&gt;filter&#x3D;timestamp_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminError]
    def get_errors(opts = {})
      data, _status_code, _headers = get_errors_with_http_info(opts)
      data
    end

    # Get errors.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;quantity_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;quantity_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_abort_request&lt;br&gt;filter&#x3D;timestamp_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminError, Integer, Hash)>] APIListAPIAdminError data, response status code and response headers
    def get_errors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_errors ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/errors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminError'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get file properties.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;id_a&lt;br&gt;sort&#x3D;value_a&lt;br&gt;sort&#x3D;key_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;value_eq_value&lt;br&gt;filter&#x3D;key_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFileProperty]
    def get_file_properties(file_id, opts = {})
      data, _status_code, _headers = get_file_properties_with_http_info(file_id, opts)
      data
    end

    # Get file properties.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;id_a&lt;br&gt;sort&#x3D;value_a&lt;br&gt;sort&#x3D;key_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;value_eq_value&lt;br&gt;filter&#x3D;key_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFileProperty, Integer, Hash)>] APIListAPIUserFileProperty data, response status code and response headers
    def get_file_properties_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_file_properties ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.get_file_properties"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/properties'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFileProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_file_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get file property.
    # @param file_id
    # @param property_id
    # @param [Hash] opts the optional parameters
    # @return [APIUserFileProperty]
    def get_file_property(file_id, property_id, opts = {})
      data, _status_code, _headers = get_file_property_with_http_info(file_id, property_id, opts)
      data
    end

    # Get file property.
    # @param file_id
    # @param property_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFileProperty, Integer, Hash)>] APIUserFileProperty data, response status code and response headers
    def get_file_property_with_http_info(file_id, property_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_file_property ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.get_file_property"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling AllEndpointsApi.get_file_property"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/properties/{propertyId}'.sub('{' + 'fileId' + '}', file_id.to_s).sub('{' + 'propertyId' + '}', property_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFileProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_file_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get file tags.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFileTag]
    def get_file_tags(user_id, file_id, opts = {})
      data, _status_code, _headers = get_file_tags_with_http_info(user_id, file_id, opts)
      data
    end

    # Get file tags.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFileTag, Integer, Hash)>] APIListAPIUserFileTag data, response status code and response headers
    def get_file_tags_with_http_info(user_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_file_tags ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_file_tags"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.get_file_tags"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}/tags'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFileTag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_file_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get file tags.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFileTag]
    def get_file_tags1(file_id, opts = {})
      data, _status_code, _headers = get_file_tags1_with_http_info(file_id, opts)
      data
    end

    # Get file tags.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFileTag, Integer, Hash)>] APIListAPIUserFileTag data, response status code and response headers
    def get_file_tags1_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_file_tags1 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.get_file_tags1"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/tags'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFileTag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_file_tags1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get files.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365359&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFile]
    def get_files(opts = {})
      data, _status_code, _headers = get_files_with_http_info(opts)
      data
    end

    # Get files.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365359&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFile, Integer, Hash)>] APIListAPIUserFile data, response status code and response headers
    def get_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_files ...'
      end
      # resource path
      local_var_path = '/api/v2/files'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364167&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFile]
    def get_files_for_device_session_by_tag(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_files_for_device_session_by_tag_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session output files.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364167&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFile, Integer, Hash)>] APIListAPIUserFile data, response status code and response headers
    def get_files_for_device_session_by_tag_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_files_for_device_session_by_tag ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_files_for_device_session_by_tag"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_files_for_device_session_by_tag"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_files_for_device_session_by_tag"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_files_for_device_session_by_tag"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_files_for_device_session_by_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get framework.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIFramework]
    def get_framework(id, opts = {})
      data, _status_code, _headers = get_framework_with_http_info(id, opts)
      data
    end

    # Get framework.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIFramework, Integer, Hash)>] APIFramework data, response status code and response headers
    def get_framework_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_framework ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_framework"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIFramework'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_framework\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get available framework labels.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceProperty]
    def get_framework_available_labels(opts = {})
      data, _status_code, _headers = get_framework_available_labels_with_http_info(opts)
      data
    end

    # Get available framework labels.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceProperty, Integer, Hash)>] APIListAPIDeviceProperty data, response status code and response headers
    def get_framework_available_labels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_framework_available_labels ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/available-labels'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_framework_available_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get framework's config.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIProjectJobConfig]
    def get_framework_config(id, opts = {})
      data, _status_code, _headers = get_framework_config_with_http_info(id, opts)
      data
    end

    # Get framework&#x27;s config.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProjectJobConfig, Integer, Hash)>] APIProjectJobConfig data, response status code and response headers
    def get_framework_config_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_framework_config ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_framework_config"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}/config'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProjectJobConfig'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_framework_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get roles required by framework.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;name_eq_admin&lt;br&gt;filter&#x3D;id_eq_null
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIRole]
    def get_framework_roles(id, opts = {})
      data, _status_code, _headers = get_framework_roles_with_http_info(id, opts)
      data
    end

    # Get roles required by framework.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;name_eq_admin&lt;br&gt;filter&#x3D;id_eq_null
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIRole, Integer, Hash)>] APIListAPIRole data, response status code and response headers
    def get_framework_roles_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_framework_roles ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_framework_roles"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}/required-roles'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIRole'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_framework_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get framework statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days  (default to 30)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;starttime_eq_1700230365734&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230365734&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminFrameworkStatistics]
    def get_framework_statistics(opts = {})
      data, _status_code, _headers = get_framework_statistics_with_http_info(opts)
      data
    end

    # Get framework statistics.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;releaseVersion_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;releaseversion_eq_value&lt;br&gt;filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;starttime_eq_1700230365734&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230365734&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminFrameworkStatistics, Integer, Hash)>] APIListAPIAdminFrameworkStatistics data, response status code and response headers
    def get_framework_statistics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_framework_statistics ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/statistics/frameworks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminFrameworkStatistics'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_framework_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get frameworks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;canRunFromUI_a&lt;br&gt;sort&#x3D;retryable_a&lt;br&gt;sort&#x3D;skipQueue_a&lt;br&gt;sort&#x3D;forProjects_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;labelId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;jobConfigId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelName_a&lt;br&gt;sort&#x3D;secured_a&lt;br&gt;sort&#x3D;skipOlderSdk_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;canrunfromui_eq_true&lt;br&gt;filter&#x3D;retryable_eq_true&lt;br&gt;filter&#x3D;skipqueue_eq_true&lt;br&gt;filter&#x3D;forprojects_eq_true&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;type_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;labelid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365861&lt;br&gt;filter&#x3D;jobconfigid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelname_eq_value&lt;br&gt;filter&#x3D;secured_eq_true&lt;br&gt;filter&#x3D;skipoldersdk_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIFramework]
    def get_frameworks(opts = {})
      data, _status_code, _headers = get_frameworks_with_http_info(opts)
      data
    end

    # Get frameworks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;canRunFromUI_a&lt;br&gt;sort&#x3D;retryable_a&lt;br&gt;sort&#x3D;skipQueue_a&lt;br&gt;sort&#x3D;forProjects_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;labelId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;jobConfigId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelName_a&lt;br&gt;sort&#x3D;secured_a&lt;br&gt;sort&#x3D;skipOlderSdk_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;canrunfromui_eq_true&lt;br&gt;filter&#x3D;retryable_eq_true&lt;br&gt;filter&#x3D;skipqueue_eq_true&lt;br&gt;filter&#x3D;forprojects_eq_true&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;type_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;labelid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365861&lt;br&gt;filter&#x3D;jobconfigid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelname_eq_value&lt;br&gt;filter&#x3D;secured_eq_true&lt;br&gt;filter&#x3D;skipoldersdk_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIFramework, Integer, Hash)>] APIListAPIFramework data, response status code and response headers
    def get_frameworks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_frameworks ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIFramework'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_frameworks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get health check.
    # @param [Hash] opts the optional parameters
    # @return [APIHealthCheck]
    def get_health_check(opts = {})
      data, _status_code, _headers = get_health_check_with_http_info(opts)
      data
    end

    # Get health check.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIHealthCheck, Integer, Hash)>] APIHealthCheck data, response status code and response headers
    def get_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_health_check ...'
      end
      # resource path
      local_var_path = '/api/v2/health'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIHealthCheck'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get appium broker hubs (location and url).
    # @param [Hash] opts the optional parameters
    # @return [APISimpleListAPIBrokerHub]
    def get_hubs(opts = {})
      data, _status_code, _headers = get_hubs_with_http_info(opts)
      data
    end

    # Get appium broker hubs (location and url).
    # @param [Hash] opts the optional parameters
    # @return [Array<(APISimpleListAPIBrokerHub, Integer, Hash)>] APISimpleListAPIBrokerHub data, response status code and response headers
    def get_hubs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_hubs ...'
      end
      # resource path
      local_var_path = '/api/v2/broker/hubs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APISimpleListAPIBrokerHub'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_hubs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get connection for device session.
    # @param device_session_id
    # @param connection_id
    # @param [Hash] opts the optional parameters
    # @return [APIConnection]
    def get_inspector_device_session_connection(device_session_id, connection_id, opts = {})
      data, _status_code, _headers = get_inspector_device_session_connection_with_http_info(device_session_id, connection_id, opts)
      data
    end

    # Get connection for device session.
    # @param device_session_id
    # @param connection_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIConnection, Integer, Hash)>] APIConnection data, response status code and response headers
    def get_inspector_device_session_connection_with_http_info(device_session_id, connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_inspector_device_session_connection ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_inspector_device_session_connection"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling AllEndpointsApi.get_inspector_device_session_connection"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/connections/{connectionId}'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'connectionId' + '}', connection_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIConnection'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_inspector_device_session_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;clientSideId_a&lt;br&gt;sort&#x3D;externalId_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;biometricInstrumentation_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;clientsideid_eq_value&lt;br&gt;filter&#x3D;externalid_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364288&lt;br&gt;filter&#x3D;biometricinstrumentation_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1700230364288&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230364288&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_null
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSession]
    def get_inspector_device_sessions(user_id, opts = {})
      data, _status_code, _headers = get_inspector_device_sessions_with_http_info(user_id, opts)
      data
    end

    # Get device sessions.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;clientSideId_a&lt;br&gt;sort&#x3D;externalId_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;biometricInstrumentation_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;clientsideid_eq_value&lt;br&gt;filter&#x3D;externalid_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364288&lt;br&gt;filter&#x3D;biometricinstrumentation_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1700230364288&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230364288&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_null
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSession, Integer, Hash)>] APIListAPIDeviceSession data, response status code and response headers
    def get_inspector_device_sessions_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_inspector_device_sessions ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_inspector_device_sessions"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withProperties'] = opts[:'with_properties'] if !opts[:'with_properties'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_inspector_device_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get manual sessions queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;deviceModelName_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;billable_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;billable_eq_true&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365850&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;starttime_eq_1700230365850&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230365850&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminInteractiveDeviceSession]
    def get_interactive_queue(opts = {})
      data, _status_code, _headers = get_interactive_queue_with_http_info(opts)
      data
    end

    # Get manual sessions queue.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;deviceModelName_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;billable_a&lt;br&gt;sort&#x3D;deviceId_a&lt;br&gt;sort&#x3D;deviceName_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;deviceModelId_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicemodelname_eq_value&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;billable_eq_true&lt;br&gt;filter&#x3D;deviceid_eq_1&lt;br&gt;filter&#x3D;devicename_eq_value&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365850&lt;br&gt;filter&#x3D;devicemodelid_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;starttime_eq_1700230365850&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230365850&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminInteractiveDeviceSession, Integer, Hash)>] APIListAPIAdminInteractiveDeviceSession data, response status code and response headers
    def get_interactive_queue_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_interactive_queue ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/interactive-queue'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminInteractiveDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_interactive_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get label groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPILabelGroup]
    def get_label_groups(opts = {})
      data, _status_code, _headers = get_label_groups_with_http_info(opts)
      data
    end

    # Get label groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPILabelGroup, Integer, Hash)>] APIListAPILabelGroup data, response status code and response headers
    def get_label_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_label_groups ...'
      end
      # resource path
      local_var_path = '/api/v2/label-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPILabelGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_label_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get labels.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceProperty]
    def get_labels(opts = {})
      data, _status_code, _headers = get_labels_with_http_info(opts)
      data
    end

    # Get labels.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceProperty, Integer, Hash)>] APIListAPIDeviceProperty data, response status code and response headers
    def get_labels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_labels ...'
      end
      # resource path
      local_var_path = '/api/v2/labels'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get labels.
    # @param group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceProperty]
    def get_labels1(group_id, opts = {})
      data, _status_code, _headers = get_labels1_with_http_info(group_id, opts)
      data
    end

    # Get labels.
    # @param group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceProperty, Integer, Hash)>] APIListAPIDeviceProperty data, response status code and response headers
    def get_labels1_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_labels1 ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AllEndpointsApi.get_labels1"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}/labels'.sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_labels1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get license installed to cloud.
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def get_license(opts = {})
      data, _status_code, _headers = get_license_with_http_info(opts)
      data
    end

    # Get license installed to cloud.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Integer, Hash)>] APILicense data, response status code and response headers
    def get_license_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_license ...'
      end
      # resource path
      local_var_path = '/api/v2/license'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APILicense'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def get_license1(id, opts = {})
      data, _status_code, _headers = get_license1_with_http_info(id, opts)
      data
    end

    # Get license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Integer, Hash)>] APILicense data, response status code and response headers
    def get_license1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_license1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_license1"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APILicense'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_license1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get licenses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;closeTime_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;privateInstance_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1700230365836&lt;br&gt;filter&#x3D;closetime_eq_1700230365836&lt;br&gt;filter&#x3D;activatetime_eq_1700230365836&lt;br&gt;filter&#x3D;privateinstance_eq_true&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;status_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPILicense]
    def get_licenses(opts = {})
      data, _status_code, _headers = get_licenses_with_http_info(opts)
      data
    end

    # Get licenses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;closeTime_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;privateInstance_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1700230365836&lt;br&gt;filter&#x3D;closetime_eq_1700230365836&lt;br&gt;filter&#x3D;activatetime_eq_1700230365836&lt;br&gt;filter&#x3D;privateinstance_eq_true&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;status_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPILicense, Integer, Hash)>] APIListAPILicense data, response status code and response headers
    def get_licenses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_licenses ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPILicense'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access groups.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAccessGroup]
    def get_list(user_id, opts = {})
      data, _status_code, _headers = get_list_with_http_info(user_id, opts)
      data
    end

    # Get access groups.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAccessGroup, Integer, Hash)>] APIListAPIAccessGroup data, response status code and response headers
    def get_list_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_list ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_list"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAccessGroup]
    def get_list1(opts = {})
      data, _status_code, _headers = get_list1_with_http_info(opts)
      data
    end

    # Get access groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_user&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAccessGroup, Integer, Hash)>] APIListAPIAccessGroup data, response status code and response headers
    def get_list1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_list1 ...'
      end
      # resource path
      local_var_path = '/api/v2/access-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_list1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get maintenance mode.
    # @param [Hash] opts the optional parameters
    # @return [APIMaintenance]
    def get_maintenance(opts = {})
      data, _status_code, _headers = get_maintenance_with_http_info(opts)
      data
    end

    # Get maintenance mode.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIMaintenance, Integer, Hash)>] APIMaintenance data, response status code and response headers
    def get_maintenance_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_maintenance ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/maintenance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIMaintenance'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_maintenance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get files for device session.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364352&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFile]
    def get_output_files(user_id, device_session_id, opts = {})
      data, _status_code, _headers = get_output_files_with_http_info(user_id, device_session_id, opts)
      data
    end

    # Get files for device session.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364352&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFile, Integer, Hash)>] APIListAPIUserFile data, response status code and response headers
    def get_output_files_with_http_info(user_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_output_files ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_output_files"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_output_files"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_output_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364930&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFile]
    def get_output_files_for_device_session_by_tag(run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_output_files_for_device_session_by_tag_with_http_info(run_id, device_session_id, opts)
      data
    end

    # Get device session output files.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364930&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFile, Integer, Hash)>] APIListAPIUserFile data, response status code and response headers
    def get_output_files_for_device_session_by_tag_with_http_info(run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_output_files_for_device_session_by_tag ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_output_files_for_device_session_by_tag"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_output_files_for_device_session_by_tag"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_output_files_for_device_session_by_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365543&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFile]
    def get_output_files_for_device_session_by_tag1(device_session_id, opts = {})
      data, _status_code, _headers = get_output_files_for_device_session_by_tag1_with_http_info(device_session_id, opts)
      data
    end

    # Get device session output files.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365543&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFile, Integer, Hash)>] APIListAPIUserFile data, response status code and response headers
    def get_output_files_for_device_session_by_tag1_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_output_files_for_device_session_by_tag1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_output_files_for_device_session_by_tag1"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_output_files_for_device_session_by_tag1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session output files.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365281&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFile]
    def get_output_files_for_projects_runs_device_session(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_output_files_for_projects_runs_device_session_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session output files.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365281&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFile, Integer, Hash)>] APIListAPIUserFile data, response status code and response headers
    def get_output_files_for_projects_runs_device_session_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_output_files_for_projects_runs_device_session ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_output_files_for_projects_runs_device_session"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_output_files_for_projects_runs_device_session"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_output_files_for_projects_runs_device_session"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/output-file-set/files'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_output_files_for_projects_runs_device_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [APIProject]
    def get_project(project_id, opts = {})
      data, _status_code, _headers = get_project_with_http_info(project_id, opts)
      data
    end

    # Get project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProject, Integer, Hash)>] APIProject data, response status code and response headers
    def get_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_project"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProject'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshot.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param screenshot_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [nil]
    def get_project_device_session_screenshot(project_id, run_id, device_session_id, screenshot_id, opts = {})
      get_project_device_session_screenshot_with_http_info(project_id, run_id, device_session_id, screenshot_id, opts)
      nil
    end

    # Get device session screenshot.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param screenshot_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_project_device_session_screenshot_with_http_info(project_id, run_id, device_session_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_project_device_session_screenshot ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_project_device_session_screenshot"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_project_device_session_screenshot"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_project_device_session_screenshot"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AllEndpointsApi.get_project_device_session_screenshot"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/screenshots/{screenshotId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_project_device_session_screenshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshots.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIScreenshot]
    def get_project_device_session_screenshots(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_project_device_session_screenshots_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session screenshots.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIScreenshot, Integer, Hash)>] APIListAPIScreenshot data, response status code and response headers
    def get_project_device_session_screenshots_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_project_device_session_screenshots ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_project_device_session_screenshots"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_project_device_session_screenshots"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_project_device_session_screenshots"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/screenshots'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshot'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_project_device_session_screenshots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device sessions.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;clientSideId_a&lt;br&gt;sort&#x3D;externalId_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;biometricInstrumentation_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;clientsideid_eq_value&lt;br&gt;filter&#x3D;externalid_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365198&lt;br&gt;filter&#x3D;biometricinstrumentation_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1700230365198&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230365198&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_null
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceSession]
    def get_project_device_sessions(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_device_sessions_with_http_info(project_id, run_id, opts)
      data
    end

    # Get device sessions.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;isExcluded_a&lt;br&gt;sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;clientSideId_a&lt;br&gt;sort&#x3D;externalId_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;device.id_a&lt;br&gt;sort&#x3D;retryState_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;duration_a&lt;br&gt;sort&#x3D;timeLimit_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;biometricInstrumentation_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;device.displayName_a&lt;br&gt;sort&#x3D;projectName_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;testRunName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;clientsideid_eq_value&lt;br&gt;filter&#x3D;externalid_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;device.id_eq_1&lt;br&gt;filter&#x3D;retrystate_eq_none&lt;br&gt;filter&#x3D;type_eq_automatic&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;duration_eq_1&lt;br&gt;filter&#x3D;timelimit_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365198&lt;br&gt;filter&#x3D;biometricinstrumentation_eq_true&lt;br&gt;filter&#x3D;starttime_eq_1700230365198&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;_endtime_eq_1700230365198&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_aborted&lt;br&gt;filter&#x3D;device.displayname_eq_value&lt;br&gt;filter&#x3D;projectname_eq_value&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;testrunname_eq_null
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceSession, Integer, Hash)>] APIListAPIDeviceSession data, response status code and response headers
    def get_project_device_sessions_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_project_device_sessions ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_project_device_sessions"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_project_device_sessions"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_project_device_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tags.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPITag]
    def get_project_test_run_tags(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_test_run_tags_with_http_info(project_id, run_id, opts)
      data
    end

    # Get test run tags.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPITag, Integer, Hash)>] APIListAPITag data, response status code and response headers
    def get_project_test_run_tags_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_project_test_run_tags ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_project_test_run_tags"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_project_test_run_tags"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/tags'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_project_test_run_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def get_project_test_run_with_project(project_id, run_id, opts = {})
      data, _status_code, _headers = get_project_test_run_with_project_with_http_info(project_id, run_id, opts)
      data
    end

    # Get test run.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def get_project_test_run_with_project_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_project_test_run_with_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_project_test_run_with_project"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_project_test_run_with_project"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_project_test_run_with_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230365041&lt;br&gt;filter&#x3D;starttime_eq_1700230365041&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPITestRun]
    def get_project_test_runs(project_id, opts = {})
      data, _status_code, _headers = get_project_test_runs_with_http_info(project_id, opts)
      data
    end

    # Get test runs.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230365041&lt;br&gt;filter&#x3D;starttime_eq_1700230365041&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPITestRun, Integer, Hash)>] APIListAPITestRun data, response status code and response headers
    def get_project_test_runs_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_project_test_runs ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_project_test_runs"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_project_test_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get projects.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;sharedByEmail_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230364959&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230364959&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;readonly_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sharedbyemail_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIProject]
    def get_projects(opts = {})
      data, _status_code, _headers = get_projects_with_http_info(opts)
      data
    end

    # Get projects.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;sharedByEmail_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230364959&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230364959&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;readonly_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sharedbyemail_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIProject, Integer, Hash)>] APIListAPIProject data, response status code and response headers
    def get_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_projects ...'
      end
      # resource path
      local_var_path = '/api/v2/projects'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIProject'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;updatedByDisplayName_a&lt;br&gt;sort&#x3D;fromTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;updatedById_a&lt;br&gt;sort&#x3D;value_a&lt;br&gt;sort&#x3D;toTime_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;updatedbydisplayname_eq_value&lt;br&gt;filter&#x3D;fromtime_eq_1700230364946&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;updatetime_eq_1700230364946&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;updatedbyid_eq_1&lt;br&gt;filter&#x3D;value_eq_value&lt;br&gt;filter&#x3D;totime_eq_1700230364946
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIProperty]
    def get_properties(opts = {})
      data, _status_code, _headers = get_properties_with_http_info(opts)
      data
    end

    # Get properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;updatedByDisplayName_a&lt;br&gt;sort&#x3D;fromTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;updateTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;updatedById_a&lt;br&gt;sort&#x3D;value_a&lt;br&gt;sort&#x3D;toTime_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;updatedbydisplayname_eq_value&lt;br&gt;filter&#x3D;fromtime_eq_1700230364946&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;updatetime_eq_1700230364946&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;updatedbyid_eq_1&lt;br&gt;filter&#x3D;value_eq_value&lt;br&gt;filter&#x3D;totime_eq_1700230364946
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIProperty, Integer, Hash)>] APIListAPIProperty data, response status code and response headers
    def get_properties_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_properties ...'
      end
      # resource path
      local_var_path = '/api/v2/properties'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get purchased service receipt.
    # @param user_id
    # @param billing_period_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_receipt(user_id, billing_period_id, opts = {})
      get_receipt_with_http_info(user_id, billing_period_id, opts)
      nil
    end

    # Get purchased service receipt.
    # @param user_id
    # @param billing_period_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_receipt_with_http_info(user_id, billing_period_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_receipt ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_receipt"
      end
      # verify the required parameter 'billing_period_id' is set
      if @api_client.config.client_side_validation && billing_period_id.nil?
        fail ArgumentError, "Missing the required parameter 'billing_period_id' when calling AllEndpointsApi.get_receipt"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/billing-periods/{billingPeriodId}/receipt'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'billingPeriodId' + '}', billing_period_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_receipt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resource.
    # @param user_id
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [APISharedResource]
    def get_resource(user_id, access_group_id, resource_id, opts = {})
      data, _status_code, _headers = get_resource_with_http_info(user_id, access_group_id, resource_id, opts)
      data
    end

    # Get access group resource.
    # @param user_id
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APISharedResource, Integer, Hash)>] APISharedResource data, response status code and response headers
    def get_resource_with_http_info(user_id, access_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_resource ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_resource"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get_resource"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling AllEndpointsApi.get_resource"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resource.
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [APISharedResource]
    def get_resource1(access_group_id, resource_id, opts = {})
      data, _status_code, _headers = get_resource1_with_http_info(access_group_id, resource_id, opts)
      data
    end

    # Get access group resource.
    # @param access_group_id
    # @param resource_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APISharedResource, Integer, Hash)>] APISharedResource data, response status code and response headers
    def get_resource1_with_http_info(access_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_resource1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get_resource1"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling AllEndpointsApi.get_resource1"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/resources/{resourceId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_resource1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resources.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPISharedResource]
    def get_resources(user_id, access_group_id, opts = {})
      data, _status_code, _headers = get_resources_with_http_info(user_id, access_group_id, opts)
      data
    end

    # Get access group resources.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def get_resources_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_resources ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_resources"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get_resources"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/resources'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group resources.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPISharedResource]
    def get_resources1(access_group_id, opts = {})
      data, _status_code, _headers = get_resources1_with_http_info(access_group_id, opts)
      data
    end

    # Get access group resources.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;resourceId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;resourceid_eq_1&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;type_eq_device_group
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def get_resources1_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_resources1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get_resources1"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/resources'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_resources1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get roles.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :without_priorities  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIRole]
    def get_roles(opts = {})
      data, _status_code, _headers = get_roles_with_http_info(opts)
      data
    end

    # Get roles.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :without_priorities
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIRole, Integer, Hash)>] APIListAPIRole data, response status code and response headers
    def get_roles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_roles ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/roles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withoutPriorities'] = opts[:'without_priorities'] if !opts[:'without_priorities'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIRole'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get sample files.
    # Sample files
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365764&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFile]
    def get_sample_files(opts = {})
      data, _status_code, _headers = get_sample_files_with_http_info(opts)
      data
    end

    # Get sample files.
    # Sample files
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230365764&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFile, Integer, Hash)>] APIListAPIUserFile data, response status code and response headers
    def get_sample_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_sample_files ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/samples'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_sample_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification scopes.
    # @param [Hash] opts the optional parameters
    # @return [APIListAPIEnum]
    def get_scopes(opts = {})
      data, _status_code, _headers = get_scopes_with_http_info(opts)
      data
    end

    # Get notification scopes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPIEnum, Integer, Hash)>] APIListAPIEnum data, response status code and response headers
    def get_scopes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_scopes ...'
      end
      # resource path
      local_var_path = '/api/v2/users/*/notifications/scopes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIEnum'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_scopes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get screenshot names.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPIScreenshot]
    def get_screenshot_names(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_screenshot_names_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Get screenshot names.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPIScreenshot, Integer, Hash)>] APIListAPIScreenshot data, response status code and response headers
    def get_screenshot_names_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_screenshot_names ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_screenshot_names"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_screenshot_names"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_screenshot_names"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/screenshot-names'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshot'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_screenshot_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get screenshot names.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPIScreenshot]
    def get_screenshot_names1(run_id, opts = {})
      data, _status_code, _headers = get_screenshot_names1_with_http_info(run_id, opts)
      data
    end

    # Get screenshot names.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPIScreenshot, Integer, Hash)>] APIListAPIScreenshot data, response status code and response headers
    def get_screenshot_names1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_screenshot_names1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_screenshot_names1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/screenshot-names'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshot'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_screenshot_names1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get screenshot names.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPIScreenshot]
    def get_screenshot_names2(project_id, run_id, opts = {})
      data, _status_code, _headers = get_screenshot_names2_with_http_info(project_id, run_id, opts)
      data
    end

    # Get screenshot names.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPIScreenshot, Integer, Hash)>] APIListAPIScreenshot data, response status code and response headers
    def get_screenshot_names2_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_screenshot_names2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_screenshot_names2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_screenshot_names2"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/screenshot-names'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshot'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_screenshot_names2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get service.
    # @param service_id
    # @param [Hash] opts the optional parameters
    # @return [APIService]
    def get_service(service_id, opts = {})
      data, _status_code, _headers = get_service_with_http_info(service_id, opts)
      data
    end

    # Get service.
    # @param service_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIService, Integer, Hash)>] APIService data, response status code and response headers
    def get_service_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_service ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling AllEndpointsApi.get_service"
      end
      # resource path
      local_var_path = '/api/v2/admin/services/{serviceId}'.sub('{' + 'serviceId' + '}', service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get services.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :in_use  (default to false)
    # @option opts [BOOLEAN] :not_archived  (default to false)
    # @option opts [BOOLEAN] :active_only  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;pricePerHour_a&lt;br&gt;sort&#x3D;centPrice_a&lt;br&gt;sort&#x3D;customPlan_a&lt;br&gt;sort&#x3D;includedHours_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;commonId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;activated_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230365751&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;activatetime_eq_1700230365751&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;priceperhour_eq_1&lt;br&gt;filter&#x3D;centprice_eq_1&lt;br&gt;filter&#x3D;customplan_eq_true&lt;br&gt;filter&#x3D;includedhours_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;commonid_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;activated_eq_true
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIService]
    def get_services(opts = {})
      data, _status_code, _headers = get_services_with_http_info(opts)
      data
    end

    # Get services.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :in_use
    # @option opts [BOOLEAN] :not_archived
    # @option opts [BOOLEAN] :active_only
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;pricePerHour_a&lt;br&gt;sort&#x3D;centPrice_a&lt;br&gt;sort&#x3D;customPlan_a&lt;br&gt;sort&#x3D;includedHours_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;commonId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;activated_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230365751&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;activatetime_eq_1700230365751&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;priceperhour_eq_1&lt;br&gt;filter&#x3D;centprice_eq_1&lt;br&gt;filter&#x3D;customplan_eq_true&lt;br&gt;filter&#x3D;includedhours_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;commonid_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;activated_eq_true
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIService, Integer, Hash)>] APIListAPIService data, response status code and response headers
    def get_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_services ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/services'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inUse'] = opts[:'in_use'] if !opts[:'in_use'].nil?
      query_params[:'notArchived'] = opts[:'not_archived'] if !opts[:'not_archived'].nil?
      query_params[:'activeOnly'] = opts[:'active_only'] if !opts[:'active_only'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get settings.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_vulnerable_data  (default to false)
    # @return [Hash<String, String>]
    def get_settings(opts = {})
      data, _status_code, _headers = get_settings_with_http_info(opts)
      data
    end

    # Get settings.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_vulnerable_data
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def get_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_settings ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/settings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withVulnerableData'] = opts[:'with_vulnerable_data'] if !opts[:'with_vulnerable_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'Hash<String, String>'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get specific device cleanup configuration.
    # @param serial_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceCleanupConfiguration]
    def get_specific_device_cleanup_configuration(serial_id, opts = {})
      data, _status_code, _headers = get_specific_device_cleanup_configuration_with_http_info(serial_id, opts)
      data
    end

    # Get specific device cleanup configuration.
    # @param serial_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceCleanupConfiguration, Integer, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def get_specific_device_cleanup_configuration_with_http_info(serial_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_specific_device_cleanup_configuration ...'
      end
      # verify the required parameter 'serial_id' is set
      if @api_client.config.client_side_validation && serial_id.nil?
        fail ArgumentError, "Missing the required parameter 'serial_id' when calling AllEndpointsApi.get_specific_device_cleanup_configuration"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/specific'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serialId'] = serial_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceCleanupConfiguration'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_specific_device_cleanup_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device cleanup configuration.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_specific_device_cleanup_configuration1(id, opts = {})
      get_specific_device_cleanup_configuration1_with_http_info(id, opts)
      nil
    end

    # Delete device cleanup configuration.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_specific_device_cleanup_configuration1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_specific_device_cleanup_configuration1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_specific_device_cleanup_configuration1"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_specific_device_cleanup_configuration1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get basic cloud info.
    # @param [Hash] opts the optional parameters
    # @return [APICloudInfo]
    def get_status(opts = {})
      data, _status_code, _headers = get_status_with_http_info(opts)
      data
    end

    # Get basic cloud info.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APICloudInfo, Integer, Hash)>] APICloudInfo data, response status code and response headers
    def get_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_status ...'
      end
      # resource path
      local_var_path = '/api/v2/info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APICloudInfo'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get overview status.
    # @param [Hash] opts the optional parameters
    # @return [APIAdminOverview]
    def get_system_overview(opts = {})
      data, _status_code, _headers = get_system_overview_with_http_info(opts)
      data
    end

    # Get overview status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminOverview, Integer, Hash)>] APIAdminOverview data, response status code and response headers
    def get_system_overview_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_system_overview ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/overview'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminOverview'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_system_overview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [APITestRun]
    def get_test_run(run_id, opts = {})
      data, _status_code, _headers = get_test_run_with_http_info(run_id, opts)
      data
    end

    # Get test run.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def get_test_run_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run data availability.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APITestRunDataAvailability]
    def get_test_run_data_availability_with_project(project_id, run_id, opts = {})
      data, _status_code, _headers = get_test_run_data_availability_with_project_with_http_info(project_id, run_id, opts)
      data
    end

    # Get test run data availability.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunDataAvailability, Integer, Hash)>] APITestRunDataAvailability data, response status code and response headers
    def get_test_run_data_availability_with_project_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_data_availability_with_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_test_run_data_availability_with_project"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_data_availability_with_project"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/data-availability'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRunDataAvailability'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_data_availability_with_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run data availability.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id
    # @option opts [Integer] :project_id
    # @return [APITestRunDataAvailability]
    def get_test_run_data_availability_with_test_run(run_id, opts = {})
      data, _status_code, _headers = get_test_run_data_availability_with_test_run_with_http_info(run_id, opts)
      data
    end

    # Get test run data availability.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id
    # @option opts [Integer] :project_id
    # @return [Array<(APITestRunDataAvailability, Integer, Hash)>] APITestRunDataAvailability data, response status code and response headers
    def get_test_run_data_availability_with_test_run_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_data_availability_with_test_run ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_data_availability_with_test_run"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/data-availability'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRunDataAvailability'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_data_availability_with_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run data availability.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APITestRunDataAvailability]
    def get_test_run_data_availability_with_user(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_test_run_data_availability_with_user_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Get test run data availability.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRunDataAvailability, Integer, Hash)>] APITestRunDataAvailability data, response status code and response headers
    def get_test_run_data_availability_with_user_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_data_availability_with_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_test_run_data_availability_with_user"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_test_run_data_availability_with_user"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_data_availability_with_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/data-availability'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRunDataAvailability'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_data_availability_with_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run screenshots by name.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIScreenshotExtended]
    def get_test_run_screenshots(user_id, project_id, run_id, name, opts = {})
      data, _status_code, _headers = get_test_run_screenshots_with_http_info(user_id, project_id, run_id, name, opts)
      data
    end

    # Get test run screenshots by name.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIScreenshotExtended, Integer, Hash)>] APIListAPIScreenshotExtended data, response status code and response headers
    def get_test_run_screenshots_with_http_info(user_id, project_id, run_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_screenshots ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_test_run_screenshots"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_test_run_screenshots"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_screenshots"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.get_test_run_screenshots"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/screenshots'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshotExtended'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_screenshots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run screenshots by name.
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIScreenshotExtended]
    def get_test_run_screenshots1(run_id, name, opts = {})
      data, _status_code, _headers = get_test_run_screenshots1_with_http_info(run_id, name, opts)
      data
    end

    # Get test run screenshots by name.
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIScreenshotExtended, Integer, Hash)>] APIListAPIScreenshotExtended data, response status code and response headers
    def get_test_run_screenshots1_with_http_info(run_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_screenshots1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_screenshots1"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.get_test_run_screenshots1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/screenshots'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshotExtended'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_screenshots1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run screenshots by name.
    # @param project_id
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIScreenshotExtended]
    def get_test_run_screenshots2(project_id, run_id, name, opts = {})
      data, _status_code, _headers = get_test_run_screenshots2_with_http_info(project_id, run_id, name, opts)
      data
    end

    # Get test run screenshots by name.
    # @param project_id
    # @param run_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIScreenshotExtended, Integer, Hash)>] APIListAPIScreenshotExtended data, response status code and response headers
    def get_test_run_screenshots2_with_http_info(project_id, run_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_screenshots2 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_test_run_screenshots2"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_screenshots2"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.get_test_run_screenshots2"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/screenshots'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshotExtended'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_screenshots2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tag.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @return [APITag]
    def get_test_run_tag(user_id, project_id, run_id, tag_id, opts = {})
      data, _status_code, _headers = get_test_run_tag_with_http_info(user_id, project_id, run_id, tag_id, opts)
      data
    end

    # Get test run tag.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITag, Integer, Hash)>] APITag data, response status code and response headers
    def get_test_run_tag_with_http_info(user_id, project_id, run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_tag ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_test_run_tag"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_test_run_tag"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_tag"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AllEndpointsApi.get_test_run_tag"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/tags/{tagId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tag.
    # @param project_id
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @return [APITag]
    def get_test_run_tag1(project_id, run_id, tag_id, opts = {})
      data, _status_code, _headers = get_test_run_tag1_with_http_info(project_id, run_id, tag_id, opts)
      data
    end

    # Get test run tag.
    # @param project_id
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITag, Integer, Hash)>] APITag data, response status code and response headers
    def get_test_run_tag1_with_http_info(project_id, run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_tag1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_test_run_tag1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_tag1"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AllEndpointsApi.get_test_run_tag1"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/tags/{tagId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_tag1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tag.
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [APITag]
    def get_test_run_tag_with_run(run_id, tag_id, opts = {})
      data, _status_code, _headers = get_test_run_tag_with_run_with_http_info(run_id, tag_id, opts)
      data
    end

    # Get test run tag.
    # @param run_id
    # @param tag_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [Array<(APITag, Integer, Hash)>] APITag data, response status code and response headers
    def get_test_run_tag_with_run_with_http_info(run_id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_tag_with_run ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_tag_with_run"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AllEndpointsApi.get_test_run_tag_with_run"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/tags/{tagId}'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_tag_with_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tags.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPITag]
    def get_test_run_tags(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_test_run_tags_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Get test run tags.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPITag, Integer, Hash)>] APIListAPITag data, response status code and response headers
    def get_test_run_tags_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_tags ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_test_run_tags"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_test_run_tags"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_tags"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/tags'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run tags.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPITag]
    def get_test_run_tags1(run_id, opts = {})
      data, _status_code, _headers = get_test_run_tags1_with_http_info(run_id, opts)
      data
    end

    # Get test run tags.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;testRunId_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;testrunid_eq_1&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPITag, Integer, Hash)>] APIListAPITag data, response status code and response headers
    def get_test_run_tags1_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_run_tags1 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_test_run_tags1"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/tags'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITag'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_run_tags1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230364648&lt;br&gt;filter&#x3D;starttime_eq_1700230364648&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPITestRun]
    def get_test_runs(opts = {})
      data, _status_code, _headers = get_test_runs_with_http_info(opts)
      data
    end

    # Get test runs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230364648&lt;br&gt;filter&#x3D;starttime_eq_1700230364648&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPITestRun, Integer, Hash)>] APIListAPITestRun data, response status code and response headers
    def get_test_runs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_test_runs ...'
      end
      # resource path
      local_var_path = '/api/v2/runs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_test_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get trial statistics.
    # @param from_time
    # @param to_time
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;country_a&lt;br&gt;sort&#x3D;organization_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;email_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;country_eq_value&lt;br&gt;filter&#x3D;organization_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_value&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAdminTrialStatistics]
    def get_trial_statistics(from_time, to_time, opts = {})
      data, _status_code, _headers = get_trial_statistics_with_http_info(from_time, to_time, opts)
      data
    end

    # Get trial statistics.
    # @param from_time
    # @param to_time
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;country_a&lt;br&gt;sort&#x3D;organization_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;email_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;country_eq_value&lt;br&gt;filter&#x3D;organization_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_value&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAdminTrialStatistics, Integer, Hash)>] APIListAPIAdminTrialStatistics data, response status code and response headers
    def get_trial_statistics_with_http_info(from_time, to_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_trial_statistics ...'
      end
      # verify the required parameter 'from_time' is set
      if @api_client.config.client_side_validation && from_time.nil?
        fail ArgumentError, "Missing the required parameter 'from_time' when calling AllEndpointsApi.get_trial_statistics"
      end
      # verify the required parameter 'to_time' is set
      if @api_client.config.client_side_validation && to_time.nil?
        fail ArgumentError, "Missing the required parameter 'to_time' when calling AllEndpointsApi.get_trial_statistics"
      end
      # resource path
      local_var_path = '/api/v2/admin/statistics/trials'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromTime'] = from_time
      query_params[:'toTime'] = to_time
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAdminTrialStatistics'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_trial_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def get_user(user_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(user_id, opts)
      data
    end

    # Get user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def get_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group user.
    # @param user_id
    # @param access_group_id
    # @param participant_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def get_user1(user_id, access_group_id, participant_id, opts = {})
      data, _status_code, _headers = get_user1_with_http_info(user_id, access_group_id, participant_id, opts)
      data
    end

    # Get access group user.
    # @param user_id
    # @param access_group_id
    # @param participant_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def get_user1_with_http_info(user_id, access_group_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get_user1"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling AllEndpointsApi.get_user1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users/{participantId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group user.
    # @param access_group_id
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def get_user2(access_group_id, user_id, opts = {})
      data, _status_code, _headers = get_user2_with_http_info(access_group_id, user_id, opts)
      data
    end

    # Get access group user.
    # @param access_group_id
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def get_user2_with_http_info(access_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user2 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get_user2"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user2"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/users/{userId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get active services.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;cbtId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;cbtid_eq_value&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;starttime_eq_1700230363766&lt;br&gt;filter&#x3D;_endtime_eq_1700230363766&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAccountService]
    def get_user_active_services(user_id, opts = {})
      data, _status_code, _headers = get_user_active_services_with_http_info(user_id, opts)
      data
    end

    # Get active services.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;cbtId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;cbtid_eq_value&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;starttime_eq_1700230363766&lt;br&gt;filter&#x3D;_endtime_eq_1700230363766&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAccountService, Integer, Hash)>] APIListAPIAccountService data, response status code and response headers
    def get_user_active_services_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_active_services ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_active_services"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/services/active'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAccountService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_active_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get users billing periods.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;additionalHoursPrice_a&lt;br&gt;sort&#x3D;mail_a&lt;br&gt;sort&#x3D;totalPrice_a&lt;br&gt;sort&#x3D;startBillingPeriod_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;_endBillingPeriod_a&lt;br&gt;sort&#x3D;subscriptionEnd_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;servicePrice_a&lt;br&gt;sort&#x3D;lastPaymentDate_a&lt;br&gt;sort&#x3D;subscriptionStart_a&lt;br&gt;sort&#x3D;additionalHours_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;additionalHoursPaymentDate_a&lt;br&gt;sort&#x3D;paymentDate_a&lt;br&gt;sort&#x3D;plan_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;additionalhoursprice_eq_1&lt;br&gt;filter&#x3D;mail_eq_value&lt;br&gt;filter&#x3D;totalprice_eq_1&lt;br&gt;filter&#x3D;startbillingperiod_eq_1700230364395&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;_endbillingperiod_eq_1700230364395&lt;br&gt;filter&#x3D;subscriptionend_eq_1700230364395&lt;br&gt;filter&#x3D;createtime_eq_1700230364395&lt;br&gt;filter&#x3D;serviceprice_eq_1&lt;br&gt;filter&#x3D;lastpaymentdate_eq_1700230364395&lt;br&gt;filter&#x3D;paid_eq_true&lt;br&gt;filter&#x3D;subscriptionstart_eq_1700230364395&lt;br&gt;filter&#x3D;additionalhours_eq_1&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;plan_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIBillingPeriod]
    def get_user_billing_periods(user_id, opts = {})
      data, _status_code, _headers = get_user_billing_periods_with_http_info(user_id, opts)
      data
    end

    # Get users billing periods.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;additionalHoursPrice_a&lt;br&gt;sort&#x3D;mail_a&lt;br&gt;sort&#x3D;totalPrice_a&lt;br&gt;sort&#x3D;startBillingPeriod_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;_endBillingPeriod_a&lt;br&gt;sort&#x3D;subscriptionEnd_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;servicePrice_a&lt;br&gt;sort&#x3D;lastPaymentDate_a&lt;br&gt;sort&#x3D;subscriptionStart_a&lt;br&gt;sort&#x3D;additionalHours_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;additionalHoursPaymentDate_a&lt;br&gt;sort&#x3D;paymentDate_a&lt;br&gt;sort&#x3D;plan_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;additionalhoursprice_eq_1&lt;br&gt;filter&#x3D;mail_eq_value&lt;br&gt;filter&#x3D;totalprice_eq_1&lt;br&gt;filter&#x3D;startbillingperiod_eq_1700230364395&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;_endbillingperiod_eq_1700230364395&lt;br&gt;filter&#x3D;subscriptionend_eq_1700230364395&lt;br&gt;filter&#x3D;createtime_eq_1700230364395&lt;br&gt;filter&#x3D;serviceprice_eq_1&lt;br&gt;filter&#x3D;lastpaymentdate_eq_1700230364395&lt;br&gt;filter&#x3D;paid_eq_true&lt;br&gt;filter&#x3D;subscriptionstart_eq_1700230364395&lt;br&gt;filter&#x3D;additionalhours_eq_1&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;plan_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIBillingPeriod, Integer, Hash)>] APIListAPIBillingPeriod data, response status code and response headers
    def get_user_billing_periods_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_billing_periods ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_billing_periods"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/billing-periods'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIBillingPeriod'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_billing_periods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user by recovery key.
    # @param recovery_key
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def get_user_by_recovery_key(recovery_key, opts = {})
      data, _status_code, _headers = get_user_by_recovery_key_with_http_info(recovery_key, opts)
      data
    end

    # Get user by recovery key.
    # @param recovery_key
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def get_user_by_recovery_key_with_http_info(recovery_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_by_recovery_key ...'
      end
      # verify the required parameter 'recovery_key' is set
      if @api_client.config.client_side_validation && recovery_key.nil?
        fail ArgumentError, "Missing the required parameter 'recovery_key' when calling AllEndpointsApi.get_user_by_recovery_key"
      end
      # resource path
      local_var_path = '/api/v2/users/recoveries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'recoveryKey'] = recovery_key

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_by_recovery_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceGroup]
    def get_user_device_group(user_id, device_group_id, opts = {})
      data, _status_code, _headers = get_user_device_group_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Get device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def get_user_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.get_user_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device groups.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_public  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceGroup]
    def get_user_device_groups(user_id, opts = {})
      data, _status_code, _headers = get_user_device_groups_with_http_info(user_id, opts)
      data
    end

    # Get device groups.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_public
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceGroup, Integer, Hash)>] APIListAPIDeviceGroup data, response status code and response headers
    def get_user_device_groups_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_device_groups ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_device_groups"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withPublic'] = opts[:'with_public'] if !opts[:'with_public'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_device_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshots.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIScreenshot]
    def get_user_device_session_screenshots(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_user_device_session_screenshots_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session screenshots.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;originalName_a&lt;br&gt;sort&#x3D;takeTimestamp_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;originalname_eq_value&lt;br&gt;filter&#x3D;taketimestamp_eq_1&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIScreenshot, Integer, Hash)>] APIListAPIScreenshot data, response status code and response headers
    def get_user_device_session_screenshots_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_device_session_screenshots ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_device_session_screenshots"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_user_device_session_screenshots"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_user_device_session_screenshots"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_user_device_session_screenshots"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/screenshots'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIScreenshot'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_device_session_screenshots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session step.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param device_session_step_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSessionStep]
    def get_user_device_session_step(user_id, project_id, run_id, device_session_id, device_session_step_id, opts = {})
      data, _status_code, _headers = get_user_device_session_step_with_http_info(user_id, project_id, run_id, device_session_id, device_session_step_id, opts)
      data
    end

    # Get device session step.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param device_session_step_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSessionStep, Integer, Hash)>] APIDeviceSessionStep data, response status code and response headers
    def get_user_device_session_step_with_http_info(user_id, project_id, run_id, device_session_id, device_session_step_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_device_session_step ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_device_session_step"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_user_device_session_step"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_user_device_session_step"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_user_device_session_step"
      end
      # verify the required parameter 'device_session_step_id' is set
      if @api_client.config.client_side_validation && device_session_step_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_step_id' when calling AllEndpointsApi.get_user_device_session_step"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/steps/{deviceSessionStepId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'deviceSessionStepId' + '}', device_session_step_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSessionStep'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_device_session_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def get_user_device_session_with_users(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = get_user_device_session_with_users_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Get device session.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def get_user_device_session_with_users_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_device_session_with_users ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_device_session_with_users"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_user_device_session_with_users"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_user_device_session_with_users"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_user_device_session_with_users"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_device_session_with_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device usage statistics.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account  (default to false)
    # @option opts [BOOLEAN] :skip_common_project  (default to false)
    # @option opts [BOOLEAN] :skip_shared  (default to false)
    # @option opts [Integer] :start_time
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;deviceSession.createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;failedDeviceSessions_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;totalDeviceSessions_a&lt;br&gt;sort&#x3D;deviceSession.userId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicesession.createtime_eq_1700230364248&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;devicesession.userid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceUsage]
    def get_user_device_usage_statistics(user_id, opts = {})
      data, _status_code, _headers = get_user_device_usage_statistics_with_http_info(user_id, opts)
      data
    end

    # Get device usage statistics.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account
    # @option opts [BOOLEAN] :skip_common_project
    # @option opts [BOOLEAN] :skip_shared
    # @option opts [Integer] :start_time
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;deviceSession.createTime_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;failedDeviceSessions_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;totalDeviceSessions_a&lt;br&gt;sort&#x3D;deviceSession.userId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;devicesession.createtime_eq_1700230364248&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;devicesession.userid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceUsage, Integer, Hash)>] APIListAPIDeviceUsage data, response status code and response headers
    def get_user_device_usage_statistics_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_device_usage_statistics ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_device_usage_statistics"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-usage'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'skipCommonProject'] = opts[:'skip_common_project'] if !opts[:'skip_common_project'].nil?
      query_params[:'skipShared'] = opts[:'skip_shared'] if !opts[:'skip_shared'].nil?
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceUsage'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_device_usage_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def get_user_file(user_id, file_id, opts = {})
      data, _status_code, _headers = get_user_file_with_http_info(user_id, file_id, opts)
      data
    end

    # Get file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def get_user_file_with_http_info(user_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_file ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.get_user_file"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def get_user_file1(file_id, opts = {})
      data, _status_code, _headers = get_user_file1_with_http_info(file_id, opts)
      data
    end

    # Get file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def get_user_file1_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_file1 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.get_user_file1"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_file1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get files.
    # Owned files
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364193&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserFile]
    def get_user_files(user_id, opts = {})
      data, _status_code, _headers = get_user_files_with_http_info(user_id, opts)
      data
    end

    # Get files.
    # Owned files
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tag
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;size_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;inputType_a&lt;br&gt;sort&#x3D;mimetype_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;direction_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;size_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230364193&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;inputtype_eq_application&lt;br&gt;filter&#x3D;mimetype_eq_value&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;state_eq_preparing&lt;br&gt;filter&#x3D;direction_eq_input
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserFile, Integer, Hash)>] APIListAPIUserFile data, response status code and response headers
    def get_user_files_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_files ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_files"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag[]'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties
    # @return [APIDeviceSession]
    def get_user_inspector_device_session(user_id, device_session_id, opts = {})
      data, _status_code, _headers = get_user_inspector_device_session_with_http_info(user_id, device_session_id, opts)
      data
    end

    # Get device session.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def get_user_inspector_device_session_with_http_info(user_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_inspector_device_session ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_inspector_device_session"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_user_inspector_device_session"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withProperties'] = opts[:'with_properties'] if !opts[:'with_properties'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_inspector_device_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get connection for device session.
    # @param user_id
    # @param device_session_id
    # @param connection_id
    # @param [Hash] opts the optional parameters
    # @return [APIConnection]
    def get_user_inspector_device_session_connection(user_id, device_session_id, connection_id, opts = {})
      data, _status_code, _headers = get_user_inspector_device_session_connection_with_http_info(user_id, device_session_id, connection_id, opts)
      data
    end

    # Get connection for device session.
    # @param user_id
    # @param device_session_id
    # @param connection_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIConnection, Integer, Hash)>] APIConnection data, response status code and response headers
    def get_user_inspector_device_session_connection_with_http_info(user_id, device_session_id, connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_inspector_device_session_connection ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_inspector_device_session_connection"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_user_inspector_device_session_connection"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling AllEndpointsApi.get_user_inspector_device_session_connection"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/connections/{connectionId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'connectionId' + '}', connection_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIConnection'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_inspector_device_session_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get user licenses.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;closeTime_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;privateInstance_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1700230365671&lt;br&gt;filter&#x3D;closetime_eq_1700230365671&lt;br&gt;filter&#x3D;activatetime_eq_1700230365671&lt;br&gt;filter&#x3D;privateinstance_eq_true&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;status_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPILicense]
    def get_user_licenses(user_id, opts = {})
      data, _status_code, _headers = get_user_licenses_with_http_info(user_id, opts)
      data
    end

    # Get user licenses.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;expireTime_a&lt;br&gt;sort&#x3D;closeTime_a&lt;br&gt;sort&#x3D;activateTime_a&lt;br&gt;sort&#x3D;privateInstance_a&lt;br&gt;sort&#x3D;userEmail_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;expiretime_eq_1700230365671&lt;br&gt;filter&#x3D;closetime_eq_1700230365671&lt;br&gt;filter&#x3D;activatetime_eq_1700230365671&lt;br&gt;filter&#x3D;privateinstance_eq_true&lt;br&gt;filter&#x3D;useremail_eq_value&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;status_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPILicense, Integer, Hash)>] APIListAPILicense data, response status code and response headers
    def get_user_licenses_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_licenses ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_licenses"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/licenses'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPILicense'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APINotification]
    def get_user_notification(user_id, id, opts = {})
      data, _status_code, _headers = get_user_notification_with_http_info(user_id, id, opts)
      data
    end

    # Get notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APINotification, Integer, Hash)>] APINotification data, response status code and response headers
    def get_user_notification_with_http_info(user_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_notification ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_notification"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.get_user_notification"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications/{id}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APINotification'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get notifications.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_all&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPINotification]
    def get_user_notifications(user_id, opts = {})
      data, _status_code, _headers = get_user_notifications_with_http_info(user_id, opts)
      data
    end

    # Get notifications.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;scope_a&lt;br&gt;sort&#x3D;channel_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;projectId_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;scope_eq_all&lt;br&gt;filter&#x3D;channel_eq_slack&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPINotification, Integer, Hash)>] APIListAPINotification data, response status code and response headers
    def get_user_notifications_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_notifications ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_notifications"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPINotification'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [APIProject]
    def get_user_project(user_id, project_id, opts = {})
      data, _status_code, _headers = get_user_project_with_http_info(user_id, project_id, opts)
      data
    end

    # Get project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProject, Integer, Hash)>] APIProject data, response status code and response headers
    def get_user_project_with_http_info(user_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_project ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_user_project"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProject'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230363968&lt;br&gt;filter&#x3D;starttime_eq_1700230363968&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPITestRun]
    def get_user_project_test_runs(user_id, project_id, opts = {})
      data, _status_code, _headers = get_user_project_test_runs_with_http_info(user_id, project_id, opts)
      data
    end

    # Get test runs.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230363968&lt;br&gt;filter&#x3D;starttime_eq_1700230363968&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPITestRun, Integer, Hash)>] APIListAPITestRun data, response status code and response headers
    def get_user_project_test_runs_with_http_info(user_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_project_test_runs ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_project_test_runs"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_user_project_test_runs"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_project_test_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get projects.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account  (default to false)
    # @option opts [BOOLEAN] :skip_common_project  (default to false)
    # @option opts [BOOLEAN] :skip_shared  (default to false)
    # @option opts [BOOLEAN] :show_statistics  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;sharedByEmail_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230363889&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230363889&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;readonly_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sharedbyemail_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIProject]
    def get_user_projects(user_id, opts = {})
      data, _status_code, _headers = get_user_projects_with_http_info(user_id, opts)
      data
    end

    # Get projects.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account
    # @option opts [BOOLEAN] :skip_common_project
    # @option opts [BOOLEAN] :skip_shared
    # @option opts [BOOLEAN] :show_statistics
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;archiveTime_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;description_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;sharedByEmail_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;archivetime_eq_1700230363889&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230363889&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;description_eq_value&lt;br&gt;filter&#x3D;readonly_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;sharedbyemail_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIProject, Integer, Hash)>] APIListAPIProject data, response status code and response headers
    def get_user_projects_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_projects ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_projects"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'skipCommonProject'] = opts[:'skip_common_project'] if !opts[:'skip_common_project'].nil?
      query_params[:'skipShared'] = opts[:'skip_shared'] if !opts[:'skip_shared'].nil?
      query_params[:'showStatistics'] = opts[:'show_statistics'] if !opts[:'show_statistics'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIProject'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get reserved device time.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIBasicDeviceTime]
    def get_user_reserved_device_time(user_id, opts = {})
      data, _status_code, _headers = get_user_reserved_device_time_with_http_info(user_id, opts)
      data
    end

    # Get reserved device time.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIBasicDeviceTime, Integer, Hash)>] APIBasicDeviceTime data, response status code and response headers
    def get_user_reserved_device_time_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_reserved_device_time ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_reserved_device_time"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-time/reserved'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIBasicDeviceTime'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_reserved_device_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account service.
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccountService]
    def get_user_service(account_service_id, opts = {})
      data, _status_code, _headers = get_user_service_with_http_info(account_service_id, opts)
      data
    end

    # Get account service.
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountService, Integer, Hash)>] APIAccountService data, response status code and response headers
    def get_user_service_with_http_info(account_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_service ...'
      end
      # verify the required parameter 'account_service_id' is set
      if @api_client.config.client_side_validation && account_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_service_id' when calling AllEndpointsApi.get_user_service"
      end
      # resource path
      local_var_path = '/api/v2/admin/account-services/{accountServiceId}'.sub('{' + 'accountServiceId' + '}', account_service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccountService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account services.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;cbtId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;cbtid_eq_value&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;starttime_eq_1700230365684&lt;br&gt;filter&#x3D;_endtime_eq_1700230365684&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIAccountService]
    def get_user_services(user_id, opts = {})
      data, _status_code, _headers = get_user_services_with_http_info(user_id, opts)
      data
    end

    # Get account services.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;chargeType_a&lt;br&gt;sort&#x3D;active_a&lt;br&gt;sort&#x3D;activatedByName_a&lt;br&gt;sort&#x3D;serviceName_a&lt;br&gt;sort&#x3D;deactivatedByName_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;cbtId_a&lt;br&gt;sort&#x3D;price_a&lt;br&gt;sort&#x3D;autoRenew_a&lt;br&gt;sort&#x3D;paymentMethod_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;_endTime_a&lt;br&gt;sort&#x3D;id_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;deactivatereason_eq_initial_failure&lt;br&gt;filter&#x3D;chargetype_eq_concurrency&lt;br&gt;filter&#x3D;active_eq_true&lt;br&gt;filter&#x3D;activatedbyname_eq_value&lt;br&gt;filter&#x3D;servicename_eq_value&lt;br&gt;filter&#x3D;deactivatedbyname_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;cbtid_eq_value&lt;br&gt;filter&#x3D;price_eq_1&lt;br&gt;filter&#x3D;autorenew_eq_true&lt;br&gt;filter&#x3D;paymentmethod_eq_paypal&lt;br&gt;filter&#x3D;starttime_eq_1700230365684&lt;br&gt;filter&#x3D;_endtime_eq_1700230365684&lt;br&gt;filter&#x3D;id_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIAccountService, Integer, Hash)>] APIListAPIAccountService data, response status code and response headers
    def get_user_services_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_services ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_services"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/account-services'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIAccountService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get statistics.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account  (default to false)
    # @option opts [BOOLEAN] :skip_common_project  (default to false)
    # @option opts [BOOLEAN] :skip_shared  (default to false)
    # @option opts [Integer] :start_time
    # @return [APIUserStatistics]
    def get_user_statistics(user_id, opts = {})
      data, _status_code, _headers = get_user_statistics_with_http_info(user_id, opts)
      data
    end

    # Get statistics.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account
    # @option opts [BOOLEAN] :skip_common_project
    # @option opts [BOOLEAN] :skip_shared
    # @option opts [Integer] :start_time
    # @return [Array<(APIUserStatistics, Integer, Hash)>] APIUserStatistics data, response status code and response headers
    def get_user_statistics_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_statistics ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_statistics"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/statistics'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'skipCommonProject'] = opts[:'skip_common_project'] if !opts[:'skip_common_project'].nil?
      query_params[:'skipShared'] = opts[:'skip_shared'] if !opts[:'skip_shared'].nil?
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserStatistics'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def get_user_test_run(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = get_user_test_run_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Get test run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def get_user_test_run_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_test_run ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_test_run"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.get_user_test_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.get_user_test_run"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get test runs.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account  (default to false)
    # @option opts [BOOLEAN] :skip_common_project  (default to false)
    # @option opts [BOOLEAN] :skip_shared  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230363880&lt;br&gt;filter&#x3D;starttime_eq_1700230363880&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPITestRun]
    def get_user_test_runs(user_id, opts = {})
      data, _status_code, _headers = get_user_test_runs_with_http_info(user_id, opts)
      data
    end

    # Get test runs.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account
    # @option opts [BOOLEAN] :skip_common_project
    # @option opts [BOOLEAN] :skip_shared
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;frameworkId_a&lt;br&gt;sort&#x3D;frameworkName_a&lt;br&gt;sort&#x3D;deviceCount_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;executionRatio_a&lt;br&gt;sort&#x3D;successRatio_a&lt;br&gt;sort&#x3D;userId_a&lt;br&gt;sort&#x3D;common_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;startTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;state_a&lt;br&gt;sort&#x3D;projectId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;frameworkid_eq_1&lt;br&gt;filter&#x3D;frameworkname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;successratio_eq_1&lt;br&gt;filter&#x3D;userid_eq_1&lt;br&gt;filter&#x3D;common_eq_true&lt;br&gt;filter&#x3D;createtime_eq_1700230363880&lt;br&gt;filter&#x3D;starttime_eq_1700230363880&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;projectid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPITestRun, Integer, Hash)>] APIListAPITestRun data, response status code and response headers
    def get_user_test_runs_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_test_runs ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_test_runs"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/runs'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'skipCommonProject'] = opts[:'skip_common_project'] if !opts[:'skip_common_project'].nil?
      query_params[:'skipShared'] = opts[:'skip_shared'] if !opts[:'skip_shared'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_test_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get used device time.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIBasicDeviceTime]
    def get_user_used_device_time(user_id, opts = {})
      data, _status_code, _headers = get_user_used_device_time_with_http_info(user_id, opts)
      data
    end

    # Get used device time.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIBasicDeviceTime, Integer, Hash)>] APIBasicDeviceTime data, response status code and response headers
    def get_user_used_device_time_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_user_used_device_time ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_user_used_device_time"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-time/used'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIBasicDeviceTime'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_user_used_device_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get users.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_main_users  (default to false)
    # @option opts [BOOLEAN] :only_with_disabled_services  (default to false)
    # @option opts [String] :with_role
    # @option opts [BOOLEAN] :with_roles  (default to false)
    # @option opts [BOOLEAN] :with_address  (default to false)
    # @option opts [BOOLEAN] :with_user_info  (default to true)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;serviceIds_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;deleteTime_a&lt;br&gt;sort&#x3D;accountServiceIds_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;serviceids_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230363668&lt;br&gt;filter&#x3D;deletetime_eq_1700230363668&lt;br&gt;filter&#x3D;accountserviceids_eq_1&lt;br&gt;filter&#x3D;ismainuser_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value&lt;br&gt;filter&#x3D;status_eq_inactive
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUser]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # Get users.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_main_users
    # @option opts [BOOLEAN] :only_with_disabled_services
    # @option opts [String] :with_role
    # @option opts [BOOLEAN] :with_roles
    # @option opts [BOOLEAN] :with_address
    # @option opts [BOOLEAN] :with_user_info
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;mainUserEmail_a&lt;br&gt;sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;serviceIds_a&lt;br&gt;sort&#x3D;mainUserId_a&lt;br&gt;sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;deleteTime_a&lt;br&gt;sort&#x3D;accountServiceIds_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a&lt;br&gt;sort&#x3D;status_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;mainuseremail_eq_value&lt;br&gt;filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;serviceids_eq_1&lt;br&gt;filter&#x3D;mainuserid_eq_1&lt;br&gt;filter&#x3D;createtime_eq_1700230363668&lt;br&gt;filter&#x3D;deletetime_eq_1700230363668&lt;br&gt;filter&#x3D;accountserviceids_eq_1&lt;br&gt;filter&#x3D;ismainuser_eq_true&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value&lt;br&gt;filter&#x3D;status_eq_inactive
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUser, Integer, Hash)>] APIListAPIUser data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_users ...'
      end
      # resource path
      local_var_path = '/api/v2/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'onlyMainUsers'] = opts[:'only_main_users'] if !opts[:'only_main_users'].nil?
      query_params[:'onlyWithDisabledServices'] = opts[:'only_with_disabled_services'] if !opts[:'only_with_disabled_services'].nil?
      query_params[:'withRole'] = opts[:'with_role'] if !opts[:'with_role'].nil?
      query_params[:'withRoles'] = opts[:'with_roles'] if !opts[:'with_roles'].nil?
      query_params[:'WITH_ADDRESS'] = opts[:'with_address'] if !opts[:'with_address'].nil?
      query_params[:'WITH_USER_INFO'] = opts[:'with_user_info'] if !opts[:'with_user_info'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group users.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUser]
    def get_users1(user_id, access_group_id, opts = {})
      data, _status_code, _headers = get_users1_with_http_info(user_id, access_group_id, opts)
      data
    end

    # Get access group users.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUser, Integer, Hash)>] APIListAPIUser data, response status code and response headers
    def get_users1_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_users1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_users1"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get_users1"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}/users'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_users1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access group users.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUser]
    def get_users2(access_group_id, opts = {})
      data, _status_code, _headers = get_users2_with_http_info(access_group_id, opts)
      data
    end

    # Get access group users.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;firstName_a&lt;br&gt;sort&#x3D;lastName_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;email_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;firstname_eq_value&lt;br&gt;filter&#x3D;lastname_eq_value&lt;br&gt;filter&#x3D;accessgroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;email_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUser, Integer, Hash)>] APIListAPIUser data, response status code and response headers
    def get_users2_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_users2 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.get_users2"
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}/users'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_users2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device time history.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1700230364254&lt;br&gt;filter&#x3D;_endtime_eq_1700230364254&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIUserDeviceTime]
    def get_users_device_time_history(user_id, opts = {})
      data, _status_code, _headers = get_users_device_time_history_with_http_info(user_id, opts)
      data
    end

    # Get device time history.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1700230364254&lt;br&gt;filter&#x3D;_endtime_eq_1700230364254&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIUserDeviceTime, Integer, Hash)>] APIListAPIUserDeviceTime data, response status code and response headers
    def get_users_device_time_history_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_users_device_time_history ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_users_device_time_history"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-time'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIUserDeviceTime'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_users_device_time_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device time history.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1700230364262&lt;br&gt;filter&#x3D;_endtime_eq_1700230364262&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIUserDeviceTimeSummary]
    def get_users_device_time_history_summary(user_id, opts = {})
      data, _status_code, _headers = get_users_device_time_history_summary_with_http_info(user_id, opts)
      data
    end

    # Get device time history.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :for_whole_account
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;createTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;type_a&lt;br&gt;sort&#x3D;userName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;starttime_eq_1700230364262&lt;br&gt;filter&#x3D;_endtime_eq_1700230364262&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;username_eq_value&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIUserDeviceTimeSummary, Integer, Hash)>] APIUserDeviceTimeSummary data, response status code and response headers
    def get_users_device_time_history_summary_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_users_device_time_history_summary ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_users_device_time_history_summary"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-time-summary'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'forWholeAccount'] = opts[:'for_whole_account'] if !opts[:'for_whole_account'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserDeviceTimeSummary'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_users_device_time_history_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VisualTests enabled status.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIVisualTestAccess]
    def get_visual_test_access(user_id, opts = {})
      data, _status_code, _headers = get_visual_test_access_with_http_info(user_id, opts)
      data
    end

    # Get VisualTests enabled status.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIVisualTestAccess, Integer, Hash)>] APIVisualTestAccess data, response status code and response headers
    def get_visual_test_access_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_visual_test_access ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_visual_test_access"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account/visualtest/access'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIVisualTestAccess'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_visual_test_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve VisualTests images.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIListAPIVisualTestImage]
    def get_visual_test_images(user_id, device_session_id, opts = {})
      data, _status_code, _headers = get_visual_test_images_with_http_info(user_id, device_session_id, opts)
      data
    end

    # Retrieve VisualTests images.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIListAPIVisualTestImage, Integer, Hash)>] APIListAPIVisualTestImage data, response status code and response headers
    def get_visual_test_images_with_http_info(user_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.get_visual_test_images ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.get_visual_test_images"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.get_visual_test_images"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/visualtest/images'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIVisualTestImage'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#get_visual_test_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Load user preferences.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUserPreference]
    def load_user_preferences(user_id, opts = {})
      data, _status_code, _headers = load_user_preferences_with_http_info(user_id, opts)
      data
    end

    # Load user preferences.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserPreference, Integer, Hash)>] APIUserPreference data, response status code and response headers
    def load_user_preferences_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.load_user_preferences ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.load_user_preferences"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/preferences'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserPreference'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#load_user_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Load ui preferences.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [String]
    def load_user_ui_preferences(user_id, opts = {})
      data, _status_code, _headers = load_user_ui_preferences_with_http_info(user_id, opts)
      data
    end

    # Load ui preferences.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def load_user_ui_preferences_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.load_user_ui_preferences ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.load_user_ui_preferences"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/ui-preferences'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'String'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#load_user_ui_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark billing period as paid.
    # @param billing_period_id
    # @param [Hash] opts the optional parameters
    # @return [APIBillingPeriod]
    def mark_billing_period_as_paid(billing_period_id, opts = {})
      data, _status_code, _headers = mark_billing_period_as_paid_with_http_info(billing_period_id, opts)
      data
    end

    # Mark billing period as paid.
    # @param billing_period_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIBillingPeriod, Integer, Hash)>] APIBillingPeriod data, response status code and response headers
    def mark_billing_period_as_paid_with_http_info(billing_period_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.mark_billing_period_as_paid ...'
      end
      # verify the required parameter 'billing_period_id' is set
      if @api_client.config.client_side_validation && billing_period_id.nil?
        fail ArgumentError, "Missing the required parameter 'billing_period_id' when calling AllEndpointsApi.mark_billing_period_as_paid"
      end
      # resource path
      local_var_path = '/api/v2/admin/billing-periods/{billingPeriodId}'.sub('{' + 'billingPeriodId' + '}', billing_period_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIBillingPeriod'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#mark_billing_period_as_paid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set new password after recovery.
    # @param key
    # @param password
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def recover_password(key, password, opts = {})
      data, _status_code, _headers = recover_password_with_http_info(key, password, opts)
      data
    end

    # Set new password after recovery.
    # @param key
    # @param password
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def recover_password_with_http_info(key, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.recover_password ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AllEndpointsApi.recover_password"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling AllEndpointsApi.recover_password"
      end
      # resource path
      local_var_path = '/api/v2/users/password-recovery'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = key
      query_params[:'password'] = password

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#recover_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Register new user.
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def register(email, opts = {})
      register_with_http_info(email, opts)
      nil
    end

    # Register new user.
    # @param email
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def register_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.register ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AllEndpointsApi.register"
      end
      # resource path
      local_var_path = '/api/v2/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#register\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Release device session.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def release_device_session(user_id, device_session_id, opts = {})
      data, _status_code, _headers = release_device_session_with_http_info(user_id, device_session_id, opts)
      data
    end

    # Release device session.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def release_device_session_with_http_info(user_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.release_device_session ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.release_device_session"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.release_device_session"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}/release'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#release_device_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Release device session.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def release_device_session1(device_session_id, opts = {})
      data, _status_code, _headers = release_device_session1_with_http_info(device_session_id, opts)
      data
    end

    # Release device session.
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def release_device_session1_with_http_info(device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.release_device_session1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.release_device_session1"
      end
      # resource path
      local_var_path = '/api/v2/device-sessions/{deviceSessionId}/release'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#release_device_session1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate build logs zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_project_test_run_build_logs(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_build_logs_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate build logs zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_build_logs_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_project_test_run_build_logs ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.request_project_test_run_build_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_project_test_run_build_logs"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/build-logs.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_project_test_run_build_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate files zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_project_test_run_files(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_files_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate files zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_files_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_project_test_run_files ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.request_project_test_run_files"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_project_test_run_files"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/files.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_project_test_run_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate logs zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_project_test_run_logs(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_logs_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate logs zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_logs_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_project_test_run_logs ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.request_project_test_run_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_project_test_run_logs"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/logs.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_project_test_run_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate performance zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_project_test_run_performance(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_performance_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate performance zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_performance_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_project_test_run_performance ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.request_project_test_run_performance"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_project_test_run_performance"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/performance.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_project_test_run_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate screenshot zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_project_test_run_screenshots(project_id, run_id, opts = {})
      data, _status_code, _headers = request_project_test_run_screenshots_with_http_info(project_id, run_id, opts)
      data
    end

    # Generate screenshot zip.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_project_test_run_screenshots_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_project_test_run_screenshots ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.request_project_test_run_screenshots"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_project_test_run_screenshots"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/screenshots.zip'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_project_test_run_screenshots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate build logs zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :user_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_test_run_build_logs(run_id, opts = {})
      data, _status_code, _headers = request_test_run_build_logs_with_http_info(run_id, opts)
      data
    end

    # Generate build logs zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :user_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_build_logs_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_test_run_build_logs ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_test_run_build_logs"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/build-logs.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_test_run_build_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate files zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id
    # @option opts [Integer] :project_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_test_run_files(run_id, opts = {})
      data, _status_code, _headers = request_test_run_files_with_http_info(run_id, opts)
      data
    end

    # Generate files zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id
    # @option opts [Integer] :project_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_files_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_test_run_files ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_test_run_files"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/files.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_test_run_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate logs zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id
    # @option opts [Integer] :project_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_test_run_logs(run_id, opts = {})
      data, _status_code, _headers = request_test_run_logs_with_http_info(run_id, opts)
      data
    end

    # Generate logs zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id
    # @option opts [Integer] :project_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_logs_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_test_run_logs ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_test_run_logs"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/logs.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_test_run_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate performance zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :user_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_test_run_performance(run_id, opts = {})
      data, _status_code, _headers = request_test_run_performance_with_http_info(run_id, opts)
      data
    end

    # Generate performance zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :user_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_performance_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_test_run_performance ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_test_run_performance"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/performance.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_test_run_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate screenshot zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :user_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_test_run_screenshots(run_id, opts = {})
      data, _status_code, _headers = request_test_run_screenshots_with_http_info(run_id, opts)
      data
    end

    # Generate screenshot zip.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Integer] :user_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_test_run_screenshots_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_test_run_screenshots ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_test_run_screenshots"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/screenshots.zip'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_test_run_screenshots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate files zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_user_test_run_files(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = request_user_test_run_files_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Generate files zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_user_test_run_files_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_user_test_run_files ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.request_user_test_run_files"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.request_user_test_run_files"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_user_test_run_files"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/files.zip'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_user_test_run_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate logs zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_user_test_run_logs(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = request_user_test_run_logs_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Generate logs zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_user_test_run_logs_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_user_test_run_logs ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.request_user_test_run_logs"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.request_user_test_run_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_user_test_run_logs"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/logs.zip'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_user_test_run_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate performance zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_user_test_run_performance(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = request_user_test_run_performance_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Generate performance zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_user_test_run_performance_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_user_test_run_performance ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.request_user_test_run_performance"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.request_user_test_run_performance"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_user_test_run_performance"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/performance.zip'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_user_test_run_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate screenshot zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIUserFile]
    def request_user_test_run_screenshots(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = request_user_test_run_screenshots_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Generate screenshot zip.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def request_user_test_run_screenshots_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.request_user_test_run_screenshots ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.request_user_test_run_screenshots"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.request_user_test_run_screenshots"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.request_user_test_run_screenshots"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/screenshots.zip'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#request_user_test_run_screenshots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resend activation email to additional user.
    # @param user_id
    # @param additional_user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def resend_activation_email(user_id, additional_user_id, opts = {})
      data, _status_code, _headers = resend_activation_email_with_http_info(user_id, additional_user_id, opts)
      data
    end

    # Resend activation email to additional user.
    # @param user_id
    # @param additional_user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def resend_activation_email_with_http_info(user_id, additional_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.resend_activation_email ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.resend_activation_email"
      end
      # verify the required parameter 'additional_user_id' is set
      if @api_client.config.client_side_validation && additional_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'additional_user_id' when calling AllEndpointsApi.resend_activation_email"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/account/additional-users/{additionalUserId}/resend-activation'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'additionalUserId' + '}', additional_user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#resend_activation_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resend activation email.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def resend_activation_email1(user_id, opts = {})
      data, _status_code, _headers = resend_activation_email1_with_http_info(user_id, opts)
      data
    end

    # Resend activation email.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def resend_activation_email1_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.resend_activation_email1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.resend_activation_email1"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/resend-activation'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#resend_activation_email1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resend email.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIAdminEmail]
    def resend_email(id, opts = {})
      data, _status_code, _headers = resend_email_with_http_info(id, opts)
      data
    end

    # Resend email.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminEmail, Integer, Hash)>] APIAdminEmail data, response status code and response headers
    def resend_email_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.resend_email ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.resend_email"
      end
      # resource path
      local_var_path = '/api/v2/admin/emails/{id}/resend'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminEmail'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#resend_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resend license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APILicense]
    def resend_license(id, opts = {})
      data, _status_code, _headers = resend_license_with_http_info(id, opts)
      data
    end

    # Resend license.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APILicense, Integer, Hash)>] APILicense data, response status code and response headers
    def resend_license_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.resend_license ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.resend_license"
      end
      # resource path
      local_var_path = '/api/v2/admin/licenses/{id}/resend'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APILicense'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#resend_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset api key.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def reset_api_key(user_id, opts = {})
      data, _status_code, _headers = reset_api_key_with_http_info(user_id, opts)
      data
    end

    # Reset api key.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def reset_api_key_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.reset_api_key ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.reset_api_key"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/reset-api-key'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#reset_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restore user requested to be deleted.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUser]
    def restore_user(user_id, opts = {})
      data, _status_code, _headers = restore_user_with_http_info(user_id, opts)
      data
    end

    # Restore user requested to be deleted.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def restore_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.restore_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.restore_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/restore'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#restore_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry device session.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def retry_device_session(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = retry_device_session_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Retry device session.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def retry_device_session_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.retry_device_session ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.retry_device_session"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.retry_device_session"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.retry_device_session"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/retry'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#retry_device_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry device session.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def retry_device_session_with_user(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = retry_device_session_with_user_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Retry device session.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def retry_device_session_with_user_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.retry_device_session_with_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.retry_device_session_with_user"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.retry_device_session_with_user"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.retry_device_session_with_user"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.retry_device_session_with_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/retry'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#retry_device_session_with_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry test run or its device sessions.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APITestRun]
    def retry_project_test_run(project_id, run_id, opts = {})
      data, _status_code, _headers = retry_project_test_run_with_http_info(project_id, run_id, opts)
      data
    end

    # Retry test run or its device sessions.
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def retry_project_test_run_with_http_info(project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.retry_project_test_run ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.retry_project_test_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.retry_project_test_run"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/retry'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#retry_project_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry test run or its device sessions.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APIAdminTestRun]
    def retry_test_run(run_id, opts = {})
      data, _status_code, _headers = retry_test_run_with_http_info(run_id, opts)
      data
    end

    # Retry test run or its device sessions.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APIAdminTestRun, Integer, Hash)>] APIAdminTestRun data, response status code and response headers
    def retry_test_run_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.retry_test_run ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.retry_test_run"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}/retry'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminTestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#retry_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry test run or its device sessions.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APITestRun]
    def retry_test_run_with_test_run(run_id, opts = {})
      data, _status_code, _headers = retry_test_run_with_test_run_with_http_info(run_id, opts)
      data
    end

    # Retry test run or its device sessions.
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def retry_test_run_with_test_run_with_http_info(run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.retry_test_run_with_test_run ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.retry_test_run_with_test_run"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/retry'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#retry_test_run_with_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retry test run or its device sessions.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [APITestRun]
    def retry_test_run_with_user(user_id, project_id, run_id, opts = {})
      data, _status_code, _headers = retry_test_run_with_user_with_http_info(user_id, project_id, run_id, opts)
      data
    end

    # Retry test run or its device sessions.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_run_ids
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def retry_test_run_with_user_with_http_info(user_id, project_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.retry_test_run_with_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.retry_test_run_with_user"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.retry_test_run_with_user"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.retry_test_run_with_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/retry'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceRunIds[]'] = @api_client.build_collection_param(opts[:'device_run_ids'], :multi) if !opts[:'device_run_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#retry_test_run_with_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rollback framework's config.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIProjectJobConfig]
    def rollback_framework_config(id, opts = {})
      data, _status_code, _headers = rollback_framework_config_with_http_info(id, opts)
      data
    end

    # Rollback framework&#x27;s config.
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProjectJobConfig, Integer, Hash)>] APIProjectJobConfig data, response status code and response headers
    def rollback_framework_config_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.rollback_framework_config ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.rollback_framework_config"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}/config'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProjectJobConfig'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#rollback_framework_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run test run.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def run_test_run(body, opts = {})
      data, _status_code, _headers = run_test_run_with_http_info(body, opts)
      data
    end

    # Run test run.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def run_test_run_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.run_test_run ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AllEndpointsApi.run_test_run"
      end
      # resource path
      local_var_path = '/api/v2/runs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#run_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run test run.
    # @param body
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def run_user_test_run(body, user_id, opts = {})
      data, _status_code, _headers = run_user_test_run_with_http_info(body, user_id, opts)
      data
    end

    # Run test run.
    # @param body
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def run_user_test_run_with_http_info(body, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.run_user_test_run ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AllEndpointsApi.run_user_test_run"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.run_user_test_run"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/runs'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#run_user_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device session screenshot.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param screenshot_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [nil]
    def serve_screenshot(user_id, project_id, run_id, device_session_id, screenshot_id, opts = {})
      serve_screenshot_with_http_info(user_id, project_id, run_id, device_session_id, screenshot_id, opts)
      nil
    end

    # Get device session screenshot.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param screenshot_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width
    # @option opts [Integer] :height
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def serve_screenshot_with_http_info(user_id, project_id, run_id, device_session_id, screenshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.serve_screenshot ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.serve_screenshot"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.serve_screenshot"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.serve_screenshot"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.serve_screenshot"
      end
      # verify the required parameter 'screenshot_id' is set
      if @api_client.config.client_side_validation && screenshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'screenshot_id' when calling AllEndpointsApi.serve_screenshot"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}/screenshots/{screenshotId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s).sub('{' + 'screenshotId' + '}', screenshot_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#serve_screenshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change billable status.
    # @param run_id
    # @param billable
    # @param [Hash] opts the optional parameters
    # @return [APIAdminTestRun]
    def set_billable_flag(run_id, billable, opts = {})
      data, _status_code, _headers = set_billable_flag_with_http_info(run_id, billable, opts)
      data
    end

    # Change billable status.
    # @param run_id
    # @param billable
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminTestRun, Integer, Hash)>] APIAdminTestRun data, response status code and response headers
    def set_billable_flag_with_http_info(run_id, billable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.set_billable_flag ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.set_billable_flag"
      end
      # verify the required parameter 'billable' is set
      if @api_client.config.client_side_validation && billable.nil?
        fail ArgumentError, "Missing the required parameter 'billable' when calling AllEndpointsApi.set_billable_flag"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}/changebillable'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'billable'] = billable

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminTestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#set_billable_flag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change billable status for device session.
    # @param device_session_id
    # @param billable
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceSession]
    def set_billable_flag1(device_session_id, billable, opts = {})
      data, _status_code, _headers = set_billable_flag1_with_http_info(device_session_id, billable, opts)
      data
    end

    # Change billable status for device session.
    # @param device_session_id
    # @param billable
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def set_billable_flag1_with_http_info(device_session_id, billable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.set_billable_flag1 ...'
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.set_billable_flag1"
      end
      # verify the required parameter 'billable' is set
      if @api_client.config.client_side_validation && billable.nil?
        fail ArgumentError, "Missing the required parameter 'billable' when calling AllEndpointsApi.set_billable_flag1"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-sessions/{deviceSessionId}/changebillable'.sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'billable'] = billable

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#set_billable_flag1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Turn on/off maintenance mode.
    # @param enabled
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type
    # @return [APIMaintenance]
    def set_maintenance(enabled, opts = {})
      data, _status_code, _headers = set_maintenance_with_http_info(enabled, opts)
      data
    end

    # Turn on/off maintenance mode.
    # @param enabled
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type
    # @return [Array<(APIMaintenance, Integer, Hash)>] APIMaintenance data, response status code and response headers
    def set_maintenance_with_http_info(enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.set_maintenance ...'
      end
      # verify the required parameter 'enabled' is set
      if @api_client.config.client_side_validation && enabled.nil?
        fail ArgumentError, "Missing the required parameter 'enabled' when calling AllEndpointsApi.set_maintenance"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['BARE_METAL', 'EC2', 'VM'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of BARE_METAL, EC2, VM'
      end
      # resource path
      local_var_path = '/api/v2/admin/maintenance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enabled'] = enabled
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIMaintenance'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#set_maintenance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change priority.
    # @param run_id
    # @param priority
    # @param [Hash] opts the optional parameters
    # @return [APIAdminTestRun]
    def set_priority(run_id, priority, opts = {})
      data, _status_code, _headers = set_priority_with_http_info(run_id, priority, opts)
      data
    end

    # Change priority.
    # @param run_id
    # @param priority
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAdminTestRun, Integer, Hash)>] APIAdminTestRun data, response status code and response headers
    def set_priority_with_http_info(run_id, priority, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.set_priority ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.set_priority"
      end
      # verify the required parameter 'priority' is set
      if @api_client.config.client_side_validation && priority.nil?
        fail ArgumentError, "Missing the required parameter 'priority' when calling AllEndpointsApi.set_priority"
      end
      # resource path
      local_var_path = '/api/v2/admin/runs/{runId}/changepriority'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'priority'] = priority

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminTestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#set_priority\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [APIListAPISharedResource]
    def share_device_group(user_id, device_group_id, opts = {})
      data, _status_code, _headers = share_device_group_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Share device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def share_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.share_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.share_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.share_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/share'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#share_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [APIListAPISharedResource]
    def share_device_group1(device_group_id, opts = {})
      data, _status_code, _headers = share_device_group1_with_http_info(device_group_id, opts)
      data
    end

    # Share device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def share_device_group1_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.share_device_group1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.share_device_group1"
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}/share'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#share_device_group1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [APIListAPISharedResource]
    def share_file(user_id, file_id, opts = {})
      data, _status_code, _headers = share_file_with_http_info(user_id, file_id, opts)
      data
    end

    # Share file.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def share_file_with_http_info(user_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.share_file ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.share_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.share_file"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}/share'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#share_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [APIListAPISharedResource]
    def share_file1(file_id, opts = {})
      data, _status_code, _headers = share_file1_with_http_info(file_id, opts)
      data
    end

    # Share file.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def share_file1_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.share_file1 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.share_file1"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/share'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#share_file1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [APIListAPISharedResource]
    def share_project(user_id, project_id, opts = {})
      data, _status_code, _headers = share_project_with_http_info(user_id, project_id, opts)
      data
    end

    # Share project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def share_project_with_http_info(user_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.share_project ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.share_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.share_project"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/share'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#share_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Share project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [APIListAPISharedResource]
    def share_project1(project_id, opts = {})
      data, _status_code, _headers = share_project1_with_http_info(project_id, opts)
      data
    end

    # Share project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :access_group_id
    # @option opts [String] :email
    # @return [Array<(APIListAPISharedResource, Integer, Hash)>] APIListAPISharedResource data, response status code and response headers
    def share_project1_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.share_project1 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.share_project1"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/share'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accessGroupId'] = opts[:'access_group_id'] if !opts[:'access_group_id'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPISharedResource'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#share_project1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Store user preferences.
    # @param body
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [APIUserPreference]
    def store_user_preferences(body, user_id, opts = {})
      data, _status_code, _headers = store_user_preferences_with_http_info(body, user_id, opts)
      data
    end

    # Store user preferences.
    # @param body
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserPreference, Integer, Hash)>] APIUserPreference data, response status code and response headers
    def store_user_preferences_with_http_info(body, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.store_user_preferences ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AllEndpointsApi.store_user_preferences"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.store_user_preferences"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/preferences'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'APIUserPreference'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#store_user_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Store ui preferences.
    # @param user_id
    # @param data
    # @param [Hash] opts the optional parameters
    # @return [String]
    def store_user_ui_preferences(user_id, data, opts = {})
      data, _status_code, _headers = store_user_ui_preferences_with_http_info(user_id, data, opts)
      data
    end

    # Store ui preferences.
    # @param user_id
    # @param data
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def store_user_ui_preferences_with_http_info(user_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.store_user_ui_preferences ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.store_user_ui_preferences"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling AllEndpointsApi.store_user_ui_preferences"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/ui-preferences'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'data'] = data

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'String'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#store_user_ui_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [APIMessage]
    def test_user_notification(user_id, id, opts = {})
      data, _status_code, _headers = test_user_notification_with_http_info(user_id, id, opts)
      data
    end

    # Test notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIMessage, Integer, Hash)>] APIMessage data, response status code and response headers
    def test_user_notification_with_http_info(user_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.test_user_notification ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.test_user_notification"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.test_user_notification"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications/{id}/test'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIMessage'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#test_user_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unarchive project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unarchive_project(project_id, opts = {})
      unarchive_project_with_http_info(project_id, opts)
      nil
    end

    # Unarchive project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unarchive_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.unarchive_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.unarchive_project"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/unarchive'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#unarchive_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope
    # @option opts [String] :name
    # @return [APIAccessGroup]
    def update(user_id, access_group_id, opts = {})
      data, _status_code, _headers = update_with_http_info(user_id, access_group_id, opts)
      data
    end

    # Update access group.
    # @param user_id
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope
    # @option opts [String] :name
    # @return [Array<(APIAccessGroup, Integer, Hash)>] APIAccessGroup data, response status code and response headers
    def update_with_http_info(user_id, access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update"
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.update"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/access-groups/{accessGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update access group.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope
    # @option opts [String] :name
    # @return [APIAccessGroup]
    def update1(access_group_id, opts = {})
      data, _status_code, _headers = update1_with_http_info(access_group_id, opts)
      data
    end

    # Update access group.
    # @param access_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope
    # @option opts [String] :name
    # @return [Array<(APIAccessGroup, Integer, Hash)>] APIAccessGroup data, response status code and response headers
    def update1_with_http_info(access_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update1 ...'
      end
      # verify the required parameter 'access_group_id' is set
      if @api_client.config.client_side_validation && access_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'access_group_id' when calling AllEndpointsApi.update1"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['USER', 'ACCOUNT', 'GLOBAL'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of USER, ACCOUNT, GLOBAL'
      end
      # resource path
      local_var_path = '/api/v2/access-groups/{accessGroupId}'.sub('{' + 'accessGroupId' + '}', access_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccessGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update account preferences.
    # @param body
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccountPreference]
    def update_account_preferences(body, account_id, opts = {})
      data, _status_code, _headers = update_account_preferences_with_http_info(body, account_id, opts)
      data
    end

    # Update account preferences.
    # @param body
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountPreference, Integer, Hash)>] APIAccountPreference data, response status code and response headers
    def update_account_preferences_with_http_info(body, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_account_preferences ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AllEndpointsApi.update_account_preferences"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AllEndpointsApi.update_account_preferences"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{accountId}/preferences'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'APIAccountPreference'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_account_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Force update account service subscription price.
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [APIAccountService]
    def update_account_service_price(account_service_id, opts = {})
      data, _status_code, _headers = update_account_service_price_with_http_info(account_service_id, opts)
      data
    end

    # Force update account service subscription price.
    # @param account_service_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIAccountService, Integer, Hash)>] APIAccountService data, response status code and response headers
    def update_account_service_price_with_http_info(account_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_account_service_price ...'
      end
      # verify the required parameter 'account_service_id' is set
      if @api_client.config.client_side_validation && account_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_service_id' when calling AllEndpointsApi.update_account_service_price"
      end
      # resource path
      local_var_path = '/api/v2/admin/account-services/{accountServiceId}/update-price'.sub('{' + 'accountServiceId' + '}', account_service_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAccountService'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_account_service_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update label.
    # @param group_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @return [APIDeviceProperty]
    def update_api_label(group_id, label_id, opts = {})
      data, _status_code, _headers = update_api_label_with_http_info(group_id, label_id, opts)
      data
    end

    # Update label.
    # @param group_id
    # @param label_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @return [Array<(APIDeviceProperty, Integer, Hash)>] APIDeviceProperty data, response status code and response headers
    def update_api_label_with_http_info(group_id, label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_api_label ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AllEndpointsApi.update_api_label"
      end
      # verify the required parameter 'label_id' is set
      if @api_client.config.client_side_validation && label_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_id' when calling AllEndpointsApi.update_api_label"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}/labels/{labelId}'.sub('{' + 'groupId' + '}', group_id.to_s).sub('{' + 'labelId' + '}', label_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_api_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update browser.
    # @param id
    # @param name
    # @param display_name
    # @param version
    # @param os_type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :architecture
    # @option opts [String] :install_url
    # @return [APIBrowser]
    def update_browser(id, name, display_name, version, os_type, opts = {})
      data, _status_code, _headers = update_browser_with_http_info(id, name, display_name, version, os_type, opts)
      data
    end

    # Update browser.
    # @param id
    # @param name
    # @param display_name
    # @param version
    # @param os_type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :architecture
    # @option opts [String] :install_url
    # @return [Array<(APIBrowser, Integer, Hash)>] APIBrowser data, response status code and response headers
    def update_browser_with_http_info(id, name, display_name, version, os_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_browser ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.update_browser"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.update_browser"
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AllEndpointsApi.update_browser"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling AllEndpointsApi.update_browser"
      end
      # verify the required parameter 'os_type' is set
      if @api_client.config.client_side_validation && os_type.nil?
        fail ArgumentError, "Missing the required parameter 'os_type' when calling AllEndpointsApi.update_browser"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(os_type)
        fail ArgumentError, "invalid value for 'os_type', must be one of IOS, ANDROID, DESKTOP, UNDEFINED"
      end
      # resource path
      local_var_path = '/api/v2/admin/browsers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'displayName'] = display_name
      query_params[:'version'] = version
      query_params[:'osType'] = os_type
      query_params[:'architecture'] = opts[:'architecture'] if !opts[:'architecture'].nil?
      query_params[:'installUrl'] = opts[:'install_url'] if !opts[:'install_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIBrowser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_browser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update cluster.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled
    # @option opts [BOOLEAN] :quiet_down
    # @option opts [BOOLEAN] :restart
    # @option opts [BOOLEAN] :turn_maintenance
    # @option opts [String] :url
    # @return [APICluster]
    def update_cluster(id, opts = {})
      data, _status_code, _headers = update_cluster_with_http_info(id, opts)
      data
    end

    # Update cluster.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled
    # @option opts [BOOLEAN] :quiet_down
    # @option opts [BOOLEAN] :restart
    # @option opts [BOOLEAN] :turn_maintenance
    # @option opts [String] :url
    # @return [Array<(APICluster, Integer, Hash)>] APICluster data, response status code and response headers
    def update_cluster_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_cluster ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.update_cluster"
      end
      # resource path
      local_var_path = '/api/v2/clusters/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'quietDown'] = opts[:'quiet_down'] if !opts[:'quiet_down'].nil?
      query_params[:'restart'] = opts[:'restart'] if !opts[:'restart'].nil?
      query_params[:'turnMaintenance'] = opts[:'turn_maintenance'] if !opts[:'turn_maintenance'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APICluster'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :release_version
    # @option opts [Integer] :api_level
    # @option opts [String] :serial_id
    # @option opts [String] :name
    # @option opts [BOOLEAN] :enabled
    # @option opts [String] :unlock_gesture
    # @option opts [String] :init_step
    # @option opts [String] :ip_address
    # @option opts [Integer] :account_id
    # @option opts [Integer] :test_time_limit
    # @option opts [Integer] :dedication_end_time
    # @option opts [String] :comment
    # @return [APIAdminDevice]
    def update_device(device_id, opts = {})
      data, _status_code, _headers = update_device_with_http_info(device_id, opts)
      data
    end

    # Update device.
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :release_version
    # @option opts [Integer] :api_level
    # @option opts [String] :serial_id
    # @option opts [String] :name
    # @option opts [BOOLEAN] :enabled
    # @option opts [String] :unlock_gesture
    # @option opts [String] :init_step
    # @option opts [String] :ip_address
    # @option opts [Integer] :account_id
    # @option opts [Integer] :test_time_limit
    # @option opts [Integer] :dedication_end_time
    # @option opts [String] :comment
    # @return [Array<(APIAdminDevice, Integer, Hash)>] APIAdminDevice data, response status code and response headers
    def update_device_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling AllEndpointsApi.update_device"
      end
      if @api_client.config.client_side_validation && opts[:'init_step'] && !['SKIP', 'REBOOT', 'REBOOT_WITH_UNLOCK', 'UNLOCK_ONLY'].include?(opts[:'init_step'])
        fail ArgumentError, 'invalid value for "init_step", must be one of SKIP, REBOOT, REBOOT_WITH_UNLOCK, UNLOCK_ONLY'
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/{deviceId}'.sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'releaseVersion'] = opts[:'release_version'] if !opts[:'release_version'].nil?
      query_params[:'apiLevel'] = opts[:'api_level'] if !opts[:'api_level'].nil?
      query_params[:'serialId'] = opts[:'serial_id'] if !opts[:'serial_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'unlockGesture'] = opts[:'unlock_gesture'] if !opts[:'unlock_gesture'].nil?
      query_params[:'initStep'] = opts[:'init_step'] if !opts[:'init_step'].nil?
      query_params[:'ipAddress'] = opts[:'ip_address'] if !opts[:'ip_address'].nil?
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'testTimeLimit'] = opts[:'test_time_limit'] if !opts[:'test_time_limit'].nil?
      query_params[:'dedicationEndTime'] = opts[:'dedication_end_time'] if !opts[:'dedication_end_time'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device cleanup configuration.
    # @param id
    # @param content
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled  (default to true)
    # @option opts [String] :discriminator
    # @return [APIDeviceCleanupConfiguration]
    def update_device_cleanup_configuration(id, content, opts = {})
      data, _status_code, _headers = update_device_cleanup_configuration_with_http_info(id, content, opts)
      data
    end

    # Update device cleanup configuration.
    # @param id
    # @param content
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :enabled
    # @option opts [String] :discriminator
    # @return [Array<(APIDeviceCleanupConfiguration, Integer, Hash)>] APIDeviceCleanupConfiguration data, response status code and response headers
    def update_device_cleanup_configuration_with_http_info(id, content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device_cleanup_configuration ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.update_device_cleanup_configuration"
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling AllEndpointsApi.update_device_cleanup_configuration"
      end
      # resource path
      local_var_path = '/api/v2/admin/devices/cleanup-configurations/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = content
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'discriminator'] = opts[:'discriminator'] if !opts[:'discriminator'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceCleanupConfiguration'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device_cleanup_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device model.
    # @param device_model_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :release_version
    # @option opts [Integer] :api_level
    # @option opts [String] :name
    # @option opts [String] :manufacturer
    # @option opts [BOOLEAN] :enabled
    # @option opts [Integer] :type_id
    # @option opts [Integer] :credits_price
    # @return [APIDevice]
    def update_device_model(device_model_id, opts = {})
      data, _status_code, _headers = update_device_model_with_http_info(device_model_id, opts)
      data
    end

    # Update device model.
    # @param device_model_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :release_version
    # @option opts [Integer] :api_level
    # @option opts [String] :name
    # @option opts [String] :manufacturer
    # @option opts [BOOLEAN] :enabled
    # @option opts [Integer] :type_id
    # @option opts [Integer] :credits_price
    # @return [Array<(APIDevice, Integer, Hash)>] APIDevice data, response status code and response headers
    def update_device_model_with_http_info(device_model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device_model ...'
      end
      # verify the required parameter 'device_model_id' is set
      if @api_client.config.client_side_validation && device_model_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_model_id' when calling AllEndpointsApi.update_device_model"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-models/{deviceModelId}'.sub('{' + 'deviceModelId' + '}', device_model_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'releaseVersion'] = opts[:'release_version'] if !opts[:'release_version'].nil?
      query_params[:'apiLevel'] = opts[:'api_level'] if !opts[:'api_level'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'manufacturer'] = opts[:'manufacturer'] if !opts[:'manufacturer'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'typeId'] = opts[:'type_id'] if !opts[:'type_id'].nil?
      query_params[:'creditsPrice'] = opts[:'credits_price'] if !opts[:'credits_price'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device model browsers.
    # @param device_model_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :browser_ids
    # @return [APIListAPIBrowser]
    def update_device_model_browsers(device_model_id, opts = {})
      data, _status_code, _headers = update_device_model_browsers_with_http_info(device_model_id, opts)
      data
    end

    # Update device model browsers.
    # @param device_model_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :browser_ids
    # @return [Array<(APIListAPIBrowser, Integer, Hash)>] APIListAPIBrowser data, response status code and response headers
    def update_device_model_browsers_with_http_info(device_model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device_model_browsers ...'
      end
      # verify the required parameter 'device_model_id' is set
      if @api_client.config.client_side_validation && device_model_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_model_id' when calling AllEndpointsApi.update_device_model_browsers"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-models/{deviceModelId}/browsers'.sub('{' + 'deviceModelId' + '}', device_model_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'browserIds[]'] = @api_client.build_collection_param(opts[:'browser_ids'], :multi) if !opts[:'browser_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIBrowser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device_model_browsers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device model pool.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :min_available
    # @option opts [Integer] :max_total
    # @return [APIDeviceModelPool]
    def update_device_model_pool(id, opts = {})
      data, _status_code, _headers = update_device_model_pool_with_http_info(id, opts)
      data
    end

    # Update device model pool.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :min_available
    # @option opts [Integer] :max_total
    # @return [Array<(APIDeviceModelPool, Integer, Hash)>] APIDeviceModelPool data, response status code and response headers
    def update_device_model_pool_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device_model_pool ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.update_device_model_pool"
      end
      # resource path
      local_var_path = '/api/v2/admin/pools/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'minAvailable'] = opts[:'min_available'] if !opts[:'min_available'].nil?
      query_params[:'maxTotal'] = opts[:'max_total'] if !opts[:'max_total'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceModelPool'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device_model_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device picker filters.
    # @param [Hash] opts the optional parameters
    # @option opts [APIDevicePicker] :body
    # @option opts [BOOLEAN] :sync  (default to false)
    # @return [APIDevicePicker]
    def update_device_picker(opts = {})
      data, _status_code, _headers = update_device_picker_with_http_info(opts)
      data
    end

    # Update device picker filters.
    # @param [Hash] opts the optional parameters
    # @option opts [APIDevicePicker] :body
    # @option opts [BOOLEAN] :sync
    # @return [Array<(APIDevicePicker, Integer, Hash)>] APIDevicePicker data, response status code and response headers
    def update_device_picker_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device_picker ...'
      end
      # resource path
      local_var_path = '/api/v2/devices/filters'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sync'] = opts[:'sync'] if !opts[:'sync'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIDevicePicker'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device_picker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device session by external id.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :client_side_id
    # @option opts [String] :state
    # @return [APIDeviceSession]
    def update_device_session1(user_id, project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = update_device_session1_with_http_info(user_id, project_id, run_id, device_session_id, opts)
      data
    end

    # Update device session by external id.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :client_side_id
    # @option opts [String] :state
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def update_device_session1_with_http_info(user_id, project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device_session1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_device_session1"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.update_device_session1"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.update_device_session1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.update_device_session1"
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !['ABORTED', 'EXCLUDED', 'FAILED', 'RUNNING', 'SUCCEEDED', 'TIMEOUT', 'WAITING', 'WARNING'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of ABORTED, EXCLUDED, FAILED, RUNNING, SUCCEEDED, TIMEOUT, WAITING, WARNING'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'clientSideId'] = opts[:'client_side_id'] if !opts[:'client_side_id'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device_session1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device session by external id.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :client_side_id
    # @option opts [String] :state
    # @return [APIDeviceSession]
    def update_device_session2(run_id, device_session_id, opts = {})
      data, _status_code, _headers = update_device_session2_with_http_info(run_id, device_session_id, opts)
      data
    end

    # Update device session by external id.
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :client_side_id
    # @option opts [String] :state
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def update_device_session2_with_http_info(run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device_session2 ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.update_device_session2"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.update_device_session2"
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !['ABORTED', 'EXCLUDED', 'FAILED', 'RUNNING', 'SUCCEEDED', 'TIMEOUT', 'WAITING', 'WARNING'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of ABORTED, EXCLUDED, FAILED, RUNNING, SUCCEEDED, TIMEOUT, WAITING, WARNING'
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}/device-sessions/{deviceSessionId}'.sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'clientSideId'] = opts[:'client_side_id'] if !opts[:'client_side_id'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device_session2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device session by external id.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :client_side_id
    # @option opts [String] :state
    # @return [APIDeviceSession]
    def update_device_session3(project_id, run_id, device_session_id, opts = {})
      data, _status_code, _headers = update_device_session3_with_http_info(project_id, run_id, device_session_id, opts)
      data
    end

    # Update device session by external id.
    # @param project_id
    # @param run_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :client_side_id
    # @option opts [String] :state
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def update_device_session3_with_http_info(project_id, run_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device_session3 ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.update_device_session3"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.update_device_session3"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.update_device_session3"
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !['ABORTED', 'EXCLUDED', 'FAILED', 'RUNNING', 'SUCCEEDED', 'TIMEOUT', 'WAITING', 'WARNING'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of ABORTED, EXCLUDED, FAILED, RUNNING, SUCCEEDED, TIMEOUT, WAITING, WARNING'
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}/device-sessions/{deviceSessionId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'clientSideId'] = opts[:'client_side_id'] if !opts[:'client_side_id'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device_session3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device frame.
    # @param device_type_id
    # @param image_width
    # @param image_height
    # @param image_left
    # @param image_top
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :frame_extra_width
    # @return [APIAdminDeviceType]
    def update_device_type(device_type_id, image_width, image_height, image_left, image_top, opts = {})
      data, _status_code, _headers = update_device_type_with_http_info(device_type_id, image_width, image_height, image_left, image_top, opts)
      data
    end

    # Update device frame.
    # @param device_type_id
    # @param image_width
    # @param image_height
    # @param image_left
    # @param image_top
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :frame_extra_width
    # @return [Array<(APIAdminDeviceType, Integer, Hash)>] APIAdminDeviceType data, response status code and response headers
    def update_device_type_with_http_info(device_type_id, image_width, image_height, image_left, image_top, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_device_type ...'
      end
      # verify the required parameter 'device_type_id' is set
      if @api_client.config.client_side_validation && device_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_type_id' when calling AllEndpointsApi.update_device_type"
      end
      # verify the required parameter 'image_width' is set
      if @api_client.config.client_side_validation && image_width.nil?
        fail ArgumentError, "Missing the required parameter 'image_width' when calling AllEndpointsApi.update_device_type"
      end
      # verify the required parameter 'image_height' is set
      if @api_client.config.client_side_validation && image_height.nil?
        fail ArgumentError, "Missing the required parameter 'image_height' when calling AllEndpointsApi.update_device_type"
      end
      # verify the required parameter 'image_left' is set
      if @api_client.config.client_side_validation && image_left.nil?
        fail ArgumentError, "Missing the required parameter 'image_left' when calling AllEndpointsApi.update_device_type"
      end
      # verify the required parameter 'image_top' is set
      if @api_client.config.client_side_validation && image_top.nil?
        fail ArgumentError, "Missing the required parameter 'image_top' when calling AllEndpointsApi.update_device_type"
      end
      # resource path
      local_var_path = '/api/v2/admin/device-types/{deviceTypeId}'.sub('{' + 'deviceTypeId' + '}', device_type_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'imageWidth'] = image_width
      query_params[:'imageHeight'] = image_height
      query_params[:'imageLeft'] = image_left
      query_params[:'imageTop'] = image_top
      query_params[:'frameExtraWidth'] = opts[:'frame_extra_width'] if !opts[:'frame_extra_width'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIAdminDeviceType'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_device_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update file name.
    # @param user_id
    # @param file_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def update_file_name(user_id, file_id, name, opts = {})
      data, _status_code, _headers = update_file_name_with_http_info(user_id, file_id, name, opts)
      data
    end

    # Update file name.
    # @param user_id
    # @param file_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def update_file_name_with_http_info(user_id, file_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_file_name ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_file_name"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.update_file_name"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.update_file_name"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_file_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update file name.
    # @param file_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @return [APIUserFile]
    def update_file_name1(file_id, name, opts = {})
      data, _status_code, _headers = update_file_name1_with_http_info(file_id, name, opts)
      data
    end

    # Update file name.
    # @param file_id
    # @param name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def update_file_name1_with_http_info(file_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_file_name1 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.update_file_name1"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AllEndpointsApi.update_file_name1"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_file_name1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update file property.
    # @param file_id
    # @param property_id
    # @param value
    # @param [Hash] opts the optional parameters
    # @return [APIUserFileProperty]
    def update_file_property(file_id, property_id, value, opts = {})
      data, _status_code, _headers = update_file_property_with_http_info(file_id, property_id, value, opts)
      data
    end

    # Update file property.
    # @param file_id
    # @param property_id
    # @param value
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUserFileProperty, Integer, Hash)>] APIUserFileProperty data, response status code and response headers
    def update_file_property_with_http_info(file_id, property_id, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_file_property ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.update_file_property"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling AllEndpointsApi.update_file_property"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling AllEndpointsApi.update_file_property"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/properties/{propertyId}'.sub('{' + 'fileId' + '}', file_id.to_s).sub('{' + 'propertyId' + '}', property_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'value'] = value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUserFileProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_file_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update framework.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :description
    # @option opts [String] :os_type
    # @option opts [String] :required_app_extensions
    # @option opts [String] :required_test_extensions
    # @option opts [String] :required_test_file_tags
    # @option opts [String] :documentation_url
    # @option opts [BOOLEAN] :for_projects
    # @option opts [BOOLEAN] :can_run_from_ui
    # @option opts [BOOLEAN] :retryable
    # @option opts [BOOLEAN] :skip_queue
    # @option opts [BOOLEAN] :skip_older_sdk
    # @option opts [String] :type
    # @option opts [Integer] :label_id
    # @option opts [BOOLEAN] :add_label_to_devices  (default to false)
    # @option opts [Array<Integer>] :role_ids
    # @option opts [Integer] :sample_app_id
    # @option opts [Integer] :sample_test_id
    # @option opts [String] :icon
    # @return [APIFramework]
    def update_framework(id, opts = {})
      data, _status_code, _headers = update_framework_with_http_info(id, opts)
      data
    end

    # Update framework.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :description
    # @option opts [String] :os_type
    # @option opts [String] :required_app_extensions
    # @option opts [String] :required_test_extensions
    # @option opts [String] :required_test_file_tags
    # @option opts [String] :documentation_url
    # @option opts [BOOLEAN] :for_projects
    # @option opts [BOOLEAN] :can_run_from_ui
    # @option opts [BOOLEAN] :retryable
    # @option opts [BOOLEAN] :skip_queue
    # @option opts [BOOLEAN] :skip_older_sdk
    # @option opts [String] :type
    # @option opts [Integer] :label_id
    # @option opts [BOOLEAN] :add_label_to_devices
    # @option opts [Array<Integer>] :role_ids
    # @option opts [Integer] :sample_app_id
    # @option opts [Integer] :sample_test_id
    # @option opts [String] :icon
    # @return [Array<(APIFramework, Integer, Hash)>] APIFramework data, response status code and response headers
    def update_framework_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_framework ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.update_framework"
      end
      if @api_client.config.client_side_validation && opts[:'os_type'] && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(opts[:'os_type'])
        fail ArgumentError, 'invalid value for "os_type", must be one of IOS, ANDROID, DESKTOP, UNDEFINED'
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'osType'] = opts[:'os_type'] if !opts[:'os_type'].nil?
      query_params[:'requiredAppExtensions'] = opts[:'required_app_extensions'] if !opts[:'required_app_extensions'].nil?
      query_params[:'requiredTestExtensions'] = opts[:'required_test_extensions'] if !opts[:'required_test_extensions'].nil?
      query_params[:'requiredTestFileTags'] = opts[:'required_test_file_tags'] if !opts[:'required_test_file_tags'].nil?
      query_params[:'documentationUrl'] = opts[:'documentation_url'] if !opts[:'documentation_url'].nil?
      query_params[:'forProjects'] = opts[:'for_projects'] if !opts[:'for_projects'].nil?
      query_params[:'canRunFromUI'] = opts[:'can_run_from_ui'] if !opts[:'can_run_from_ui'].nil?
      query_params[:'retryable'] = opts[:'retryable'] if !opts[:'retryable'].nil?
      query_params[:'skipQueue'] = opts[:'skip_queue'] if !opts[:'skip_queue'].nil?
      query_params[:'skipOlderSdk'] = opts[:'skip_older_sdk'] if !opts[:'skip_older_sdk'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'labelId'] = opts[:'label_id'] if !opts[:'label_id'].nil?
      query_params[:'addLabelToDevices'] = opts[:'add_label_to_devices'] if !opts[:'add_label_to_devices'].nil?
      query_params[:'roleIds[]'] = @api_client.build_collection_param(opts[:'role_ids'], :multi) if !opts[:'role_ids'].nil?
      query_params[:'sampleAppId'] = opts[:'sample_app_id'] if !opts[:'sample_app_id'].nil?
      query_params[:'sampleTestId'] = opts[:'sample_test_id'] if !opts[:'sample_test_id'].nil?
      query_params[:'icon'] = opts[:'icon'] if !opts[:'icon'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIFramework'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_framework\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update framework's config.
    # @param id
    # @param content
    # @param [Hash] opts the optional parameters
    # @return [APIProjectJobConfig]
    def update_framework_config(id, content, opts = {})
      data, _status_code, _headers = update_framework_config_with_http_info(id, content, opts)
      data
    end

    # Update framework&#x27;s config.
    # @param id
    # @param content
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIProjectJobConfig, Integer, Hash)>] APIProjectJobConfig data, response status code and response headers
    def update_framework_config_with_http_info(id, content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_framework_config ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.update_framework_config"
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling AllEndpointsApi.update_framework_config"
      end
      # resource path
      local_var_path = '/api/v2/admin/frameworks/{id}/config'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'content'] = content

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProjectJobConfig'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_framework_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update label group.
    # @param group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @return [APILabelGroup]
    def update_label_group(group_id, opts = {})
      data, _status_code, _headers = update_label_group_with_http_info(group_id, opts)
      data
    end

    # Update label group.
    # @param group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @return [Array<(APILabelGroup, Integer, Hash)>] APILabelGroup data, response status code and response headers
    def update_label_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_label_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AllEndpointsApi.update_label_group"
      end
      # resource path
      local_var_path = '/api/v2/label-groups/{groupId}'.sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APILabelGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_label_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :description
    # @option opts [BOOLEAN] :common
    # @option opts [BOOLEAN] :read_only
    # @option opts [String] :archiving_strategy
    # @option opts [Integer] :archiving_item_count
    # @option opts [String] :email
    # @return [APIProject]
    def update_project(project_id, opts = {})
      data, _status_code, _headers = update_project_with_http_info(project_id, opts)
      data
    end

    # Update project.
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :description
    # @option opts [BOOLEAN] :common
    # @option opts [BOOLEAN] :read_only
    # @option opts [String] :archiving_strategy
    # @option opts [Integer] :archiving_item_count
    # @option opts [String] :email
    # @return [Array<(APIProject, Integer, Hash)>] APIProject data, response status code and response headers
    def update_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.update_project"
      end
      if @api_client.config.client_side_validation && opts[:'archiving_strategy'] && !['NEVER', 'DAYS', 'RUNS'].include?(opts[:'archiving_strategy'])
        fail ArgumentError, 'invalid value for "archiving_strategy", must be one of NEVER, DAYS, RUNS'
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'common'] = opts[:'common'] if !opts[:'common'].nil?
      query_params[:'readOnly'] = opts[:'read_only'] if !opts[:'read_only'].nil?
      query_params[:'archivingStrategy'] = opts[:'archiving_strategy'] if !opts[:'archiving_strategy'].nil?
      query_params[:'archivingItemCount'] = opts[:'archiving_item_count'] if !opts[:'archiving_item_count'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProject'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update test run.
    # @param project_id
    # @param run_id
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def update_project_test_run(project_id, run_id, display_name, opts = {})
      data, _status_code, _headers = update_project_test_run_with_http_info(project_id, run_id, display_name, opts)
      data
    end

    # Update test run.
    # @param project_id
    # @param run_id
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def update_project_test_run_with_http_info(project_id, run_id, display_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_project_test_run ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.update_project_test_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.update_project_test_run"
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AllEndpointsApi.update_project_test_run"
      end
      # resource path
      local_var_path = '/api/v2/projects/{projectId}/runs/{runId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'displayName'] = display_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_project_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update property.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :value
    # @option opts [String] :description
    # @option opts [Integer] :from_time
    # @option opts [Integer] :to_time
    # @option opts [BOOLEAN] :always_valid
    # @return [APIProperty]
    def update_property(id, opts = {})
      data, _status_code, _headers = update_property_with_http_info(id, opts)
      data
    end

    # Update property.
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :value
    # @option opts [String] :description
    # @option opts [Integer] :from_time
    # @option opts [Integer] :to_time
    # @option opts [BOOLEAN] :always_valid
    # @return [Array<(APIProperty, Integer, Hash)>] APIProperty data, response status code and response headers
    def update_property_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_property ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.update_property"
      end
      # resource path
      local_var_path = '/api/v2/properties/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'fromTime'] = opts[:'from_time'] if !opts[:'from_time'].nil?
      query_params[:'toTime'] = opts[:'to_time'] if !opts[:'to_time'].nil?
      query_params[:'alwaysValid'] = opts[:'always_valid'] if !opts[:'always_valid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update test run.
    # @param run_id
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [APITestRun]
    def update_test_run(run_id, display_name, opts = {})
      data, _status_code, _headers = update_test_run_with_http_info(run_id, display_name, opts)
      data
    end

    # Update test run.
    # @param run_id
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :project_id
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def update_test_run_with_http_info(run_id, display_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_test_run ...'
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.update_test_run"
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AllEndpointsApi.update_test_run"
      end
      # resource path
      local_var_path = '/api/v2/runs/{runId}'.sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'displayName'] = display_name
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :first_name
    # @option opts [String] :last_name
    # @option opts [String] :locale_country
    # @option opts [String] :time_zone
    # @option opts [String] :email
    # @option opts [String] :code
    # @option opts [String] :state
    # @option opts [String] :city
    # @option opts [String] :address
    # @option opts [String] :phone
    # @option opts [String] :organization
    # @option opts [String] :password
    # @option opts [String] :new_password
    # @option opts [String] :confirm_password
    # @option opts [BOOLEAN] :mfa_enabled
    # @option opts [String] :mfa_code
    # @return [APIUser]
    def update_user(user_id, opts = {})
      data, _status_code, _headers = update_user_with_http_info(user_id, opts)
      data
    end

    # Update user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :first_name
    # @option opts [String] :last_name
    # @option opts [String] :locale_country
    # @option opts [String] :time_zone
    # @option opts [String] :email
    # @option opts [String] :code
    # @option opts [String] :state
    # @option opts [String] :city
    # @option opts [String] :address
    # @option opts [String] :phone
    # @option opts [String] :organization
    # @option opts [String] :password
    # @option opts [String] :new_password
    # @option opts [String] :confirm_password
    # @option opts [BOOLEAN] :mfa_enabled
    # @option opts [String] :mfa_code
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def update_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_user"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'firstName'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'lastName'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'localeCountry'] = opts[:'locale_country'] if !opts[:'locale_country'].nil?
      query_params[:'timeZone'] = opts[:'time_zone'] if !opts[:'time_zone'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'phone'] = opts[:'phone'] if !opts[:'phone'].nil?
      query_params[:'organization'] = opts[:'organization'] if !opts[:'organization'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'newPassword'] = opts[:'new_password'] if !opts[:'new_password'].nil?
      query_params[:'confirmPassword'] = opts[:'confirm_password'] if !opts[:'confirm_password'].nil?
      query_params[:'mfaEnabled'] = opts[:'mfa_enabled'] if !opts[:'mfa_enabled'].nil?
      query_params[:'mfaCode'] = opts[:'mfa_code'] if !opts[:'mfa_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type
    # @return [APIDeviceGroup]
    def update_user_device_group(user_id, device_group_id, opts = {})
      data, _status_code, _headers = update_user_device_group_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Update device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def update_user_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_user_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_user_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.update_user_device_group"
      end
      if @api_client.config.client_side_validation && opts[:'os_type'] && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(opts[:'os_type'])
        fail ArgumentError, 'invalid value for "os_type", must be one of IOS, ANDROID, DESKTOP, UNDEFINED'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'osType'] = opts[:'os_type'] if !opts[:'os_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_user_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type
    # @return [APIDeviceGroup]
    def update_user_device_group1(device_group_id, opts = {})
      data, _status_code, _headers = update_user_device_group1_with_http_info(device_group_id, opts)
      data
    end

    # Update device group.
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def update_user_device_group1_with_http_info(device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_user_device_group1 ...'
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling AllEndpointsApi.update_user_device_group1"
      end
      if @api_client.config.client_side_validation && opts[:'os_type'] && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(opts[:'os_type'])
        fail ArgumentError, 'invalid value for "os_type", must be one of IOS, ANDROID, DESKTOP, UNDEFINED'
      end
      # resource path
      local_var_path = '/api/v2/device-groups/{deviceGroupId}'.sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'osType'] = opts[:'os_type'] if !opts[:'os_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_user_device_group1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update file content.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [FileIdFileBody] :body
    # @return [APIUserFile]
    def update_user_file(user_id, file_id, opts = {})
      data, _status_code, _headers = update_user_file_with_http_info(user_id, file_id, opts)
      data
    end

    # Update file content.
    # @param user_id
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [FileIdFileBody] :body
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def update_user_file_with_http_info(user_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_user_file ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_user_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.update_user_file"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files/{fileId}/file'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_user_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update file content.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [FileIdFileBody1] :body
    # @return [APIUserFile]
    def update_user_file1(file_id, opts = {})
      data, _status_code, _headers = update_user_file1_with_http_info(file_id, opts)
      data
    end

    # Update file content.
    # @param file_id
    # @param [Hash] opts the optional parameters
    # @option opts [FileIdFileBody1] :body
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def update_user_file1_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_user_file1 ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling AllEndpointsApi.update_user_file1"
      end
      # resource path
      local_var_path = '/api/v2/files/{fileId}/file'.sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_user_file1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :destination
    # @option opts [String] :scope
    # @return [APINotification]
    def update_user_notification(user_id, id, opts = {})
      data, _status_code, _headers = update_user_notification_with_http_info(user_id, id, opts)
      data
    end

    # Update notification.
    # @param user_id
    # @param id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :destination
    # @option opts [String] :scope
    # @return [Array<(APINotification, Integer, Hash)>] APINotification data, response status code and response headers
    def update_user_notification_with_http_info(user_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_user_notification ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_user_notification"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AllEndpointsApi.update_user_notification"
      end
      if @api_client.config.client_side_validation && opts[:'scope'] && !['ALL', 'TEST_RUN', 'TEST_RUN_FAILURE', 'TEST_RUN_SUCCEEDED', 'MAINTENANCE', 'MAINTENANCE_RELEASE', 'CUSTOM', 'NEWS', 'SYSTEM', 'CHECK', 'PLAN_LIMIT_REACHED', 'PLAN_INVOICE'].include?(opts[:'scope'])
        fail ArgumentError, 'invalid value for "scope", must be one of ALL, TEST_RUN, TEST_RUN_FAILURE, TEST_RUN_SUCCEEDED, MAINTENANCE, MAINTENANCE_RELEASE, CUSTOM, NEWS, SYSTEM, CHECK, PLAN_LIMIT_REACHED, PLAN_INVOICE'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/notifications/{id}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'destination'] = opts[:'destination'] if !opts[:'destination'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APINotification'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_user_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :description
    # @option opts [String] :archiving_strategy
    # @option opts [Integer] :archiving_item_count
    # @return [APIProject]
    def update_user_project(user_id, project_id, opts = {})
      data, _status_code, _headers = update_user_project_with_http_info(user_id, project_id, opts)
      data
    end

    # Update project.
    # @param user_id
    # @param project_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :description
    # @option opts [String] :archiving_strategy
    # @option opts [Integer] :archiving_item_count
    # @return [Array<(APIProject, Integer, Hash)>] APIProject data, response status code and response headers
    def update_user_project_with_http_info(user_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_user_project ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_user_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.update_user_project"
      end
      if @api_client.config.client_side_validation && opts[:'archiving_strategy'] && !['NEVER', 'DAYS', 'RUNS'].include?(opts[:'archiving_strategy'])
        fail ArgumentError, 'invalid value for "archiving_strategy", must be one of NEVER, DAYS, RUNS'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'archivingStrategy'] = opts[:'archiving_strategy'] if !opts[:'archiving_strategy'].nil?
      query_params[:'archivingItemCount'] = opts[:'archiving_item_count'] if !opts[:'archiving_item_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIProject'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_user_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update test run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @return [APITestRun]
    def update_user_test_run(user_id, project_id, run_id, display_name, opts = {})
      data, _status_code, _headers = update_user_test_run_with_http_info(user_id, project_id, run_id, display_name, opts)
      data
    end

    # Update test run.
    # @param user_id
    # @param project_id
    # @param run_id
    # @param display_name
    # @param [Hash] opts the optional parameters
    # @return [Array<(APITestRun, Integer, Hash)>] APITestRun data, response status code and response headers
    def update_user_test_run_with_http_info(user_id, project_id, run_id, display_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_user_test_run ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_user_test_run"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling AllEndpointsApi.update_user_test_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AllEndpointsApi.update_user_test_run"
      end
      # verify the required parameter 'display_name' is set
      if @api_client.config.client_side_validation && display_name.nil?
        fail ArgumentError, "Missing the required parameter 'display_name' when calling AllEndpointsApi.update_user_test_run"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/projects/{projectId}/runs/{runId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'runId' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'displayName'] = display_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APITestRun'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_user_test_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device session by external id.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :client_side_id
    # @option opts [String] :state
    # @return [APIDeviceSession]
    def update_users_device_session1(user_id, device_session_id, opts = {})
      data, _status_code, _headers = update_users_device_session1_with_http_info(user_id, device_session_id, opts)
      data
    end

    # Update device session by external id.
    # @param user_id
    # @param device_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :client_side_id
    # @option opts [String] :state
    # @return [Array<(APIDeviceSession, Integer, Hash)>] APIDeviceSession data, response status code and response headers
    def update_users_device_session1_with_http_info(user_id, device_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_users_device_session1 ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_users_device_session1"
      end
      # verify the required parameter 'device_session_id' is set
      if @api_client.config.client_side_validation && device_session_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_session_id' when calling AllEndpointsApi.update_users_device_session1"
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !['ABORTED', 'EXCLUDED', 'FAILED', 'RUNNING', 'SUCCEEDED', 'TIMEOUT', 'WAITING', 'WARNING'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of ABORTED, EXCLUDED, FAILED, RUNNING, SUCCEEDED, TIMEOUT, WAITING, WARNING'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-sessions/{deviceSessionId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceSessionId' + '}', device_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'clientSideId'] = opts[:'client_side_id'] if !opts[:'client_side_id'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceSession'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_users_device_session1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update users main account, switch main user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id
    # @return [APIUser]
    def update_users_main_account(user_id, opts = {})
      data, _status_code, _headers = update_users_main_account_with_http_info(user_id, opts)
      data
    end

    # Update users main account, switch main user.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id
    # @return [Array<(APIUser, Integer, Hash)>] APIUser data, response status code and response headers
    def update_users_main_account_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.update_users_main_account ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.update_users_main_account"
      end
      # resource path
      local_var_path = '/api/v2/admin/users/{userId}/update-account'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIUser'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#update_users_main_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload file.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [UserIdFilesBody] :body
    # @return [APIUserFile]
    def upload_file(user_id, opts = {})
      data, _status_code, _headers = upload_file_with_http_info(user_id, opts)
      data
    end

    # Upload file.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [UserIdFilesBody] :body
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def upload_file_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.upload_file ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.upload_file"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/files'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#upload_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload file.
    # @param [Hash] opts the optional parameters
    # @option opts [V2FilesBody] :body
    # @option opts [BOOLEAN] :global  (default to false)
    # @return [APIUserFile]
    def upload_file1(opts = {})
      data, _status_code, _headers = upload_file1_with_http_info(opts)
      data
    end

    # Upload file.
    # @param [Hash] opts the optional parameters
    # @option opts [V2FilesBody] :body
    # @option opts [BOOLEAN] :global
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def upload_file1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.upload_file1 ...'
      end
      # resource path
      local_var_path = '/api/v2/files'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'global'] = opts[:'global'] if !opts[:'global'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#upload_file1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload sample file.
    # @param [Hash] opts the optional parameters
    # @option opts [AdminSamplesBody] :body
    # @return [APIUserFile]
    def upload_file2(opts = {})
      data, _status_code, _headers = upload_file2_with_http_info(opts)
      data
    end

    # Upload sample file.
    # @param [Hash] opts the optional parameters
    # @option opts [AdminSamplesBody] :body
    # @return [Array<(APIUserFile, Integer, Hash)>] APIUserFile data, response status code and response headers
    def upload_file2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.upload_file2 ...'
      end
      # resource path
      local_var_path = '/api/v2/admin/samples'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APIUserFile'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#upload_file2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload license to cloud.
    # @param [Hash] opts the optional parameters
    # @option opts [V2LicenseBody] :body
    # @return [APILicense]
    def upload_license(opts = {})
      data, _status_code, _headers = upload_license_with_http_info(opts)
      data
    end

    # Upload license to cloud.
    # @param [Hash] opts the optional parameters
    # @option opts [V2LicenseBody] :body
    # @return [Array<(APILicense, Integer, Hash)>] APILicense data, response status code and response headers
    def upload_license_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.upload_license ...'
      end
      # resource path
      local_var_path = '/api/v2/license'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body'])

      return_type = opts[:return_type] || 'APILicense'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#upload_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate test run configuration.
    # @param body
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_devices  (default to false)
    # @option opts [BOOLEAN] :include_device_groups  (default to true)
    # @option opts [BOOLEAN] :include_frameworks  (default to true)
    # @return [APITestRunConfig]
    def validate_test_run_config(body, user_id, opts = {})
      data, _status_code, _headers = validate_test_run_config_with_http_info(body, user_id, opts)
      data
    end

    # Validate test run configuration.
    # @param body
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_devices
    # @option opts [BOOLEAN] :include_device_groups
    # @option opts [BOOLEAN] :include_frameworks
    # @return [Array<(APITestRunConfig, Integer, Hash)>] APITestRunConfig data, response status code and response headers
    def validate_test_run_config_with_http_info(body, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.validate_test_run_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AllEndpointsApi.validate_test_run_config"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AllEndpointsApi.validate_test_run_config"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/runs/config'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeDevices'] = opts[:'include_devices'] if !opts[:'include_devices'].nil?
      query_params[:'includeDeviceGroups'] = opts[:'include_device_groups'] if !opts[:'include_device_groups'].nil?
      query_params[:'includeFrameworks'] = opts[:'include_frameworks'] if !opts[:'include_frameworks'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'APITestRunConfig'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#validate_test_run_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate test run configuration.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_devices  (default to false)
    # @option opts [BOOLEAN] :include_device_groups  (default to true)
    # @option opts [BOOLEAN] :include_frameworks  (default to true)
    # @return [APITestRunConfig]
    def validate_test_run_config1(body, opts = {})
      data, _status_code, _headers = validate_test_run_config1_with_http_info(body, opts)
      data
    end

    # Validate test run configuration.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_devices
    # @option opts [BOOLEAN] :include_device_groups
    # @option opts [BOOLEAN] :include_frameworks
    # @return [Array<(APITestRunConfig, Integer, Hash)>] APITestRunConfig data, response status code and response headers
    def validate_test_run_config1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllEndpointsApi.validate_test_run_config1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AllEndpointsApi.validate_test_run_config1"
      end
      # resource path
      local_var_path = '/api/v2/runs/config'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeDevices'] = opts[:'include_devices'] if !opts[:'include_devices'].nil?
      query_params[:'includeDeviceGroups'] = opts[:'include_device_groups'] if !opts[:'include_device_groups'].nil?
      query_params[:'includeFrameworks'] = opts[:'include_frameworks'] if !opts[:'include_frameworks'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'APITestRunConfig'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllEndpointsApi#validate_test_run_config1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
