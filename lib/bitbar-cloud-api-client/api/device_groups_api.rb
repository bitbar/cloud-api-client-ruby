=begin
#BitbarCloud API

#BitbarCloud API

OpenAPI spec version: 3.24.1-master-20231027-124207

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.50
=end

module BitbarCloudApiClient
  class DeviceGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add device to device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_id
    # @option opts [Array<Integer>] :device_ids
    # @return [APIDeviceGroup]
    def add_device_to_device_group(user_id, device_group_id, opts = {})
      data, _status_code, _headers = add_device_to_device_group_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Add device to device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :device_id
    # @option opts [Array<Integer>] :device_ids
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def add_device_to_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.add_device_to_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.add_device_to_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling DeviceGroupsApi.add_device_to_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/devices'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceId'] = @api_client.build_collection_param(opts[:'device_id'], :multi) if !opts[:'device_id'].nil?
      query_params[:'deviceIds[]'] = @api_client.build_collection_param(opts[:'device_ids'], :multi) if !opts[:'device_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#add_device_to_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add selectors to device group.
    # @param user_id
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIDeviceGroup]
    def add_selector_to_device_group(user_id, device_group_id, selector_ids, opts = {})
      data, _status_code, _headers = add_selector_to_device_group_with_http_info(user_id, device_group_id, selector_ids, opts)
      data
    end

    # Add selectors to device group.
    # @param user_id
    # @param device_group_id
    # @param selector_ids
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def add_selector_to_device_group_with_http_info(user_id, device_group_id, selector_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.add_selector_to_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.add_selector_to_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling DeviceGroupsApi.add_selector_to_device_group"
      end
      # verify the required parameter 'selector_ids' is set
      if @api_client.config.client_side_validation && selector_ids.nil?
        fail ArgumentError, "Missing the required parameter 'selector_ids' when calling DeviceGroupsApi.add_selector_to_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/selectors'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'selectorIds[]'] = @api_client.build_collection_param(selector_ids, :multi)
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#add_selector_to_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create device group.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type  (default to ANDROID)
    # @option opts [Array<Integer>] :device_ids
    # @option opts [Array<Integer>] :selector_ids
    # @return [APIDeviceGroup]
    def create_user_device_group(user_id, opts = {})
      data, _status_code, _headers = create_user_device_group_with_http_info(user_id, opts)
      data
    end

    # Create device group.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type
    # @option opts [Array<Integer>] :device_ids
    # @option opts [Array<Integer>] :selector_ids
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def create_user_device_group_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.create_user_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.create_user_device_group"
      end
      if @api_client.config.client_side_validation && opts[:'os_type'] && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(opts[:'os_type'])
        fail ArgumentError, 'invalid value for "os_type", must be one of IOS, ANDROID, DESKTOP, UNDEFINED'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'osType'] = opts[:'os_type'] if !opts[:'os_type'].nil?
      query_params[:'deviceIds[]'] = @api_client.build_collection_param(opts[:'device_ids'], :multi) if !opts[:'device_ids'].nil?
      query_params[:'selectorIds[]'] = @api_client.build_collection_param(opts[:'selector_ids'], :multi) if !opts[:'selector_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#create_user_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device from device group.
    # @param user_id
    # @param device_group_id
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_from_device_group(user_id, device_group_id, device_id, opts = {})
      delete_device_from_device_group_with_http_info(user_id, device_group_id, device_id, opts)
      nil
    end

    # Delete device from device group.
    # @param user_id
    # @param device_group_id
    # @param device_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_device_from_device_group_with_http_info(user_id, device_group_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.delete_device_from_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.delete_device_from_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling DeviceGroupsApi.delete_device_from_device_group"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceGroupsApi.delete_device_from_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/devices/{deviceId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s).sub('{' + 'deviceId' + '}', device_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#delete_device_from_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete selector from device group.
    # @param user_id
    # @param device_group_id
    # @param selector_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_selector_from_device_group(user_id, device_group_id, selector_id, opts = {})
      delete_selector_from_device_group_with_http_info(user_id, device_group_id, selector_id, opts)
      nil
    end

    # Delete selector from device group.
    # @param user_id
    # @param device_group_id
    # @param selector_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_selector_from_device_group_with_http_info(user_id, device_group_id, selector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.delete_selector_from_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.delete_selector_from_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling DeviceGroupsApi.delete_selector_from_device_group"
      end
      # verify the required parameter 'selector_id' is set
      if @api_client.config.client_side_validation && selector_id.nil?
        fail ArgumentError, "Missing the required parameter 'selector_id' when calling DeviceGroupsApi.delete_selector_from_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/selectors/{selectorId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s).sub('{' + 'selectorId' + '}', selector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#delete_selector_from_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_device_group(user_id, device_group_id, opts = {})
      delete_user_device_group_with_http_info(user_id, device_group_id, opts)
      nil
    end

    # Delete device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.delete_user_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.delete_user_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling DeviceGroupsApi.delete_user_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#delete_user_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group devices.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230364388&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDevice]
    def get_device_group_devices(user_id, device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_devices_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Get device group devices.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_properties
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;accountId_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;creditsPrice_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;device.archiveTime_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;locked_a&lt;br&gt;sort&#x3D;enabled_a&lt;br&gt;sort&#x3D;platform_a&lt;br&gt;sort&#x3D;manufacturer_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;accountid_eq_1&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;creditsprice_eq_1&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;online_eq_true&lt;br&gt;filter&#x3D;location_eq_value&lt;br&gt;filter&#x3D;device.archivetime_eq_1700230364388&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;locked_eq_true&lt;br&gt;filter&#x3D;enabled_eq_true&lt;br&gt;filter&#x3D;platform_eq_ios&lt;br&gt;filter&#x3D;manufacturer_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDevice, Integer, Hash)>] APIListAPIDevice data, response status code and response headers
    def get_device_group_devices_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.get_device_group_devices ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.get_device_group_devices"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling DeviceGroupsApi.get_device_group_devices"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/devices'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withProperties'] = opts[:'with_properties'] if !opts[:'with_properties'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDevice'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#get_device_group_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group selectors.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceProperty]
    def get_device_group_selectors(user_id, device_group_id, opts = {})
      data, _status_code, _headers = get_device_group_selectors_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Get device group selectors.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;propertyGroupName_a&lt;br&gt;sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;propertyGroupId_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;labelGroupName_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;propertygroupname_eq_value&lt;br&gt;filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;propertygroupid_eq_1&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;labelgroupname_eq_value
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceProperty, Integer, Hash)>] APIListAPIDeviceProperty data, response status code and response headers
    def get_device_group_selectors_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.get_device_group_selectors ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.get_device_group_selectors"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling DeviceGroupsApi.get_device_group_selectors"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}/selectors'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceProperty'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#get_device_group_selectors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [APIDeviceGroup]
    def get_user_device_group(user_id, device_group_id, opts = {})
      data, _status_code, _headers = get_user_device_group_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Get device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def get_user_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.get_user_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.get_user_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling DeviceGroupsApi.get_user_device_group"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#get_user_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device groups.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_public  (default to false)
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number (default to 0)
    # @option opts [String] :limit limit parameter define page size (default to 20)
    # @return [APIListAPIDeviceGroup]
    def get_user_device_groups(user_id, opts = {})
      data, _status_code, _headers = get_user_device_groups_with_http_info(user_id, opts)
      data
    end

    # Get device groups.
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_public
    # @option opts [String] :sort sort parameter contains list of fields used for sort query result &lt;br&gt; examples: &lt;br&gt; sort&#x3D;displayName_a&lt;br&gt;sort&#x3D;name_a&lt;br&gt;sort&#x3D;osType_a&lt;br&gt;sort&#x3D;id_a&lt;br&gt;sort&#x3D;userId_a
    # @option opts [String] :filter filter parameter contains list of fields used for filter query result &lt;br&gt; examples: &lt;br&gt; filter&#x3D;displayname_eq_value&lt;br&gt;filter&#x3D;name_eq_value&lt;br&gt;filter&#x3D;ostype_eq_ios&lt;br&gt;filter&#x3D;id_eq_1&lt;br&gt;filter&#x3D;userid_eq_1
    # @option opts [String] :offset offset parameter define page number
    # @option opts [String] :limit limit parameter define page size
    # @return [Array<(APIListAPIDeviceGroup, Integer, Hash)>] APIListAPIDeviceGroup data, response status code and response headers
    def get_user_device_groups_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.get_user_device_groups ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.get_user_device_groups"
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'withPublic'] = opts[:'with_public'] if !opts[:'with_public'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIListAPIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#get_user_device_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type
    # @return [APIDeviceGroup]
    def update_user_device_group(user_id, device_group_id, opts = {})
      data, _status_code, _headers = update_user_device_group_with_http_info(user_id, device_group_id, opts)
      data
    end

    # Update device group.
    # @param user_id
    # @param device_group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name
    # @option opts [String] :display_name
    # @option opts [String] :os_type
    # @return [Array<(APIDeviceGroup, Integer, Hash)>] APIDeviceGroup data, response status code and response headers
    def update_user_device_group_with_http_info(user_id, device_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceGroupsApi.update_user_device_group ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DeviceGroupsApi.update_user_device_group"
      end
      # verify the required parameter 'device_group_id' is set
      if @api_client.config.client_side_validation && device_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_group_id' when calling DeviceGroupsApi.update_user_device_group"
      end
      if @api_client.config.client_side_validation && opts[:'os_type'] && !['IOS', 'ANDROID', 'DESKTOP', 'UNDEFINED'].include?(opts[:'os_type'])
        fail ArgumentError, 'invalid value for "os_type", must be one of IOS, ANDROID, DESKTOP, UNDEFINED'
      end
      # resource path
      local_var_path = '/api/v2/users/{userId}/device-groups/{deviceGroupId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'deviceGroupId' + '}', device_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'displayName'] = opts[:'display_name'] if !opts[:'display_name'].nil?
      query_params[:'osType'] = opts[:'os_type'] if !opts[:'os_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'APIDeviceGroup'

      auth_names = opts[:auth_names] || ['apiKeyInHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceGroupsApi#update_user_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
